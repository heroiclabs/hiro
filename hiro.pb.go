// Copyright 2023 Heroic Labs & Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: hiro.proto

// The request and response objects for Hiro.

package hiro

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RpcId int32

const (
	RpcId_RPC_ID_UNSPECIFIED RpcId = 0
	// List all inventory items defined in the codex.
	RpcId_RPC_ID_INVENTORY_LIST RpcId = 1
	// List all inventory items owned by the player.
	RpcId_RPC_ID_INVENTORY_LIST_INVENTORY RpcId = 2
	// Consume one or more inventory items owned by the player.
	RpcId_RPC_ID_INVENTORY_CONSUME RpcId = 3
	// Grant one or more inventory items to the player.
	RpcId_RPC_ID_INVENTORY_GRANT RpcId = 4
	// Update the properties on one or more inventory items owned by the player.
	RpcId_RPC_ID_INVENTORY_UPDATE RpcId = 5
	// Claim one or more rewards which are partially or full donated by other players.
	RpcId_RPC_ID_ECONOMY_DONATION_CLAIM RpcId = 6
	// Donate some resource (currencies, items, etc.) to a user by donation ID.
	RpcId_RPC_ID_ECONOMY_DONATION_GIVE RpcId = 7
	// Get progress on one or more donations for a set of players by their IDs.
	RpcId_RPC_ID_ECONOMY_DONATION_GET RpcId = 8
	// Request a donation which other players can contribute into.
	RpcId_RPC_ID_ECONOMY_DONATION_REQUEST RpcId = 9
	// Get all store items defined in the Virtual Store.
	RpcId_RPC_ID_ECONOMY_STORE_GET RpcId = 10
	// Grant one or more currencies or reward modifiers to te player.
	RpcId_RPC_ID_ECONOMY_GRANT RpcId = 11
	// Send a marker of intent to purchase by the player.
	RpcId_RPC_ID_ECONOMY_PURCHASE_INTENT RpcId = 12
	// Purchase a store item by the player.
	RpcId_RPC_ID_ECONOMY_PURCHASE_ITEM RpcId = 13
	// Restore a set of purchases.
	RpcId_RPC_ID_ECONOMY_PURCHASE_RESTORE RpcId = 59
	// Get the current status on an Ad placement which may have been rewarded.
	RpcId_RPC_ID_ECONOMY_PLACEMENT_STATUS RpcId = 14
	// Start a new Ad placement by placement ID.
	RpcId_RPC_ID_ECONOMY_PLACEMENT_START RpcId = 15
	// Claim one or more achievements which have completed their progress.
	RpcId_RPC_ID_ACHIEVEMENTS_CLAIM RpcId = 16
	// Get all achievements with progress accumulated by the player.
	RpcId_RPC_ID_ACHIEVEMENTS_GET RpcId = 17
	// Update one or more achievements with the same progress amount.
	RpcId_RPC_ID_ACHIEVEMENTS_UPDATE RpcId = 18
	// Get the energies and their current timers for the player.
	RpcId_RPC_ID_ENERGY_GET RpcId = 19
	// Spend one or more energies for the player.
	RpcId_RPC_ID_ENERGY_SPEND RpcId = 20
	// Grant one or more energies to the player.
	RpcId_RPC_ID_ENERGY_GRANT RpcId = 65
	// Get the tutorials and current progress step for the player.
	RpcId_RPC_ID_TUTORIALS_GET RpcId = 21
	// Accept an offer to step through a tutorial.
	RpcId_RPC_ID_TUTORIALS_ACCEPT RpcId = 22
	// Decline an offer to start a tutorial.
	RpcId_RPC_ID_TUTORIALS_DECLINE RpcId = 23
	// Abandon progress on a tutorial.
	RpcId_RPC_ID_TUTORIALS_ABANDON RpcId = 24
	// Update the current progress step in the tutorial by ID.
	RpcId_RPC_ID_TUTORIALS_UPDATE RpcId = 25
	// Reset the state of all given tutorial IDs.
	RpcId_RPC_ID_TUTORIALS_RESET RpcId = 79
	// Create a team which other players can join.
	RpcId_RPC_ID_TEAMS_CREATE RpcId = 26
	// List one or more teams which the player can join.
	RpcId_RPC_ID_TEAMS_LIST RpcId = 27
	// Search for a team by name or optional short code.
	RpcId_RPC_ID_TEAMS_SEARCH RpcId = 28
	// Write a chat message to the Team's chat channel.
	RpcId_RPC_ID_TEAMS_WRITE_CHAT_MESSAGE RpcId = 29
	// Create a random unlockable to assign to a slot (or overflow) unless there are no slots.
	RpcId_RPC_ID_UNLOCKABLES_CREATE RpcId = 30
	// Get the unlockables which are currently in progress for the player.
	RpcId_RPC_ID_UNLOCKABLES_GET RpcId = 31
	// Start the unlock timer for an unlockable in the specified slot.
	RpcId_RPC_ID_UNLOCKABLES_UNLOCK_START RpcId = 32
	// Purchase an unlockable with soft currency based on the remainder cost calculated by the offset left to wait.
	RpcId_RPC_ID_UNLOCKABLES_PURCHASE_UNLOCK RpcId = 33
	// Purchase a new slot to be used to store unlockables.
	RpcId_RPC_ID_UNLOCKABLES_PURCHASE_SLOT RpcId = 34
	// Claim an unlockable whose start timer has completed or completion was fast tracked with a purchase.
	RpcId_RPC_ID_UNLOCKABLES_CLAIM RpcId = 35
	// Add some set of unlockables to the unlock queue.
	RpcId_RPC_ID_UNLOCKABLES_QUEUE_ADD RpcId = 62
	// Remove some set of unlockables from the unlock queue.
	RpcId_RPC_ID_UNLOCKABLES_QUEUE_REMOVE RpcId = 63
	// Replace the unlock queue with the given set of unlockables.
	RpcId_RPC_ID_UNLOCKABLES_QUEUE_SET RpcId = 64
	// Send feedback to the game's developers over email.
	RpcId_RPC_ID_BASE_RATE_APP RpcId = 36
	// Update or create the mobile push device tokens and preferences for the player.
	RpcId_RPC_ID_BASE_SET_DEVICE_PREFS RpcId = 37
	// Sync offline state.
	RpcId_RPC_ID_BASE_SYNC RpcId = 58
	// Get the leaderboards defined for the game.
	RpcId_RPC_ID_LEADERBOARDS_CONFIG_GET RpcId = 38
	// Get a specified event leaderboard defined for the game.
	RpcId_RPC_ID_EVENT_LEADERBOARD_GET RpcId = 42
	// Update an event leaderboard record for a user.
	RpcId_RPC_ID_EVENT_LEADERBOARD_UPDATE RpcId = 43
	// Claim an event leaderboard reward for a user.
	RpcId_RPC_ID_EVENT_LEADERBOARD_CLAIM RpcId = 44
	// Roll a new cohort for the specified event leaderboard.
	RpcId_RPC_ID_EVENT_LEADERBOARD_ROLL RpcId = 45
	// DEBUG. Fill an event leaderboard with random user IDs.
	RpcId_RPC_ID_EVENT_LEADERBOARD_DEBUG_FILL RpcId = 60
	// DEBUG. Assign random scores within a given range to users within the caller's cohort, except for the caller themselves.
	RpcId_RPC_ID_EVENT_LEADERBOARD_DEBUG_RANDOM_SCORES RpcId = 61
	// Get all stats.
	RpcId_RPC_ID_STATS_GET RpcId = 46
	// Update private stats.
	RpcId_RPC_ID_STATS_UPDATE RpcId = 47
	// Get progressions.
	RpcId_RPC_ID_PROGRESSIONS_GET RpcId = 48
	// Purchase a progression for permanent unlock, if supported.
	RpcId_RPC_ID_PROGRESSIONS_PURCHASE RpcId = 49
	// Update a progression to change its count, if supported.
	RpcId_RPC_ID_PROGRESSIONS_UPDATE RpcId = 50
	// List incentives set up by the user.
	RpcId_RPC_ID_INCENTIVES_SENDER_LIST RpcId = 51
	// Create a new incentive set up by the user.
	RpcId_RPC_ID_INCENTIVES_SENDER_CREATE RpcId = 52
	// Delete an existing incentive set up by the user.
	RpcId_RPC_ID_INCENTIVES_SENDER_DELETE RpcId = 53
	// Claim rewards for an existing incentive after it has been used by some recipient(s).
	RpcId_RPC_ID_INCENTIVES_SENDER_CLAIM RpcId = 54
	// Get information about an existing incentive from a recipient's perspective.
	RpcId_RPC_ID_INCENTIVES_RECIPIENT_GET RpcId = 55
	// Claim an existing incentive and receive associated rewards.
	RpcId_RPC_ID_INCENTIVES_RECIPIENT_CLAIM RpcId = 56
	// Reset progression progress.
	RpcId_RPC_ID_PROGRESSIONS_RESET RpcId = 57
	// Fetch all available auction templates.
	RpcId_RPC_ID_AUCTIONS_GET_TEMPLATES RpcId = 66
	// List available auctions.
	RpcId_RPC_ID_AUCTIONS_LIST RpcId = 67
	// Bid on an active auction.
	RpcId_RPC_ID_AUCTIONS_BID RpcId = 68
	// Claim a completed auction where the user was the winning bidder.
	RpcId_RPC_ID_AUCTIONS_CLAIM_BID RpcId = 69
	// Claim a completed auction where the user was the seller.
	RpcId_RPC_ID_AUCTIONS_CLAIM_CREATED RpcId = 70
	// Cancel an in-progress auction.
	RpcId_RPC_ID_AUCTIONS_CANCEL RpcId = 71
	// Create a new auction.
	RpcId_RPC_ID_AUCTIONS_CREATE RpcId = 72
	// List auctions the user has bid on.
	RpcId_RPC_ID_AUCTIONS_LIST_BIDS RpcId = 73
	// List auctions the user has created.
	RpcId_RPC_ID_AUCTIONS_LIST_CREATED RpcId = 74
	// List all available streaks, including their current state and progress if any.
	RpcId_RPC_ID_STREAKS_LIST RpcId = 75
	// Update one or more streaks with the given progress amounts.
	RpcId_RPC_ID_STREAKS_UPDATE RpcId = 76
	// Claim the rewards from one or more streaks.
	RpcId_RPC_ID_STREAKS_CLAIM RpcId = 77
	// Reset all progress for one or more streaks.
	RpcId_RPC_ID_STREAKS_RESET RpcId = 78
	// Webhook RPC to handle Rewarded Video Ad placement success callbacks.
	RpcId_RPC_ID_ECONOMY_PLACEMENT_SUCCESS RpcId = 1001
	// Webhook RPC to handle Rewarded Video Ad placement failure callbacks.
	RpcId_RPC_ID_ECONOMY_PLACEMENT_FAIL RpcId = 1002
	// RPC to upload Hiro system configurations for the storage personalizer.
	RpcId_RPC_ID_STORAGE_PERSONALIZER_UPLOAD RpcId = 1003
)

// Enum value maps for RpcId.
var (
	RpcId_name = map[int32]string{
		0:    "RPC_ID_UNSPECIFIED",
		1:    "RPC_ID_INVENTORY_LIST",
		2:    "RPC_ID_INVENTORY_LIST_INVENTORY",
		3:    "RPC_ID_INVENTORY_CONSUME",
		4:    "RPC_ID_INVENTORY_GRANT",
		5:    "RPC_ID_INVENTORY_UPDATE",
		6:    "RPC_ID_ECONOMY_DONATION_CLAIM",
		7:    "RPC_ID_ECONOMY_DONATION_GIVE",
		8:    "RPC_ID_ECONOMY_DONATION_GET",
		9:    "RPC_ID_ECONOMY_DONATION_REQUEST",
		10:   "RPC_ID_ECONOMY_STORE_GET",
		11:   "RPC_ID_ECONOMY_GRANT",
		12:   "RPC_ID_ECONOMY_PURCHASE_INTENT",
		13:   "RPC_ID_ECONOMY_PURCHASE_ITEM",
		59:   "RPC_ID_ECONOMY_PURCHASE_RESTORE",
		14:   "RPC_ID_ECONOMY_PLACEMENT_STATUS",
		15:   "RPC_ID_ECONOMY_PLACEMENT_START",
		16:   "RPC_ID_ACHIEVEMENTS_CLAIM",
		17:   "RPC_ID_ACHIEVEMENTS_GET",
		18:   "RPC_ID_ACHIEVEMENTS_UPDATE",
		19:   "RPC_ID_ENERGY_GET",
		20:   "RPC_ID_ENERGY_SPEND",
		65:   "RPC_ID_ENERGY_GRANT",
		21:   "RPC_ID_TUTORIALS_GET",
		22:   "RPC_ID_TUTORIALS_ACCEPT",
		23:   "RPC_ID_TUTORIALS_DECLINE",
		24:   "RPC_ID_TUTORIALS_ABANDON",
		25:   "RPC_ID_TUTORIALS_UPDATE",
		79:   "RPC_ID_TUTORIALS_RESET",
		26:   "RPC_ID_TEAMS_CREATE",
		27:   "RPC_ID_TEAMS_LIST",
		28:   "RPC_ID_TEAMS_SEARCH",
		29:   "RPC_ID_TEAMS_WRITE_CHAT_MESSAGE",
		30:   "RPC_ID_UNLOCKABLES_CREATE",
		31:   "RPC_ID_UNLOCKABLES_GET",
		32:   "RPC_ID_UNLOCKABLES_UNLOCK_START",
		33:   "RPC_ID_UNLOCKABLES_PURCHASE_UNLOCK",
		34:   "RPC_ID_UNLOCKABLES_PURCHASE_SLOT",
		35:   "RPC_ID_UNLOCKABLES_CLAIM",
		62:   "RPC_ID_UNLOCKABLES_QUEUE_ADD",
		63:   "RPC_ID_UNLOCKABLES_QUEUE_REMOVE",
		64:   "RPC_ID_UNLOCKABLES_QUEUE_SET",
		36:   "RPC_ID_BASE_RATE_APP",
		37:   "RPC_ID_BASE_SET_DEVICE_PREFS",
		58:   "RPC_ID_BASE_SYNC",
		38:   "RPC_ID_LEADERBOARDS_CONFIG_GET",
		42:   "RPC_ID_EVENT_LEADERBOARD_GET",
		43:   "RPC_ID_EVENT_LEADERBOARD_UPDATE",
		44:   "RPC_ID_EVENT_LEADERBOARD_CLAIM",
		45:   "RPC_ID_EVENT_LEADERBOARD_ROLL",
		60:   "RPC_ID_EVENT_LEADERBOARD_DEBUG_FILL",
		61:   "RPC_ID_EVENT_LEADERBOARD_DEBUG_RANDOM_SCORES",
		46:   "RPC_ID_STATS_GET",
		47:   "RPC_ID_STATS_UPDATE",
		48:   "RPC_ID_PROGRESSIONS_GET",
		49:   "RPC_ID_PROGRESSIONS_PURCHASE",
		50:   "RPC_ID_PROGRESSIONS_UPDATE",
		51:   "RPC_ID_INCENTIVES_SENDER_LIST",
		52:   "RPC_ID_INCENTIVES_SENDER_CREATE",
		53:   "RPC_ID_INCENTIVES_SENDER_DELETE",
		54:   "RPC_ID_INCENTIVES_SENDER_CLAIM",
		55:   "RPC_ID_INCENTIVES_RECIPIENT_GET",
		56:   "RPC_ID_INCENTIVES_RECIPIENT_CLAIM",
		57:   "RPC_ID_PROGRESSIONS_RESET",
		66:   "RPC_ID_AUCTIONS_GET_TEMPLATES",
		67:   "RPC_ID_AUCTIONS_LIST",
		68:   "RPC_ID_AUCTIONS_BID",
		69:   "RPC_ID_AUCTIONS_CLAIM_BID",
		70:   "RPC_ID_AUCTIONS_CLAIM_CREATED",
		71:   "RPC_ID_AUCTIONS_CANCEL",
		72:   "RPC_ID_AUCTIONS_CREATE",
		73:   "RPC_ID_AUCTIONS_LIST_BIDS",
		74:   "RPC_ID_AUCTIONS_LIST_CREATED",
		75:   "RPC_ID_STREAKS_LIST",
		76:   "RPC_ID_STREAKS_UPDATE",
		77:   "RPC_ID_STREAKS_CLAIM",
		78:   "RPC_ID_STREAKS_RESET",
		1001: "RPC_ID_ECONOMY_PLACEMENT_SUCCESS",
		1002: "RPC_ID_ECONOMY_PLACEMENT_FAIL",
		1003: "RPC_ID_STORAGE_PERSONALIZER_UPLOAD",
	}
	RpcId_value = map[string]int32{
		"RPC_ID_UNSPECIFIED":                           0,
		"RPC_ID_INVENTORY_LIST":                        1,
		"RPC_ID_INVENTORY_LIST_INVENTORY":              2,
		"RPC_ID_INVENTORY_CONSUME":                     3,
		"RPC_ID_INVENTORY_GRANT":                       4,
		"RPC_ID_INVENTORY_UPDATE":                      5,
		"RPC_ID_ECONOMY_DONATION_CLAIM":                6,
		"RPC_ID_ECONOMY_DONATION_GIVE":                 7,
		"RPC_ID_ECONOMY_DONATION_GET":                  8,
		"RPC_ID_ECONOMY_DONATION_REQUEST":              9,
		"RPC_ID_ECONOMY_STORE_GET":                     10,
		"RPC_ID_ECONOMY_GRANT":                         11,
		"RPC_ID_ECONOMY_PURCHASE_INTENT":               12,
		"RPC_ID_ECONOMY_PURCHASE_ITEM":                 13,
		"RPC_ID_ECONOMY_PURCHASE_RESTORE":              59,
		"RPC_ID_ECONOMY_PLACEMENT_STATUS":              14,
		"RPC_ID_ECONOMY_PLACEMENT_START":               15,
		"RPC_ID_ACHIEVEMENTS_CLAIM":                    16,
		"RPC_ID_ACHIEVEMENTS_GET":                      17,
		"RPC_ID_ACHIEVEMENTS_UPDATE":                   18,
		"RPC_ID_ENERGY_GET":                            19,
		"RPC_ID_ENERGY_SPEND":                          20,
		"RPC_ID_ENERGY_GRANT":                          65,
		"RPC_ID_TUTORIALS_GET":                         21,
		"RPC_ID_TUTORIALS_ACCEPT":                      22,
		"RPC_ID_TUTORIALS_DECLINE":                     23,
		"RPC_ID_TUTORIALS_ABANDON":                     24,
		"RPC_ID_TUTORIALS_UPDATE":                      25,
		"RPC_ID_TUTORIALS_RESET":                       79,
		"RPC_ID_TEAMS_CREATE":                          26,
		"RPC_ID_TEAMS_LIST":                            27,
		"RPC_ID_TEAMS_SEARCH":                          28,
		"RPC_ID_TEAMS_WRITE_CHAT_MESSAGE":              29,
		"RPC_ID_UNLOCKABLES_CREATE":                    30,
		"RPC_ID_UNLOCKABLES_GET":                       31,
		"RPC_ID_UNLOCKABLES_UNLOCK_START":              32,
		"RPC_ID_UNLOCKABLES_PURCHASE_UNLOCK":           33,
		"RPC_ID_UNLOCKABLES_PURCHASE_SLOT":             34,
		"RPC_ID_UNLOCKABLES_CLAIM":                     35,
		"RPC_ID_UNLOCKABLES_QUEUE_ADD":                 62,
		"RPC_ID_UNLOCKABLES_QUEUE_REMOVE":              63,
		"RPC_ID_UNLOCKABLES_QUEUE_SET":                 64,
		"RPC_ID_BASE_RATE_APP":                         36,
		"RPC_ID_BASE_SET_DEVICE_PREFS":                 37,
		"RPC_ID_BASE_SYNC":                             58,
		"RPC_ID_LEADERBOARDS_CONFIG_GET":               38,
		"RPC_ID_EVENT_LEADERBOARD_GET":                 42,
		"RPC_ID_EVENT_LEADERBOARD_UPDATE":              43,
		"RPC_ID_EVENT_LEADERBOARD_CLAIM":               44,
		"RPC_ID_EVENT_LEADERBOARD_ROLL":                45,
		"RPC_ID_EVENT_LEADERBOARD_DEBUG_FILL":          60,
		"RPC_ID_EVENT_LEADERBOARD_DEBUG_RANDOM_SCORES": 61,
		"RPC_ID_STATS_GET":                             46,
		"RPC_ID_STATS_UPDATE":                          47,
		"RPC_ID_PROGRESSIONS_GET":                      48,
		"RPC_ID_PROGRESSIONS_PURCHASE":                 49,
		"RPC_ID_PROGRESSIONS_UPDATE":                   50,
		"RPC_ID_INCENTIVES_SENDER_LIST":                51,
		"RPC_ID_INCENTIVES_SENDER_CREATE":              52,
		"RPC_ID_INCENTIVES_SENDER_DELETE":              53,
		"RPC_ID_INCENTIVES_SENDER_CLAIM":               54,
		"RPC_ID_INCENTIVES_RECIPIENT_GET":              55,
		"RPC_ID_INCENTIVES_RECIPIENT_CLAIM":            56,
		"RPC_ID_PROGRESSIONS_RESET":                    57,
		"RPC_ID_AUCTIONS_GET_TEMPLATES":                66,
		"RPC_ID_AUCTIONS_LIST":                         67,
		"RPC_ID_AUCTIONS_BID":                          68,
		"RPC_ID_AUCTIONS_CLAIM_BID":                    69,
		"RPC_ID_AUCTIONS_CLAIM_CREATED":                70,
		"RPC_ID_AUCTIONS_CANCEL":                       71,
		"RPC_ID_AUCTIONS_CREATE":                       72,
		"RPC_ID_AUCTIONS_LIST_BIDS":                    73,
		"RPC_ID_AUCTIONS_LIST_CREATED":                 74,
		"RPC_ID_STREAKS_LIST":                          75,
		"RPC_ID_STREAKS_UPDATE":                        76,
		"RPC_ID_STREAKS_CLAIM":                         77,
		"RPC_ID_STREAKS_RESET":                         78,
		"RPC_ID_ECONOMY_PLACEMENT_SUCCESS":             1001,
		"RPC_ID_ECONOMY_PLACEMENT_FAIL":                1002,
		"RPC_ID_STORAGE_PERSONALIZER_UPLOAD":           1003,
	}
)

func (x RpcId) Enum() *RpcId {
	p := new(RpcId)
	*p = x
	return p
}

func (x RpcId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcId) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[0].Descriptor()
}

func (RpcId) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[0]
}

func (x RpcId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcId.Descriptor instead.
func (RpcId) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{0}
}

type RpcSocketId int32

const (
	RpcSocketId_RPC_SOCKET_ID_UNSPECIFIED RpcSocketId = 0
	// Follow auctions a user has an interest in, bid or own. Must be called via a connected socket.
	RpcSocketId_RPC_SOCKET_ID_AUCTIONS_FOLLOW RpcSocketId = 1
	// Bid on an auction and follow it for further updates.
	RpcSocketId_RPC_SOCKET_ID_AUCTIONS_BID RpcSocketId = 2
)

// Enum value maps for RpcSocketId.
var (
	RpcSocketId_name = map[int32]string{
		0: "RPC_SOCKET_ID_UNSPECIFIED",
		1: "RPC_SOCKET_ID_AUCTIONS_FOLLOW",
		2: "RPC_SOCKET_ID_AUCTIONS_BID",
	}
	RpcSocketId_value = map[string]int32{
		"RPC_SOCKET_ID_UNSPECIFIED":     0,
		"RPC_SOCKET_ID_AUCTIONS_FOLLOW": 1,
		"RPC_SOCKET_ID_AUCTIONS_BID":    2,
	}
)

func (x RpcSocketId) Enum() *RpcSocketId {
	p := new(RpcSocketId)
	*p = x
	return p
}

func (x RpcSocketId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcSocketId) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[1].Descriptor()
}

func (RpcSocketId) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[1]
}

func (x RpcSocketId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcSocketId.Descriptor instead.
func (RpcSocketId) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{1}
}

type ProgressionPreconditionsOperator int32

const (
	// Unspecified. Defaults to AND.
	ProgressionPreconditionsOperator_PROGRESSION_PRECONDITIONS_OPERATOR_UNSPECIFIED ProgressionPreconditionsOperator = 0
	// Both the direct preconditions and the nested block must be true.
	ProgressionPreconditionsOperator_PROGRESSION_PRECONDITIONS_OPERATOR_AND ProgressionPreconditionsOperator = 1
	// Either the direct preconditions or the nested block must be true.
	ProgressionPreconditionsOperator_PROGRESSION_PRECONDITIONS_OPERATOR_OR ProgressionPreconditionsOperator = 2
	// Either the direct preconditions or the nested block must be true, but not both.
	ProgressionPreconditionsOperator_PROGRESSION_PRECONDITIONS_OPERATOR_XOR ProgressionPreconditionsOperator = 3
	// The direct preconditions must be true, but the nested block must not be.
	ProgressionPreconditionsOperator_PROGRESSION_PRECONDITIONS_OPERATOR_NOT ProgressionPreconditionsOperator = 4
)

// Enum value maps for ProgressionPreconditionsOperator.
var (
	ProgressionPreconditionsOperator_name = map[int32]string{
		0: "PROGRESSION_PRECONDITIONS_OPERATOR_UNSPECIFIED",
		1: "PROGRESSION_PRECONDITIONS_OPERATOR_AND",
		2: "PROGRESSION_PRECONDITIONS_OPERATOR_OR",
		3: "PROGRESSION_PRECONDITIONS_OPERATOR_XOR",
		4: "PROGRESSION_PRECONDITIONS_OPERATOR_NOT",
	}
	ProgressionPreconditionsOperator_value = map[string]int32{
		"PROGRESSION_PRECONDITIONS_OPERATOR_UNSPECIFIED": 0,
		"PROGRESSION_PRECONDITIONS_OPERATOR_AND":         1,
		"PROGRESSION_PRECONDITIONS_OPERATOR_OR":          2,
		"PROGRESSION_PRECONDITIONS_OPERATOR_XOR":         3,
		"PROGRESSION_PRECONDITIONS_OPERATOR_NOT":         4,
	}
)

func (x ProgressionPreconditionsOperator) Enum() *ProgressionPreconditionsOperator {
	p := new(ProgressionPreconditionsOperator)
	*p = x
	return p
}

func (x ProgressionPreconditionsOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProgressionPreconditionsOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[2].Descriptor()
}

func (ProgressionPreconditionsOperator) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[2]
}

func (x ProgressionPreconditionsOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProgressionPreconditionsOperator.Descriptor instead.
func (ProgressionPreconditionsOperator) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{2}
}

type ProgressionDeltaState int32

const (
	// Unspecified. Defaults to UNCHANGED.
	ProgressionDeltaState_PROGRESSION_DELTA_STATE_UNSPECIFIED ProgressionDeltaState = 0
	// Progression unlock state has not changed.
	ProgressionDeltaState_PROGRESSION_DELTA_STATE_UNCHANGED ProgressionDeltaState = 1
	// Progression was locked, it is now unlocked.
	ProgressionDeltaState_PROGRESSION_DELTA_STATE_UNLOCKED ProgressionDeltaState = 2
	// Progression was unlocked, it is now locked.
	ProgressionDeltaState_PROGRESSION_DELTA_STATE_LOCKED ProgressionDeltaState = 3
)

// Enum value maps for ProgressionDeltaState.
var (
	ProgressionDeltaState_name = map[int32]string{
		0: "PROGRESSION_DELTA_STATE_UNSPECIFIED",
		1: "PROGRESSION_DELTA_STATE_UNCHANGED",
		2: "PROGRESSION_DELTA_STATE_UNLOCKED",
		3: "PROGRESSION_DELTA_STATE_LOCKED",
	}
	ProgressionDeltaState_value = map[string]int32{
		"PROGRESSION_DELTA_STATE_UNSPECIFIED": 0,
		"PROGRESSION_DELTA_STATE_UNCHANGED":   1,
		"PROGRESSION_DELTA_STATE_UNLOCKED":    2,
		"PROGRESSION_DELTA_STATE_LOCKED":      3,
	}
)

func (x ProgressionDeltaState) Enum() *ProgressionDeltaState {
	p := new(ProgressionDeltaState)
	*p = x
	return p
}

func (x ProgressionDeltaState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProgressionDeltaState) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[3].Descriptor()
}

func (ProgressionDeltaState) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[3]
}

func (x ProgressionDeltaState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProgressionDeltaState.Descriptor instead.
func (ProgressionDeltaState) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{3}
}

// Indicate how a stats update should be handled.
type StatUpdateOperator int32

const (
	// Unspecified. Defaults to Set.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_UNSPECIFIED StatUpdateOperator = 0
	// Set the given value, overwriting any previous one.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_SET StatUpdateOperator = 1
	// Increment or decrement the existing value by the given amount. Equivalent to Set if no previous value existed.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_DELTA StatUpdateOperator = 2
	// Use the new value if it's lower than the existing one. Equivalent to Set if no previous value existed.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_MIN StatUpdateOperator = 3
	// Use the new value if it's higher than the existing one. Equivalent to Set if no previous value existed.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_MAX StatUpdateOperator = 4
)

// Enum value maps for StatUpdateOperator.
var (
	StatUpdateOperator_name = map[int32]string{
		0: "STAT_UPDATE_OPERATOR_UNSPECIFIED",
		1: "STAT_UPDATE_OPERATOR_SET",
		2: "STAT_UPDATE_OPERATOR_DELTA",
		3: "STAT_UPDATE_OPERATOR_MIN",
		4: "STAT_UPDATE_OPERATOR_MAX",
	}
	StatUpdateOperator_value = map[string]int32{
		"STAT_UPDATE_OPERATOR_UNSPECIFIED": 0,
		"STAT_UPDATE_OPERATOR_SET":         1,
		"STAT_UPDATE_OPERATOR_DELTA":       2,
		"STAT_UPDATE_OPERATOR_MIN":         3,
		"STAT_UPDATE_OPERATOR_MAX":         4,
	}
)

func (x StatUpdateOperator) Enum() *StatUpdateOperator {
	p := new(StatUpdateOperator)
	*p = x
	return p
}

func (x StatUpdateOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatUpdateOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[4].Descriptor()
}

func (StatUpdateOperator) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[4]
}

func (x StatUpdateOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatUpdateOperator.Descriptor instead.
func (StatUpdateOperator) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{4}
}

// The store types supported by the Economy system.
type EconomyStoreType int32

const (
	// Unspecified. Defaults to Apple.
	EconomyStoreType_ECONOMY_STORE_TYPE_UNSPECIFIED EconomyStoreType = 0
	// Apple App Store.
	EconomyStoreType_ECONOMY_STORE_TYPE_APPLE_APPSTORE EconomyStoreType = 1
	// Google Play.
	EconomyStoreType_ECONOMY_STORE_TYPE_GOOGLE_PLAY EconomyStoreType = 2
	// Facebook Instant games.
	EconomyStoreType_ECONOMY_STORE_TYPE_FBINSTANT EconomyStoreType = 3
	// Discord Store.
	EconomyStoreType_ECONOMY_STORE_TYPE_DISCORD EconomyStoreType = 4
)

// Enum value maps for EconomyStoreType.
var (
	EconomyStoreType_name = map[int32]string{
		0: "ECONOMY_STORE_TYPE_UNSPECIFIED",
		1: "ECONOMY_STORE_TYPE_APPLE_APPSTORE",
		2: "ECONOMY_STORE_TYPE_GOOGLE_PLAY",
		3: "ECONOMY_STORE_TYPE_FBINSTANT",
		4: "ECONOMY_STORE_TYPE_DISCORD",
	}
	EconomyStoreType_value = map[string]int32{
		"ECONOMY_STORE_TYPE_UNSPECIFIED":    0,
		"ECONOMY_STORE_TYPE_APPLE_APPSTORE": 1,
		"ECONOMY_STORE_TYPE_GOOGLE_PLAY":    2,
		"ECONOMY_STORE_TYPE_FBINSTANT":      3,
		"ECONOMY_STORE_TYPE_DISCORD":        4,
	}
)

func (x EconomyStoreType) Enum() *EconomyStoreType {
	p := new(EconomyStoreType)
	*p = x
	return p
}

func (x EconomyStoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EconomyStoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[5].Descriptor()
}

func (EconomyStoreType) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[5]
}

func (x EconomyStoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EconomyStoreType.Descriptor instead.
func (EconomyStoreType) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{5}
}

// Types of incentives.
type IncentiveType int32

const (
	// Unspecified. Defaults to INVITE.
	IncentiveType_INCENTIVE_TYPE_UNSPECIFIED IncentiveType = 0
	// An invite with an associated incentive reward.
	IncentiveType_INCENTIVE_TYPE_INVITE IncentiveType = 1
)

// Enum value maps for IncentiveType.
var (
	IncentiveType_name = map[int32]string{
		0: "INCENTIVE_TYPE_UNSPECIFIED",
		1: "INCENTIVE_TYPE_INVITE",
	}
	IncentiveType_value = map[string]int32{
		"INCENTIVE_TYPE_UNSPECIFIED": 0,
		"INCENTIVE_TYPE_INVITE":      1,
	}
)

func (x IncentiveType) Enum() *IncentiveType {
	p := new(IncentiveType)
	*p = x
	return p
}

func (x IncentiveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncentiveType) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[6].Descriptor()
}

func (IncentiveType) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[6]
}

func (x IncentiveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncentiveType.Descriptor instead.
func (IncentiveType) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{6}
}

// The states of a Tutorial.
type TutorialState int32

const (
	// The Tutorial has not been accepted/declined by the user yet.
	TutorialState_TUTORIAL_STATE_NONE TutorialState = 0
	// The Tutorial was accepted.
	TutorialState_TUTORIAL_STATE_ACCEPTED TutorialState = 1
	// The Tutorial was declined.
	TutorialState_TUTORIAL_STATE_DECLINED TutorialState = 2
	// The Tutorial is in progress.
	TutorialState_TUTORIAL_STATE_IN_PROGRESS TutorialState = 3
	// The Tutorial has been completed.
	TutorialState_TUTORIAL_STATE_COMPLETED TutorialState = 4
	// The Tutorial has been abandoned.
	TutorialState_TUTORIAL_STATE_ABANDONED TutorialState = 5
)

// Enum value maps for TutorialState.
var (
	TutorialState_name = map[int32]string{
		0: "TUTORIAL_STATE_NONE",
		1: "TUTORIAL_STATE_ACCEPTED",
		2: "TUTORIAL_STATE_DECLINED",
		3: "TUTORIAL_STATE_IN_PROGRESS",
		4: "TUTORIAL_STATE_COMPLETED",
		5: "TUTORIAL_STATE_ABANDONED",
	}
	TutorialState_value = map[string]int32{
		"TUTORIAL_STATE_NONE":        0,
		"TUTORIAL_STATE_ACCEPTED":    1,
		"TUTORIAL_STATE_DECLINED":    2,
		"TUTORIAL_STATE_IN_PROGRESS": 3,
		"TUTORIAL_STATE_COMPLETED":   4,
		"TUTORIAL_STATE_ABANDONED":   5,
	}
)

func (x TutorialState) Enum() *TutorialState {
	p := new(TutorialState)
	*p = x
	return p
}

func (x TutorialState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TutorialState) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[7].Descriptor()
}

func (TutorialState) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[7]
}

func (x TutorialState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TutorialState.Descriptor instead.
func (TutorialState) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{7}
}

// The cost(s) associated with permanently unlocking a progression.
type ProgressionCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items which will be deducted.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The currencies which will be deducted.
	Currencies map[string]int64 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ProgressionCost) Reset() {
	*x = ProgressionCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressionCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionCost) ProtoMessage() {}

func (x *ProgressionCost) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionCost.ProtoReflect.Descriptor instead.
func (*ProgressionCost) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{0}
}

func (x *ProgressionCost) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ProgressionCost) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

// Preconditions associated with a progression.
type ProgressionPreconditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counts required.
	Counts map[string]int64 `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Purchase cost paid.
	Cost *ProgressionCost `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// Other progressions.
	Progressions []string `protobuf:"bytes,3,rep,name=progressions,proto3" json:"progressions,omitempty"`
	// Achievements.
	Achievements []string `protobuf:"bytes,4,rep,name=achievements,proto3" json:"achievements,omitempty"`
	// Items with associated minimum counts.
	ItemsMin map[string]int64 `protobuf:"bytes,5,rep,name=items_min,json=itemsMin,proto3" json:"items_min,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Items with associated maximum counts.
	ItemsMax map[string]int64 `protobuf:"bytes,6,rep,name=items_max,json=itemsMax,proto3" json:"items_max,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Stats with associated minimum values.
	StatsMin map[string]int64 `protobuf:"bytes,7,rep,name=stats_min,json=statsMin,proto3" json:"stats_min,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Stats with associated maximum values.
	StatsMax map[string]int64 `protobuf:"bytes,8,rep,name=stats_max,json=statsMax,proto3" json:"stats_max,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Energies with associated minimum counts.
	EnergyMin map[string]int64 `protobuf:"bytes,9,rep,name=energy_min,json=energyMin,proto3" json:"energy_min,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Energies with associated maximum counts.
	EnergyMax map[string]int64 `protobuf:"bytes,10,rep,name=energy_max,json=energyMax,proto3" json:"energy_max,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Currencies with associated minimum counts.
	CurrencyMin map[string]int64 `protobuf:"bytes,11,rep,name=currency_min,json=currencyMin,proto3" json:"currency_min,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Currencies with associated maximum counts.
	CurrencyMax map[string]int64 `protobuf:"bytes,12,rep,name=currency_max,json=currencyMax,proto3" json:"currency_max,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ProgressionPreconditions) Reset() {
	*x = ProgressionPreconditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressionPreconditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionPreconditions) ProtoMessage() {}

func (x *ProgressionPreconditions) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionPreconditions.ProtoReflect.Descriptor instead.
func (*ProgressionPreconditions) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{1}
}

func (x *ProgressionPreconditions) GetCounts() map[string]int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *ProgressionPreconditions) GetCost() *ProgressionCost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *ProgressionPreconditions) GetProgressions() []string {
	if x != nil {
		return x.Progressions
	}
	return nil
}

func (x *ProgressionPreconditions) GetAchievements() []string {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *ProgressionPreconditions) GetItemsMin() map[string]int64 {
	if x != nil {
		return x.ItemsMin
	}
	return nil
}

func (x *ProgressionPreconditions) GetItemsMax() map[string]int64 {
	if x != nil {
		return x.ItemsMax
	}
	return nil
}

func (x *ProgressionPreconditions) GetStatsMin() map[string]int64 {
	if x != nil {
		return x.StatsMin
	}
	return nil
}

func (x *ProgressionPreconditions) GetStatsMax() map[string]int64 {
	if x != nil {
		return x.StatsMax
	}
	return nil
}

func (x *ProgressionPreconditions) GetEnergyMin() map[string]int64 {
	if x != nil {
		return x.EnergyMin
	}
	return nil
}

func (x *ProgressionPreconditions) GetEnergyMax() map[string]int64 {
	if x != nil {
		return x.EnergyMax
	}
	return nil
}

func (x *ProgressionPreconditions) GetCurrencyMin() map[string]int64 {
	if x != nil {
		return x.CurrencyMin
	}
	return nil
}

func (x *ProgressionPreconditions) GetCurrencyMax() map[string]int64 {
	if x != nil {
		return x.CurrencyMax
	}
	return nil
}

// A complex set of progression preconditions.
type ProgressionPreconditionsBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Direct preconditions.
	Direct *ProgressionPreconditions `protobuf:"bytes,1,opt,name=direct,proto3" json:"direct,omitempty"`
	// Operator for any nested block.
	Operator ProgressionPreconditionsOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=hiro.ProgressionPreconditionsOperator" json:"operator,omitempty"`
	// Nested block of preconditions, if any.
	Nested *ProgressionPreconditionsBlock `protobuf:"bytes,3,opt,name=nested,proto3" json:"nested,omitempty"`
}

func (x *ProgressionPreconditionsBlock) Reset() {
	*x = ProgressionPreconditionsBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressionPreconditionsBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionPreconditionsBlock) ProtoMessage() {}

func (x *ProgressionPreconditionsBlock) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionPreconditionsBlock.ProtoReflect.Descriptor instead.
func (*ProgressionPreconditionsBlock) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{2}
}

func (x *ProgressionPreconditionsBlock) GetDirect() *ProgressionPreconditions {
	if x != nil {
		return x.Direct
	}
	return nil
}

func (x *ProgressionPreconditionsBlock) GetOperator() ProgressionPreconditionsOperator {
	if x != nil {
		return x.Operator
	}
	return ProgressionPreconditionsOperator_PROGRESSION_PRECONDITIONS_OPERATOR_UNSPECIFIED
}

func (x *ProgressionPreconditionsBlock) GetNested() *ProgressionPreconditionsBlock {
	if x != nil {
		return x.Nested
	}
	return nil
}

// A progression element which can be unlocked to access further progressions.
type Progression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the progression.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the progression. May be an i18n code.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the progression. May be an i18n code.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The category to group the progression together with others.
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Current count, if any.
	Counts map[string]int64 `protobuf:"bytes,5,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,6,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Flag indicating unlock status.
	Unlocked bool `protobuf:"varint,7,opt,name=unlocked,proto3" json:"unlocked,omitempty"`
	// All preconditions.
	Preconditions *ProgressionPreconditionsBlock `protobuf:"bytes,8,opt,name=preconditions,proto3" json:"preconditions,omitempty"`
	// Unmet preconditions.
	UnmetPreconditions *ProgressionPreconditionsBlock `protobuf:"bytes,9,opt,name=unmet_preconditions,json=unmetPreconditions,proto3" json:"unmet_preconditions,omitempty"`
}

func (x *Progression) Reset() {
	*x = Progression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Progression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Progression) ProtoMessage() {}

func (x *Progression) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Progression.ProtoReflect.Descriptor instead.
func (*Progression) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{3}
}

func (x *Progression) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Progression) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Progression) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Progression) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Progression) GetCounts() map[string]int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *Progression) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Progression) GetUnlocked() bool {
	if x != nil {
		return x.Unlocked
	}
	return false
}

func (x *Progression) GetPreconditions() *ProgressionPreconditionsBlock {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

func (x *Progression) GetUnmetPreconditions() *ProgressionPreconditionsBlock {
	if x != nil {
		return x.UnmetPreconditions
	}
	return nil
}

// A change in a given progression, compared to a previously known state.
type ProgressionDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the progression.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Potential state change.
	State ProgressionDeltaState `protobuf:"varint,2,opt,name=state,proto3,enum=hiro.ProgressionDeltaState" json:"state,omitempty"`
	// Changes to counts, if any.
	Counts map[string]int64 `protobuf:"bytes,3,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Changes to preconditions, if any.
	Preconditions *ProgressionPreconditionsBlock `protobuf:"bytes,4,opt,name=preconditions,proto3" json:"preconditions,omitempty"`
}

func (x *ProgressionDelta) Reset() {
	*x = ProgressionDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressionDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionDelta) ProtoMessage() {}

func (x *ProgressionDelta) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionDelta.ProtoReflect.Descriptor instead.
func (*ProgressionDelta) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{4}
}

func (x *ProgressionDelta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProgressionDelta) GetState() ProgressionDeltaState {
	if x != nil {
		return x.State
	}
	return ProgressionDeltaState_PROGRESSION_DELTA_STATE_UNSPECIFIED
}

func (x *ProgressionDelta) GetCounts() map[string]int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *ProgressionDelta) GetPreconditions() *ProgressionPreconditionsBlock {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

// All or a filtered list of progressions for a user.
type ProgressionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Progressions keyed by progression ID.
	Progressions map[string]*Progression `protobuf:"bytes,1,rep,name=progressions,proto3" json:"progressions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Progression deltas keyed by progression ID.
	Deltas map[string]*ProgressionDelta `protobuf:"bytes,2,rep,name=deltas,proto3" json:"deltas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProgressionList) Reset() {
	*x = ProgressionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionList) ProtoMessage() {}

func (x *ProgressionList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionList.ProtoReflect.Descriptor instead.
func (*ProgressionList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{5}
}

func (x *ProgressionList) GetProgressions() map[string]*Progression {
	if x != nil {
		return x.Progressions
	}
	return nil
}

func (x *ProgressionList) GetDeltas() map[string]*ProgressionDelta {
	if x != nil {
		return x.Deltas
	}
	return nil
}

// Request progressions for a user, optionally including previously seen state for delta calculations.
type ProgressionGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional last known progressions state, keyed by progression ID.
	Progressions map[string]*Progression `protobuf:"bytes,1,rep,name=progressions,proto3" json:"progressions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProgressionGetRequest) Reset() {
	*x = ProgressionGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressionGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionGetRequest) ProtoMessage() {}

func (x *ProgressionGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionGetRequest.ProtoReflect.Descriptor instead.
func (*ProgressionGetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{6}
}

func (x *ProgressionGetRequest) GetProgressions() map[string]*Progression {
	if x != nil {
		return x.Progressions
	}
	return nil
}

// Request to permanently unlock a progression, if supported by that specific progression.
type ProgressionPurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the progression to permanently unlock.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ProgressionPurchaseRequest) Reset() {
	*x = ProgressionPurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressionPurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionPurchaseRequest) ProtoMessage() {}

func (x *ProgressionPurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionPurchaseRequest.ProtoReflect.Descriptor instead.
func (*ProgressionPurchaseRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{7}
}

func (x *ProgressionPurchaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request to update a progression, if supported by that specific progression.
type ProgressionUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the progression to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// One or more counts to add to the progression.
	Counts map[string]int64 `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ProgressionUpdateRequest) Reset() {
	*x = ProgressionUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressionUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionUpdateRequest) ProtoMessage() {}

func (x *ProgressionUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionUpdateRequest.ProtoReflect.Descriptor instead.
func (*ProgressionUpdateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{8}
}

func (x *ProgressionUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProgressionUpdateRequest) GetCounts() map[string]int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

// Request to reset progression progress.
type ProgressionResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The progression IDs to reset.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ProgressionResetRequest) Reset() {
	*x = ProgressionResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressionResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionResetRequest) ProtoMessage() {}

func (x *ProgressionResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionResetRequest.ProtoReflect.Descriptor instead.
func (*ProgressionResetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{9}
}

func (x *ProgressionResetRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Describes a single stat update.
type StatUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// Operator.
	Operator StatUpdateOperator `protobuf:"varint,3,opt,name=operator,proto3,enum=hiro.StatUpdateOperator" json:"operator,omitempty"`
}

func (x *StatUpdate) Reset() {
	*x = StatUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatUpdate) ProtoMessage() {}

func (x *StatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatUpdate.ProtoReflect.Descriptor instead.
func (*StatUpdate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{10}
}

func (x *StatUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatUpdate) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StatUpdate) GetOperator() StatUpdateOperator {
	if x != nil {
		return x.Operator
	}
	return StatUpdateOperator_STAT_UPDATE_OPERATOR_UNSPECIFIED
}

// Request an optionally batched stats update.
type StatUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public stat updates.
	Public []*StatUpdate `protobuf:"bytes,1,rep,name=public,proto3" json:"public,omitempty"`
	// Private stat updates.
	Private []*StatUpdate `protobuf:"bytes,2,rep,name=private,proto3" json:"private,omitempty"`
}

func (x *StatUpdateRequest) Reset() {
	*x = StatUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatUpdateRequest) ProtoMessage() {}

func (x *StatUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatUpdateRequest.ProtoReflect.Descriptor instead.
func (*StatUpdateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{11}
}

func (x *StatUpdateRequest) GetPublic() []*StatUpdate {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *StatUpdateRequest) GetPrivate() []*StatUpdate {
	if x != nil {
		return x.Private
	}
	return nil
}

// A single stat with associated information.
type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicator if this belongs to public or private stats.
	Public bool `protobuf:"varint,2,opt,name=public,proto3" json:"public,omitempty"`
	// Update time in UTC seconds.
	UpdateTimeSec int64 `protobuf:"varint,3,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// Current value.
	Value int64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// Number of values submitted.
	Count int64 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	// Total of all submitted values.
	Total int64 `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	// Smallest value submitted.
	Min int64 `protobuf:"varint,7,opt,name=min,proto3" json:"min,omitempty"`
	// Largest value submitted.
	Max int64 `protobuf:"varint,8,opt,name=max,proto3" json:"max,omitempty"`
	// First value submitted.
	First int64 `protobuf:"varint,9,opt,name=first,proto3" json:"first,omitempty"`
	// Latest value submitted.
	Last int64 `protobuf:"varint,10,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{12}
}

func (x *Stat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stat) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *Stat) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *Stat) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Stat) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Stat) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Stat) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Stat) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Stat) GetFirst() int64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *Stat) GetLast() int64 {
	if x != nil {
		return x.Last
	}
	return 0
}

// A list of stats all belonging to one user.
type StatList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public stat names and their associated data.
	Public map[string]*Stat `protobuf:"bytes,1,rep,name=public,proto3" json:"public,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Private stat names and their associated data.
	Private map[string]*Stat `protobuf:"bytes,2,rep,name=private,proto3" json:"private,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatList) Reset() {
	*x = StatList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatList) ProtoMessage() {}

func (x *StatList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatList.ProtoReflect.Descriptor instead.
func (*StatList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{13}
}

func (x *StatList) GetPublic() map[string]*Stat {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *StatList) GetPrivate() map[string]*Stat {
	if x != nil {
		return x.Private
	}
	return nil
}

// A receipt reply from a channel message send operation.
type ChannelMessageAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel the message was sent to.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The unique ID assigned to the message.
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The code representing a message type or category.
	Code int32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	// Username of the message sender.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was created.
	CreateTime int64 `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was last updated.
	UpdateTime int64 `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// True if the message was persisted to the channel's history, false otherwise.
	Persistent bool `protobuf:"varint,7,opt,name=persistent,proto3" json:"persistent,omitempty"`
	// The name of the chat room, or an empty string if this message was not sent through a chat room.
	RoomName string `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	// The ID of the group, or an empty string if this message was not sent through a group channel.
	GroupId string `protobuf:"bytes,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
	UserIdOne string `protobuf:"bytes,10,opt,name=user_id_one,json=userIdOne,proto3" json:"user_id_one,omitempty"`
	// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
	UserIdTwo string `protobuf:"bytes,11,opt,name=user_id_two,json=userIdTwo,proto3" json:"user_id_two,omitempty"`
}

func (x *ChannelMessageAck) Reset() {
	*x = ChannelMessageAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageAck) ProtoMessage() {}

func (x *ChannelMessageAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageAck.ProtoReflect.Descriptor instead.
func (*ChannelMessageAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{14}
}

func (x *ChannelMessageAck) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelMessageAck) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChannelMessageAck) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ChannelMessageAck) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChannelMessageAck) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ChannelMessageAck) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ChannelMessageAck) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

func (x *ChannelMessageAck) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *ChannelMessageAck) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ChannelMessageAck) GetUserIdOne() string {
	if x != nil {
		return x.UserIdOne
	}
	return ""
}

func (x *ChannelMessageAck) GetUserIdTwo() string {
	if x != nil {
		return x.UserIdTwo
	}
	return ""
}

// Update or create the mobile push device tokens and preferences.
type DevicePrefsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device ID to set.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The push token from the Android device. This or 'push_token_ios' must be set.
	PushTokenAndroid string `protobuf:"bytes,2,opt,name=push_token_android,json=pushTokenAndroid,proto3" json:"push_token_android,omitempty"`
	// The push token from the iOS device. This or 'push_token_android' must be set.
	PushTokenIos string `protobuf:"bytes,3,opt,name=push_token_ios,json=pushTokenIos,proto3" json:"push_token_ios,omitempty"`
	// Additional device preferences for push events. Must be owned by the user.
	Preferences map[string]bool `protobuf:"bytes,4,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DevicePrefsRequest) Reset() {
	*x = DevicePrefsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePrefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePrefsRequest) ProtoMessage() {}

func (x *DevicePrefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePrefsRequest.ProtoReflect.Descriptor instead.
func (*DevicePrefsRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{15}
}

func (x *DevicePrefsRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DevicePrefsRequest) GetPushTokenAndroid() string {
	if x != nil {
		return x.PushTokenAndroid
	}
	return ""
}

func (x *DevicePrefsRequest) GetPushTokenIos() string {
	if x != nil {
		return x.PushTokenIos
	}
	return ""
}

func (x *DevicePrefsRequest) GetPreferences() map[string]bool {
	if x != nil {
		return x.Preferences
	}
	return nil
}

// Inventory item granted.
type RewardInventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the item.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The count granted of the item.
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The properties with string values.
	StringProperties map[string]string `protobuf:"bytes,3,rep,name=string_properties,json=stringProperties,proto3" json:"string_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The properties with numeric values.
	NumericProperties map[string]float64 `protobuf:"bytes,4,rep,name=numeric_properties,json=numericProperties,proto3" json:"numeric_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// The instance ID of the item.
	InstanceId string `protobuf:"bytes,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *RewardInventoryItem) Reset() {
	*x = RewardInventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInventoryItem) ProtoMessage() {}

func (x *RewardInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInventoryItem.ProtoReflect.Descriptor instead.
func (*RewardInventoryItem) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{16}
}

func (x *RewardInventoryItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RewardInventoryItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RewardInventoryItem) GetStringProperties() map[string]string {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

func (x *RewardInventoryItem) GetNumericProperties() map[string]float64 {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

func (x *RewardInventoryItem) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Energy modifier granted.
type RewardEnergyModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of they modifier granted.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The energy modifier operator.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// The value to apply. Its behavior depends on the operator.
	Value int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// The duration of the energy modifier in seconds.
	DurationSec uint64 `protobuf:"varint,4,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
	// The weight of the energy modifier, if weighted. Otherwise, -1.
	Weight int64 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *RewardEnergyModifier) Reset() {
	*x = RewardEnergyModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardEnergyModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardEnergyModifier) ProtoMessage() {}

func (x *RewardEnergyModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardEnergyModifier.ProtoReflect.Descriptor instead.
func (*RewardEnergyModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{17}
}

func (x *RewardEnergyModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RewardEnergyModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *RewardEnergyModifier) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RewardEnergyModifier) GetDurationSec() uint64 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

func (x *RewardEnergyModifier) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// A reward modifier temporally adjusts the way all rewards are handled in the economy.
type RewardModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the reward content to modify.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of reward content to modify.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The operator to apply.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	// The value to apply. Its behavior depends on the operator.
	Value int64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// The duration of the item modifier in seconds.
	DurationSec uint64 `protobuf:"varint,5,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
}

func (x *RewardModifier) Reset() {
	*x = RewardModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardModifier) ProtoMessage() {}

func (x *RewardModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardModifier.ProtoReflect.Descriptor instead.
func (*RewardModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{18}
}

func (x *RewardModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RewardModifier) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RewardModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *RewardModifier) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RewardModifier) GetDurationSec() uint64 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

// A reward modifier that is currently active.
type ActiveRewardModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the reward content to modify.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of reward content to modify.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The operator to apply.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	// The value to apply. Its behavior depends on the operator.
	Value int64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// The start time when this reward modifier was activated.
	StartTimeSec int64 `protobuf:"varint,5,opt,name=start_time_sec,json=startTimeSec,proto3" json:"start_time_sec,omitempty"`
	// The time when this reward modifier will expire.
	EndTimeSec int64 `protobuf:"varint,6,opt,name=end_time_sec,json=endTimeSec,proto3" json:"end_time_sec,omitempty"`
}

func (x *ActiveRewardModifier) Reset() {
	*x = ActiveRewardModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveRewardModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveRewardModifier) ProtoMessage() {}

func (x *ActiveRewardModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveRewardModifier.ProtoReflect.Descriptor instead.
func (*ActiveRewardModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{19}
}

func (x *ActiveRewardModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActiveRewardModifier) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActiveRewardModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *ActiveRewardModifier) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ActiveRewardModifier) GetStartTimeSec() int64 {
	if x != nil {
		return x.StartTimeSec
	}
	return 0
}

func (x *ActiveRewardModifier) GetEndTimeSec() int64 {
	if x != nil {
		return x.EndTimeSec
	}
	return 0
}

// Rewards granted to the player.
type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items granted. Indexed by item ID.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The currencies granted.
	Currencies map[string]int64 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The energy granted.
	Energies map[string]int32 `protobuf:"bytes,3,rep,name=energies,proto3" json:"energies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The energy modifier granted.
	EnergyModifiers []*RewardEnergyModifier `protobuf:"bytes,4,rep,name=energy_modifiers,json=energyModifiers,proto3" json:"energy_modifiers,omitempty"`
	// The reward modifiers granted.
	RewardModifiers []*RewardModifier `protobuf:"bytes,5,rep,name=reward_modifiers,json=rewardModifiers,proto3" json:"reward_modifiers,omitempty"`
	// When the reward was granted, in UNIX time.
	GrantTimeSec int64 `protobuf:"varint,6,opt,name=grant_time_sec,json=grantTimeSec,proto3" json:"grant_time_sec,omitempty"`
	// The item instances granted. Indexed by item instance ID.
	ItemInstances map[string]*RewardInventoryItem `protobuf:"bytes,7,rep,name=item_instances,json=itemInstances,proto3" json:"item_instances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{20}
}

func (x *Reward) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Reward) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *Reward) GetEnergies() map[string]int32 {
	if x != nil {
		return x.Energies
	}
	return nil
}

func (x *Reward) GetEnergyModifiers() []*RewardEnergyModifier {
	if x != nil {
		return x.EnergyModifiers
	}
	return nil
}

func (x *Reward) GetRewardModifiers() []*RewardModifier {
	if x != nil {
		return x.RewardModifiers
	}
	return nil
}

func (x *Reward) GetGrantTimeSec() int64 {
	if x != nil {
		return x.GrantTimeSec
	}
	return 0
}

func (x *Reward) GetItemInstances() map[string]*RewardInventoryItem {
	if x != nil {
		return x.ItemInstances
	}
	return nil
}

// A list of rewards granted to the player.
type RewardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rewards granted.
	Rewards []*Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *RewardList) Reset() {
	*x = RewardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardList) ProtoMessage() {}

func (x *RewardList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardList.ProtoReflect.Descriptor instead.
func (*RewardList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{21}
}

func (x *RewardList) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

// A range of possible values.
type RewardRangeInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum bound of the range.
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum bound of the range.
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// A number that the result must be a multiple of.
	Multiple int32 `protobuf:"varint,3,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (x *RewardRangeInt32) Reset() {
	*x = RewardRangeInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardRangeInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRangeInt32) ProtoMessage() {}

func (x *RewardRangeInt32) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardRangeInt32.ProtoReflect.Descriptor instead.
func (*RewardRangeInt32) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{22}
}

func (x *RewardRangeInt32) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RewardRangeInt32) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *RewardRangeInt32) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

// A range of possible values.
type RewardRangeInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum bound of the range.
	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum bound of the range.
	Max int64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// A number that the result must be a multiple of.
	Multiple int64 `protobuf:"varint,3,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (x *RewardRangeInt64) Reset() {
	*x = RewardRangeInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardRangeInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRangeInt64) ProtoMessage() {}

func (x *RewardRangeInt64) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardRangeInt64.ProtoReflect.Descriptor instead.
func (*RewardRangeInt64) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{23}
}

func (x *RewardRangeInt64) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RewardRangeInt64) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *RewardRangeInt64) GetMultiple() int64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

// A range of possible values.
type RewardRangeUInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum bound of the range.
	Min uint64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum bound of the range.
	Max uint64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// A number that the result must be a multiple of.
	Multiple uint64 `protobuf:"varint,3,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (x *RewardRangeUInt64) Reset() {
	*x = RewardRangeUInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardRangeUInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRangeUInt64) ProtoMessage() {}

func (x *RewardRangeUInt64) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardRangeUInt64.ProtoReflect.Descriptor instead.
func (*RewardRangeUInt64) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{24}
}

func (x *RewardRangeUInt64) GetMin() uint64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RewardRangeUInt64) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *RewardRangeUInt64) GetMultiple() uint64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

// A range of possible values.
type RewardRangeDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum bound of the range.
	Min float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum bound of the range.
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
	// A number that the result must be a multiple of.
	Multiple float64 `protobuf:"fixed64,3,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (x *RewardRangeDouble) Reset() {
	*x = RewardRangeDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardRangeDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRangeDouble) ProtoMessage() {}

func (x *RewardRangeDouble) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardRangeDouble.ProtoReflect.Descriptor instead.
func (*RewardRangeDouble) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{25}
}

func (x *RewardRangeDouble) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RewardRangeDouble) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *RewardRangeDouble) GetMultiple() float64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

// A possible string property option.
type AvailableRewardsStringPropertyOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The option weight.
	Weight int64 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *AvailableRewardsStringPropertyOption) Reset() {
	*x = AvailableRewardsStringPropertyOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsStringPropertyOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsStringPropertyOption) ProtoMessage() {}

func (x *AvailableRewardsStringPropertyOption) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsStringPropertyOption.ProtoReflect.Descriptor instead.
func (*AvailableRewardsStringPropertyOption) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{26}
}

func (x *AvailableRewardsStringPropertyOption) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// A possible string property.
type AvailableRewardsStringProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The available string property options.
	Options map[string]*AvailableRewardsStringPropertyOption `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The total weight from which the options are selected.
	TotalWeight int64 `protobuf:"varint,2,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
}

func (x *AvailableRewardsStringProperty) Reset() {
	*x = AvailableRewardsStringProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsStringProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsStringProperty) ProtoMessage() {}

func (x *AvailableRewardsStringProperty) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsStringProperty.ProtoReflect.Descriptor instead.
func (*AvailableRewardsStringProperty) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{27}
}

func (x *AvailableRewardsStringProperty) GetOptions() map[string]*AvailableRewardsStringPropertyOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AvailableRewardsStringProperty) GetTotalWeight() int64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

// A possible item reward.
type AvailableRewardsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The possible count of the reward.
	Count *RewardRangeInt64 `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// The possible numeric properties of the reward.
	NumericProperties map[string]*RewardRangeDouble `protobuf:"bytes,2,rep,name=numeric_properties,json=numericProperties,proto3" json:"numeric_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The possible string properties of the reward.
	StringProperties map[string]*AvailableRewardsStringProperty `protobuf:"bytes,3,rep,name=string_properties,json=stringProperties,proto3" json:"string_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AvailableRewardsItem) Reset() {
	*x = AvailableRewardsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsItem) ProtoMessage() {}

func (x *AvailableRewardsItem) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsItem.ProtoReflect.Descriptor instead.
func (*AvailableRewardsItem) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{28}
}

func (x *AvailableRewardsItem) GetCount() *RewardRangeInt64 {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *AvailableRewardsItem) GetNumericProperties() map[string]*RewardRangeDouble {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

func (x *AvailableRewardsItem) GetStringProperties() map[string]*AvailableRewardsStringProperty {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

// A possible item reward.
type AvailableRewardsItemSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of items to draw from the set.
	Count *RewardRangeInt64 `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// The number of repeat items that may be drawn from the set. Also includes the user's inventory.
	MaxRepeats int64 `protobuf:"varint,2,opt,name=max_repeats,json=maxRepeats,proto3" json:"max_repeats,omitempty"`
	// Drawn items must exist in the intersection of these sets.
	Set []string `protobuf:"bytes,3,rep,name=set,proto3" json:"set,omitempty"`
}

func (x *AvailableRewardsItemSet) Reset() {
	*x = AvailableRewardsItemSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsItemSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsItemSet) ProtoMessage() {}

func (x *AvailableRewardsItemSet) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsItemSet.ProtoReflect.Descriptor instead.
func (*AvailableRewardsItemSet) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{29}
}

func (x *AvailableRewardsItemSet) GetCount() *RewardRangeInt64 {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *AvailableRewardsItemSet) GetMaxRepeats() int64 {
	if x != nil {
		return x.MaxRepeats
	}
	return 0
}

func (x *AvailableRewardsItemSet) GetSet() []string {
	if x != nil {
		return x.Set
	}
	return nil
}

// A possible currency reward.
type AvailableRewardsCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The possible count of the currency.
	Count *RewardRangeInt64 `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AvailableRewardsCurrency) Reset() {
	*x = AvailableRewardsCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsCurrency) ProtoMessage() {}

func (x *AvailableRewardsCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsCurrency.ProtoReflect.Descriptor instead.
func (*AvailableRewardsCurrency) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{30}
}

func (x *AvailableRewardsCurrency) GetCount() *RewardRangeInt64 {
	if x != nil {
		return x.Count
	}
	return nil
}

// A possible energy reward.
type AvailableRewardsEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The possible count of the energy.
	Count *RewardRangeInt32 `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AvailableRewardsEnergy) Reset() {
	*x = AvailableRewardsEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsEnergy) ProtoMessage() {}

func (x *AvailableRewardsEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsEnergy.ProtoReflect.Descriptor instead.
func (*AvailableRewardsEnergy) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{31}
}

func (x *AvailableRewardsEnergy) GetCount() *RewardRangeInt32 {
	if x != nil {
		return x.Count
	}
	return nil
}

// A possible energy reward.
type AvailableRewardsEnergyModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the energy to modify.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The operator of the energy modifier.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// The value of the energy modifier.
	Value *RewardRangeInt64 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The possible duration of the modifier.
	DurationSec *RewardRangeUInt64 `protobuf:"bytes,4,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
}

func (x *AvailableRewardsEnergyModifier) Reset() {
	*x = AvailableRewardsEnergyModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsEnergyModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsEnergyModifier) ProtoMessage() {}

func (x *AvailableRewardsEnergyModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsEnergyModifier.ProtoReflect.Descriptor instead.
func (*AvailableRewardsEnergyModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{32}
}

func (x *AvailableRewardsEnergyModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AvailableRewardsEnergyModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AvailableRewardsEnergyModifier) GetValue() *RewardRangeInt64 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AvailableRewardsEnergyModifier) GetDurationSec() *RewardRangeUInt64 {
	if x != nil {
		return x.DurationSec
	}
	return nil
}

// A possible modifier reward.
type AvailableRewardsRewardModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the reward item, currency, energy, or energy modifier to modify.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of reward content to modify.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The operator of the modifier.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	// The value of the modifier.
	Value *RewardRangeInt64 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// The possible duration of the modifier.
	DurationSec *RewardRangeUInt64 `protobuf:"bytes,5,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
}

func (x *AvailableRewardsRewardModifier) Reset() {
	*x = AvailableRewardsRewardModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsRewardModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsRewardModifier) ProtoMessage() {}

func (x *AvailableRewardsRewardModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsRewardModifier.ProtoReflect.Descriptor instead.
func (*AvailableRewardsRewardModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{33}
}

func (x *AvailableRewardsRewardModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AvailableRewardsRewardModifier) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AvailableRewardsRewardModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AvailableRewardsRewardModifier) GetValue() *RewardRangeInt64 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AvailableRewardsRewardModifier) GetDurationSec() *RewardRangeUInt64 {
	if x != nil {
		return x.DurationSec
	}
	return nil
}

// The reward contents for available rewards.
type AvailableRewardsContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All possible items from this particular reward.
	Items map[string]*AvailableRewardsItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All possible item sets from this particular reward.
	ItemSets []*AvailableRewardsItemSet `protobuf:"bytes,2,rep,name=item_sets,json=itemSets,proto3" json:"item_sets,omitempty"`
	// All possible currencies from this particular reward.
	Currencies map[string]*AvailableRewardsCurrency `protobuf:"bytes,3,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All possible energies from this particular reward.
	Energies map[string]*AvailableRewardsEnergy `protobuf:"bytes,4,rep,name=energies,proto3" json:"energies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All possible energy reward modifiers from this particular reward.
	EnergyModifiers []*AvailableRewardsEnergyModifier `protobuf:"bytes,5,rep,name=energy_modifiers,json=energyModifiers,proto3" json:"energy_modifiers,omitempty"`
	// All reward modifiers from this particular reward.
	RewardModifiers []*AvailableRewardsRewardModifier `protobuf:"bytes,6,rep,name=reward_modifiers,json=rewardModifiers,proto3" json:"reward_modifiers,omitempty"`
	// The weight of the reward contents.
	Weight int64 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *AvailableRewardsContents) Reset() {
	*x = AvailableRewardsContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsContents) ProtoMessage() {}

func (x *AvailableRewardsContents) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsContents.ProtoReflect.Descriptor instead.
func (*AvailableRewardsContents) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{34}
}

func (x *AvailableRewardsContents) GetItems() map[string]*AvailableRewardsItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AvailableRewardsContents) GetItemSets() []*AvailableRewardsItemSet {
	if x != nil {
		return x.ItemSets
	}
	return nil
}

func (x *AvailableRewardsContents) GetCurrencies() map[string]*AvailableRewardsCurrency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *AvailableRewardsContents) GetEnergies() map[string]*AvailableRewardsEnergy {
	if x != nil {
		return x.Energies
	}
	return nil
}

func (x *AvailableRewardsContents) GetEnergyModifiers() []*AvailableRewardsEnergyModifier {
	if x != nil {
		return x.EnergyModifiers
	}
	return nil
}

func (x *AvailableRewardsContents) GetRewardModifiers() []*AvailableRewardsRewardModifier {
	if x != nil {
		return x.RewardModifiers
	}
	return nil
}

func (x *AvailableRewardsContents) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// The available rewards and their probabilistic weights.
type AvailableRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The guaranteed contents to grant.
	Guaranteed *AvailableRewardsContents `protobuf:"bytes,1,opt,name=guaranteed,proto3" json:"guaranteed,omitempty"`
	// The weighted contents to grant.
	Weighted []*AvailableRewardsContents `protobuf:"bytes,2,rep,name=weighted,proto3" json:"weighted,omitempty"`
	// The number of weighted reward contents to select from among the possibilities.
	MaxRolls int64 `protobuf:"varint,3,opt,name=max_rolls,json=maxRolls,proto3" json:"max_rolls,omitempty"`
	// The total weight that all weighted reward contents are calculated against. Auto calculated if set to 0 but can be
	// set to a higher value to introduce a chance of a "none" reward.
	TotalWeight int64 `protobuf:"varint,4,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	// The maximum number of repeats of any given weighted reward.
	MaxRepeatRolls int64 `protobuf:"varint,5,opt,name=max_repeat_rolls,json=maxRepeatRolls,proto3" json:"max_repeat_rolls,omitempty"`
}

func (x *AvailableRewards) Reset() {
	*x = AvailableRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewards) ProtoMessage() {}

func (x *AvailableRewards) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewards.ProtoReflect.Descriptor instead.
func (*AvailableRewards) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{35}
}

func (x *AvailableRewards) GetGuaranteed() *AvailableRewardsContents {
	if x != nil {
		return x.Guaranteed
	}
	return nil
}

func (x *AvailableRewards) GetWeighted() []*AvailableRewardsContents {
	if x != nil {
		return x.Weighted
	}
	return nil
}

func (x *AvailableRewards) GetMaxRolls() int64 {
	if x != nil {
		return x.MaxRolls
	}
	return 0
}

func (x *AvailableRewards) GetTotalWeight() int64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *AvailableRewards) GetMaxRepeatRolls() int64 {
	if x != nil {
		return x.MaxRepeatRolls
	}
	return 0
}

// The result of claiming an incentive.
type IncentiveClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reward granted.
	Reward *Reward `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
	// Claim time in UTC seconds.
	ClaimTimeSec int64 `protobuf:"varint,2,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
}

func (x *IncentiveClaim) Reset() {
	*x = IncentiveClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncentiveClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncentiveClaim) ProtoMessage() {}

func (x *IncentiveClaim) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncentiveClaim.ProtoReflect.Descriptor instead.
func (*IncentiveClaim) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{36}
}

func (x *IncentiveClaim) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *IncentiveClaim) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

// An incentive set up by a user.
type Incentive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the incentive.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Shareable incentive code.
	Code string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// The type of the incentive.
	Type IncentiveType `protobuf:"varint,5,opt,name=type,proto3,enum=hiro.IncentiveType" json:"type,omitempty"`
	// Create time in UTC seconds.
	CreateTimeSec int64 `protobuf:"varint,6,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// Update time in UTC seconds.
	UpdateTimeSec int64 `protobuf:"varint,7,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// Expiry time in UTC seconds.
	ExpiryTimeSec int64 `protobuf:"varint,8,opt,name=expiry_time_sec,json=expiryTimeSec,proto3" json:"expiry_time_sec,omitempty"`
	// Available reward.
	RecipientRewards *AvailableRewards `protobuf:"bytes,9,opt,name=recipient_rewards,json=recipientRewards,proto3" json:"recipient_rewards,omitempty"`
	// Sender reward.
	SenderRewards *AvailableRewards `protobuf:"bytes,10,opt,name=sender_rewards,json=senderRewards,proto3" json:"sender_rewards,omitempty"`
	// Recipient user IDs for which the owner of the incentive has not yet claimed their sender reward.
	UnclaimedRecipients []string `protobuf:"bytes,11,rep,name=unclaimed_recipients,json=unclaimedRecipients,proto3" json:"unclaimed_recipients,omitempty"`
	// Sender rewards so far collected for this incentive.
	Rewards []*Reward `protobuf:"bytes,12,rep,name=rewards,proto3" json:"rewards,omitempty"`
	// Max claims.
	MaxClaims int64 `protobuf:"varint,13,opt,name=max_claims,json=maxClaims,proto3" json:"max_claims,omitempty"`
	// Current user IDs that have claimed, and their outcomes.
	Claims map[string]*IncentiveClaim `protobuf:"bytes,14,rep,name=claims,proto3" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Incentive) Reset() {
	*x = Incentive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Incentive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Incentive) ProtoMessage() {}

func (x *Incentive) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Incentive.ProtoReflect.Descriptor instead.
func (*Incentive) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{37}
}

func (x *Incentive) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Incentive) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Incentive) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Incentive) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Incentive) GetType() IncentiveType {
	if x != nil {
		return x.Type
	}
	return IncentiveType_INCENTIVE_TYPE_UNSPECIFIED
}

func (x *Incentive) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *Incentive) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *Incentive) GetExpiryTimeSec() int64 {
	if x != nil {
		return x.ExpiryTimeSec
	}
	return 0
}

func (x *Incentive) GetRecipientRewards() *AvailableRewards {
	if x != nil {
		return x.RecipientRewards
	}
	return nil
}

func (x *Incentive) GetSenderRewards() *AvailableRewards {
	if x != nil {
		return x.SenderRewards
	}
	return nil
}

func (x *Incentive) GetUnclaimedRecipients() []string {
	if x != nil {
		return x.UnclaimedRecipients
	}
	return nil
}

func (x *Incentive) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *Incentive) GetMaxClaims() int64 {
	if x != nil {
		return x.MaxClaims
	}
	return 0
}

func (x *Incentive) GetClaims() map[string]*IncentiveClaim {
	if x != nil {
		return x.Claims
	}
	return nil
}

// A list of incentives set up by a user.
type IncentiveList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Incentives set up by a single user.
	Incentives []*Incentive `protobuf:"bytes,1,rep,name=incentives,proto3" json:"incentives,omitempty"`
}

func (x *IncentiveList) Reset() {
	*x = IncentiveList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncentiveList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncentiveList) ProtoMessage() {}

func (x *IncentiveList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncentiveList.ProtoReflect.Descriptor instead.
func (*IncentiveList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{38}
}

func (x *IncentiveList) GetIncentives() []*Incentive {
	if x != nil {
		return x.Incentives
	}
	return nil
}

// An incentive claimant's view of a single incentive.
type IncentiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the incentive.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Unique shareable incentive code.
	Code string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// The type of the incentive.
	Type IncentiveType `protobuf:"varint,5,opt,name=type,proto3,enum=hiro.IncentiveType" json:"type,omitempty"`
	// Incentive sender user ID.
	Sender string `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
	// Available rewards that the caller can claim.
	AvailableRewards *AvailableRewards `protobuf:"bytes,7,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Indicator if the caller can claim rewards.
	CanClaim bool `protobuf:"varint,8,opt,name=can_claim,json=canClaim,proto3" json:"can_claim,omitempty"`
	// Reward that was granted.
	Reward *Reward `protobuf:"bytes,9,opt,name=reward,proto3" json:"reward,omitempty"`
	// Create time in UTC seconds.
	CreateTimeSec int64 `protobuf:"varint,10,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// Update time in UTC seconds.
	UpdateTimeSec int64 `protobuf:"varint,11,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// Expiry time in UTC seconds.
	ExpiryTimeSec int64 `protobuf:"varint,12,opt,name=expiry_time_sec,json=expiryTimeSec,proto3" json:"expiry_time_sec,omitempty"`
	// Claim time in UTC seconds.
	ClaimTimeSec int64 `protobuf:"varint,13,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
}

func (x *IncentiveInfo) Reset() {
	*x = IncentiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncentiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncentiveInfo) ProtoMessage() {}

func (x *IncentiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncentiveInfo.ProtoReflect.Descriptor instead.
func (*IncentiveInfo) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{39}
}

func (x *IncentiveInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IncentiveInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IncentiveInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IncentiveInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *IncentiveInfo) GetType() IncentiveType {
	if x != nil {
		return x.Type
	}
	return IncentiveType_INCENTIVE_TYPE_UNSPECIFIED
}

func (x *IncentiveInfo) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *IncentiveInfo) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *IncentiveInfo) GetCanClaim() bool {
	if x != nil {
		return x.CanClaim
	}
	return false
}

func (x *IncentiveInfo) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *IncentiveInfo) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *IncentiveInfo) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *IncentiveInfo) GetExpiryTimeSec() int64 {
	if x != nil {
		return x.ExpiryTimeSec
	}
	return 0
}

func (x *IncentiveInfo) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

// Request by a user to set up a new incentive.
type IncentiveSenderCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The incentive configuration ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IncentiveSenderCreateRequest) Reset() {
	*x = IncentiveSenderCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncentiveSenderCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncentiveSenderCreateRequest) ProtoMessage() {}

func (x *IncentiveSenderCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncentiveSenderCreateRequest.ProtoReflect.Descriptor instead.
func (*IncentiveSenderCreateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{40}
}

func (x *IncentiveSenderCreateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request by a user to delete an incentive they had set up.
type IncentiveSenderDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique incentive code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *IncentiveSenderDeleteRequest) Reset() {
	*x = IncentiveSenderDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncentiveSenderDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncentiveSenderDeleteRequest) ProtoMessage() {}

func (x *IncentiveSenderDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncentiveSenderDeleteRequest.ProtoReflect.Descriptor instead.
func (*IncentiveSenderDeleteRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{41}
}

func (x *IncentiveSenderDeleteRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Request by a user to claim rewards from an incentive they had set up.
type IncentiveSenderClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique incentive code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// The recipient ID(s) to claim for, or empty for all.
	RecipientIds []string `protobuf:"bytes,2,rep,name=recipient_ids,json=recipientIds,proto3" json:"recipient_ids,omitempty"`
}

func (x *IncentiveSenderClaimRequest) Reset() {
	*x = IncentiveSenderClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncentiveSenderClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncentiveSenderClaimRequest) ProtoMessage() {}

func (x *IncentiveSenderClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncentiveSenderClaimRequest.ProtoReflect.Descriptor instead.
func (*IncentiveSenderClaimRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{42}
}

func (x *IncentiveSenderClaimRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *IncentiveSenderClaimRequest) GetRecipientIds() []string {
	if x != nil {
		return x.RecipientIds
	}
	return nil
}

// Request by a potential incentive claimant to view incentive information.
type IncentiveRecipientGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique incentive code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *IncentiveRecipientGetRequest) Reset() {
	*x = IncentiveRecipientGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncentiveRecipientGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncentiveRecipientGetRequest) ProtoMessage() {}

func (x *IncentiveRecipientGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncentiveRecipientGetRequest.ProtoReflect.Descriptor instead.
func (*IncentiveRecipientGetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{43}
}

func (x *IncentiveRecipientGetRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Request by a potential incentive claimant to claim an incentive.
type IncentiveRecipientClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique incentive code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *IncentiveRecipientClaimRequest) Reset() {
	*x = IncentiveRecipientClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncentiveRecipientClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncentiveRecipientClaimRequest) ProtoMessage() {}

func (x *IncentiveRecipientClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncentiveRecipientClaimRequest.ProtoReflect.Descriptor instead.
func (*IncentiveRecipientClaimRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{44}
}

func (x *IncentiveRecipientClaimRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Find and retrieve an event leaderboard by ID, automatically joining the event if necessary.
type EventLeaderboardGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID to get, and join if necessary/possible.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventLeaderboardGet) Reset() {
	*x = EventLeaderboardGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardGet) ProtoMessage() {}

func (x *EventLeaderboardGet) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardGet.ProtoReflect.Descriptor instead.
func (*EventLeaderboardGet) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{45}
}

func (x *EventLeaderboardGet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Submit a score to an event leaderboard.
type EventLeaderboardUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Score.
	Score int64 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	// Subscore.
	Subscore int64 `protobuf:"varint,3,opt,name=subscore,proto3" json:"subscore,omitempty"`
	// Metadata.
	Metadata string `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EventLeaderboardUpdate) Reset() {
	*x = EventLeaderboardUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardUpdate) ProtoMessage() {}

func (x *EventLeaderboardUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardUpdate.ProtoReflect.Descriptor instead.
func (*EventLeaderboardUpdate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{46}
}

func (x *EventLeaderboardUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventLeaderboardUpdate) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EventLeaderboardUpdate) GetSubscore() int64 {
	if x != nil {
		return x.Subscore
	}
	return 0
}

func (x *EventLeaderboardUpdate) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// Claim the available reward for an event leaderboard by ID.
type EventLeaderboardClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID to claim.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventLeaderboardClaim) Reset() {
	*x = EventLeaderboardClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardClaim) ProtoMessage() {}

func (x *EventLeaderboardClaim) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardClaim.ProtoReflect.Descriptor instead.
func (*EventLeaderboardClaim) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{47}
}

func (x *EventLeaderboardClaim) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Roll a new cohort for the specified event leaderboard.
type EventLeaderboardRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID to roll.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventLeaderboardRoll) Reset() {
	*x = EventLeaderboardRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardRoll) ProtoMessage() {}

func (x *EventLeaderboardRoll) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardRoll.ProtoReflect.Descriptor instead.
func (*EventLeaderboardRoll) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{48}
}

func (x *EventLeaderboardRoll) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A single participant entry to an event leaderboard.
type EventLeaderboardScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Username.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Display name.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Avatar URL.
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// Time when the user joined the event leaderboard.
	CreateTimeSec int64 `protobuf:"varint,5,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// Time when the user last submitted a score.
	UpdateTimeSec int64 `protobuf:"varint,6,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// Rank within the event leaderboard.
	Rank int64 `protobuf:"varint,7,opt,name=rank,proto3" json:"rank,omitempty"`
	// Score.
	Score int64 `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	// Subscore.
	Subscore int64 `protobuf:"varint,9,opt,name=subscore,proto3" json:"subscore,omitempty"`
	// Number of score submissions.
	NumScores int64 `protobuf:"varint,10,opt,name=num_scores,json=numScores,proto3" json:"num_scores,omitempty"`
	// Metadata.
	Metadata string `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EventLeaderboardScore) Reset() {
	*x = EventLeaderboardScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardScore) ProtoMessage() {}

func (x *EventLeaderboardScore) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardScore.ProtoReflect.Descriptor instead.
func (*EventLeaderboardScore) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{49}
}

func (x *EventLeaderboardScore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventLeaderboardScore) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EventLeaderboardScore) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *EventLeaderboardScore) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *EventLeaderboardScore) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *EventLeaderboardScore) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *EventLeaderboardScore) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *EventLeaderboardScore) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EventLeaderboardScore) GetSubscore() int64 {
	if x != nil {
		return x.Subscore
	}
	return 0
}

func (x *EventLeaderboardScore) GetNumScores() int64 {
	if x != nil {
		return x.NumScores
	}
	return 0
}

func (x *EventLeaderboardScore) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// A reward range within a specific tier based on ranks.
type EventLeaderboardRewardTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name for this tier.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The maximum rank (inclusive).
	RankMax int32 `protobuf:"varint,2,opt,name=rank_max,json=rankMax,proto3" json:"rank_max,omitempty"`
	// The minimum rank (inclusive).
	RankMin int32 `protobuf:"varint,3,opt,name=rank_min,json=rankMin,proto3" json:"rank_min,omitempty"`
	// The available rewards for this range.
	AvailableRewards *AvailableRewards `protobuf:"bytes,4,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Change in tier for this rank range.
	TierChange int32 `protobuf:"varint,5,opt,name=tier_change,json=tierChange,proto3" json:"tier_change,omitempty"`
}

func (x *EventLeaderboardRewardTier) Reset() {
	*x = EventLeaderboardRewardTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardRewardTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardRewardTier) ProtoMessage() {}

func (x *EventLeaderboardRewardTier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardRewardTier.ProtoReflect.Descriptor instead.
func (*EventLeaderboardRewardTier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{50}
}

func (x *EventLeaderboardRewardTier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventLeaderboardRewardTier) GetRankMax() int32 {
	if x != nil {
		return x.RankMax
	}
	return 0
}

func (x *EventLeaderboardRewardTier) GetRankMin() int32 {
	if x != nil {
		return x.RankMin
	}
	return 0
}

func (x *EventLeaderboardRewardTier) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *EventLeaderboardRewardTier) GetTierChange() int32 {
	if x != nil {
		return x.TierChange
	}
	return 0
}

// An event leaderboard's tier-specific set of rewards.
type EventLeaderboardRewardTiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Possible reward tiers.
	RewardTiers []*EventLeaderboardRewardTier `protobuf:"bytes,1,rep,name=reward_tiers,json=rewardTiers,proto3" json:"reward_tiers,omitempty"`
}

func (x *EventLeaderboardRewardTiers) Reset() {
	*x = EventLeaderboardRewardTiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardRewardTiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardRewardTiers) ProtoMessage() {}

func (x *EventLeaderboardRewardTiers) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardRewardTiers.ProtoReflect.Descriptor instead.
func (*EventLeaderboardRewardTiers) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{51}
}

func (x *EventLeaderboardRewardTiers) GetRewardTiers() []*EventLeaderboardRewardTier {
	if x != nil {
		return x.RewardTiers
	}
	return nil
}

// An event leaderboard's tier-specific promotion/demotion zones.
type EventLeaderboardChangeZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage of cohort to promote, expressed in the range of 0.0 to 1.0.
	Promotion float64 `protobuf:"fixed64,1,opt,name=promotion,proto3" json:"promotion,omitempty"`
	// Percentage of cohort to demote, expressed in the range of 0.0 to 1.0.
	Demotion float64 `protobuf:"fixed64,2,opt,name=demotion,proto3" json:"demotion,omitempty"`
	// Whether or not to always demote players that failed to submit a score at all.
	DemoteIdle bool `protobuf:"varint,3,opt,name=demote_idle,json=demoteIdle,proto3" json:"demote_idle,omitempty"`
}

func (x *EventLeaderboardChangeZone) Reset() {
	*x = EventLeaderboardChangeZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardChangeZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardChangeZone) ProtoMessage() {}

func (x *EventLeaderboardChangeZone) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardChangeZone.ProtoReflect.Descriptor instead.
func (*EventLeaderboardChangeZone) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{52}
}

func (x *EventLeaderboardChangeZone) GetPromotion() float64 {
	if x != nil {
		return x.Promotion
	}
	return 0
}

func (x *EventLeaderboardChangeZone) GetDemotion() float64 {
	if x != nil {
		return x.Demotion
	}
	return 0
}

func (x *EventLeaderboardChangeZone) GetDemoteIdle() bool {
	if x != nil {
		return x.DemoteIdle
	}
	return false
}

// Details about a specific event leaderboard.
type EventLeaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the event leaderboard. May be an i18n code.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the event leaderboard. May be an i18n code.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The category to group the event leaderboard together with others.
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Score ordering.
	Ascending bool `protobuf:"varint,5,opt,name=ascending,proto3" json:"ascending,omitempty"`
	// Score submission operator.
	Operator string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	// The tier of this instance of the event leaderboard.
	Tier int32 `protobuf:"varint,7,opt,name=tier,proto3" json:"tier,omitempty"`
	// Time when the event starts.
	StartTimeSec int64 `protobuf:"varint,8,opt,name=start_time_sec,json=startTimeSec,proto3" json:"start_time_sec,omitempty"`
	// Time when the event ends.
	EndTimeSec int64 `protobuf:"varint,9,opt,name=end_time_sec,json=endTimeSec,proto3" json:"end_time_sec,omitempty"`
	// Time when the event expires.
	ExpiryTimeSec int64 `protobuf:"varint,10,opt,name=expiry_time_sec,json=expiryTimeSec,proto3" json:"expiry_time_sec,omitempty"`
	// The available reward and its probabilities.
	AvailableRewards *AvailableRewards `protobuf:"bytes,11,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// The possible reward tiers for this instance of the event leaderboard, based on its current tier.
	RewardTiers map[int32]*EventLeaderboardRewardTiers `protobuf:"bytes,12,rep,name=reward_tiers,json=rewardTiers,proto3" json:"reward_tiers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Per-tier promotion/demotion change zones, if configured.
	ChangeZones map[int32]*EventLeaderboardChangeZone `protobuf:"bytes,13,rep,name=change_zones,json=changeZones,proto3" json:"change_zones,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Claim time, if any.
	ClaimTimeSec int64 `protobuf:"varint,14,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
	// The outcome (rolled) reward for the event leaderboard.
	Reward *Reward `protobuf:"bytes,15,opt,name=reward,proto3" json:"reward,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,16,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Current participant count.
	Count int64 `protobuf:"varint,17,opt,name=count,proto3" json:"count,omitempty"`
	// Maximum participant count.
	MaxCount int64 `protobuf:"varint,18,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// Maximum number of score submissions per participant.
	MaxNumScore int64 `protobuf:"varint,19,opt,name=max_num_score,json=maxNumScore,proto3" json:"max_num_score,omitempty"`
	// Participants and their scores.
	Scores []*EventLeaderboardScore `protobuf:"bytes,20,rep,name=scores,proto3" json:"scores,omitempty"`
	// Indicates if the event is still active, and scores can be submitted.
	IsActive bool `protobuf:"varint,21,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Indicates if the event is over and its reward can be claimed.
	CanClaim bool `protobuf:"varint,22,opt,name=can_claim,json=canClaim,proto3" json:"can_claim,omitempty"`
	// Indicates if the event can be rolled to get a new set of opponents.
	CanRoll bool `protobuf:"varint,23,opt,name=can_roll,json=canRoll,proto3" json:"can_roll,omitempty"`
	// Extra matchmaker properties for this cohort.
	MatchmakerProperties *structpb.Struct `protobuf:"bytes,24,opt,name=matchmaker_properties,json=matchmakerProperties,proto3" json:"matchmaker_properties,omitempty"`
	// The UNIX timestamp for the current server time.
	CurrentTimeSec int64 `protobuf:"varint,25,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
	// Cohort ID the user belongs to for this active phase.
	CohortId string `protobuf:"bytes,26,opt,name=cohort_id,json=cohortId,proto3" json:"cohort_id,omitempty"`
}

func (x *EventLeaderboard) Reset() {
	*x = EventLeaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboard) ProtoMessage() {}

func (x *EventLeaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboard.ProtoReflect.Descriptor instead.
func (*EventLeaderboard) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{53}
}

func (x *EventLeaderboard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventLeaderboard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventLeaderboard) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventLeaderboard) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EventLeaderboard) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *EventLeaderboard) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *EventLeaderboard) GetTier() int32 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *EventLeaderboard) GetStartTimeSec() int64 {
	if x != nil {
		return x.StartTimeSec
	}
	return 0
}

func (x *EventLeaderboard) GetEndTimeSec() int64 {
	if x != nil {
		return x.EndTimeSec
	}
	return 0
}

func (x *EventLeaderboard) GetExpiryTimeSec() int64 {
	if x != nil {
		return x.ExpiryTimeSec
	}
	return 0
}

func (x *EventLeaderboard) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *EventLeaderboard) GetRewardTiers() map[int32]*EventLeaderboardRewardTiers {
	if x != nil {
		return x.RewardTiers
	}
	return nil
}

func (x *EventLeaderboard) GetChangeZones() map[int32]*EventLeaderboardChangeZone {
	if x != nil {
		return x.ChangeZones
	}
	return nil
}

func (x *EventLeaderboard) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

func (x *EventLeaderboard) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *EventLeaderboard) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *EventLeaderboard) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventLeaderboard) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *EventLeaderboard) GetMaxNumScore() int64 {
	if x != nil {
		return x.MaxNumScore
	}
	return 0
}

func (x *EventLeaderboard) GetScores() []*EventLeaderboardScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *EventLeaderboard) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *EventLeaderboard) GetCanClaim() bool {
	if x != nil {
		return x.CanClaim
	}
	return false
}

func (x *EventLeaderboard) GetCanRoll() bool {
	if x != nil {
		return x.CanRoll
	}
	return false
}

func (x *EventLeaderboard) GetMatchmakerProperties() *structpb.Struct {
	if x != nil {
		return x.MatchmakerProperties
	}
	return nil
}

func (x *EventLeaderboard) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

func (x *EventLeaderboard) GetCohortId() string {
	if x != nil {
		return x.CohortId
	}
	return ""
}

type EventLeaderboardDebugFillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID to fill.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional target cohort size to fill to, otherwise fill to max cohort size.
	TargetCount int32 `protobuf:"varint,2,opt,name=target_count,json=targetCount,proto3" json:"target_count,omitempty"`
}

func (x *EventLeaderboardDebugFillRequest) Reset() {
	*x = EventLeaderboardDebugFillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardDebugFillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardDebugFillRequest) ProtoMessage() {}

func (x *EventLeaderboardDebugFillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardDebugFillRequest.ProtoReflect.Descriptor instead.
func (*EventLeaderboardDebugFillRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{54}
}

func (x *EventLeaderboardDebugFillRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventLeaderboardDebugFillRequest) GetTargetCount() int32 {
	if x != nil {
		return x.TargetCount
	}
	return 0
}

// DEBUG. Payload describing scores to set for a cohort's participants.
type EventLeaderboardDebugRandomScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Minimum score, inclusive.
	Min int64 `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum score, inclusive.
	Max int64 `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	// Optional operator to use when updating scores.
	Operator *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	// Minimum subscore, inclusive.
	SubscoreMin int64 `protobuf:"varint,5,opt,name=subscore_min,json=subscoreMin,proto3" json:"subscore_min,omitempty"`
	// Maximum subscore, inclusive.
	SubscoreMax int64 `protobuf:"varint,6,opt,name=subscore_max,json=subscoreMax,proto3" json:"subscore_max,omitempty"`
}

func (x *EventLeaderboardDebugRandomScoresRequest) Reset() {
	*x = EventLeaderboardDebugRandomScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardDebugRandomScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardDebugRandomScoresRequest) ProtoMessage() {}

func (x *EventLeaderboardDebugRandomScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardDebugRandomScoresRequest.ProtoReflect.Descriptor instead.
func (*EventLeaderboardDebugRandomScoresRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{55}
}

func (x *EventLeaderboardDebugRandomScoresRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventLeaderboardDebugRandomScoresRequest) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *EventLeaderboardDebugRandomScoresRequest) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *EventLeaderboardDebugRandomScoresRequest) GetOperator() *wrapperspb.Int32Value {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *EventLeaderboardDebugRandomScoresRequest) GetSubscoreMin() int64 {
	if x != nil {
		return x.SubscoreMin
	}
	return 0
}

func (x *EventLeaderboardDebugRandomScoresRequest) GetSubscoreMax() int64 {
	if x != nil {
		return x.SubscoreMax
	}
	return 0
}

// A contributor to this donation.
type EconomyDonationContributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID that contributed.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The amount they've donated.
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EconomyDonationContributor) Reset() {
	*x = EconomyDonationContributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationContributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationContributor) ProtoMessage() {}

func (x *EconomyDonationContributor) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationContributor.ProtoReflect.Descriptor instead.
func (*EconomyDonationContributor) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{56}
}

func (x *EconomyDonationContributor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EconomyDonationContributor) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// A donation for a user.
type EconomyDonation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user that owns this donation.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The count of how much of the donation has already been claimed.
	ClaimCount int64 `protobuf:"varint,2,opt,name=claim_count,json=claimCount,proto3" json:"claim_count,omitempty"`
	// The count of how much has been contributed by users.
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// The UNIX timestamp for the current time.
	CurrentTimeSec int64 `protobuf:"varint,4,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
	// The description for the donation, if any. May be an i18n code.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The UNIX timestamp when the donation expires.
	ExpireTimeSec int64 `protobuf:"varint,6,opt,name=expire_time_sec,json=expireTimeSec,proto3" json:"expire_time_sec,omitempty"`
	// The ID of the donation.
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// The maximum "units" which can be collected.
	MaxCount int64 `protobuf:"varint,8,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// The name for the donation, if any. May be an i18n code.
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// The configuration for rewards granted to the recipient of the donation.
	RecipientAvailableRewards *AvailableRewards `protobuf:"bytes,10,opt,name=recipient_available_rewards,json=recipientAvailableRewards,proto3" json:"recipient_available_rewards,omitempty"`
	// The maximum number of donations per contributor.
	UserContributionMaxCount int64 `protobuf:"varint,11,opt,name=user_contribution_max_count,json=userContributionMaxCount,proto3" json:"user_contribution_max_count,omitempty"`
	// The contributors to this donation, if any.
	Contributors []*EconomyDonationContributor `protobuf:"bytes,12,rep,name=contributors,proto3" json:"contributors,omitempty"`
	// The configuration for rewards granted to the contributor of the donation.
	ContributorAvailableRewards *AvailableRewards `protobuf:"bytes,13,opt,name=contributor_available_rewards,json=contributorAvailableRewards,proto3" json:"contributor_available_rewards,omitempty"`
	// All rewards claimed by the recipient of this donation.
	RecipientRewards []*Reward `protobuf:"bytes,14,rep,name=recipient_rewards,json=recipientRewards,proto3" json:"recipient_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,15,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyDonation) Reset() {
	*x = EconomyDonation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonation) ProtoMessage() {}

func (x *EconomyDonation) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonation.ProtoReflect.Descriptor instead.
func (*EconomyDonation) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{57}
}

func (x *EconomyDonation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EconomyDonation) GetClaimCount() int64 {
	if x != nil {
		return x.ClaimCount
	}
	return 0
}

func (x *EconomyDonation) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EconomyDonation) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

func (x *EconomyDonation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EconomyDonation) GetExpireTimeSec() int64 {
	if x != nil {
		return x.ExpireTimeSec
	}
	return 0
}

func (x *EconomyDonation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EconomyDonation) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *EconomyDonation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EconomyDonation) GetRecipientAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.RecipientAvailableRewards
	}
	return nil
}

func (x *EconomyDonation) GetUserContributionMaxCount() int64 {
	if x != nil {
		return x.UserContributionMaxCount
	}
	return 0
}

func (x *EconomyDonation) GetContributors() []*EconomyDonationContributor {
	if x != nil {
		return x.Contributors
	}
	return nil
}

func (x *EconomyDonation) GetContributorAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.ContributorAvailableRewards
	}
	return nil
}

func (x *EconomyDonation) GetRecipientRewards() []*Reward {
	if x != nil {
		return x.RecipientRewards
	}
	return nil
}

func (x *EconomyDonation) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// An acknowledgement of the idempotent creation of a donation for a user.
type EconomyDonationAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the donation is newly created.
	Created bool `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	// The donation requested which may already be active or newly created.
	Donation *EconomyDonation `protobuf:"bytes,2,opt,name=donation,proto3" json:"donation,omitempty"`
}

func (x *EconomyDonationAck) Reset() {
	*x = EconomyDonationAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationAck) ProtoMessage() {}

func (x *EconomyDonationAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationAck.ProtoReflect.Descriptor instead.
func (*EconomyDonationAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{58}
}

func (x *EconomyDonationAck) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

func (x *EconomyDonationAck) GetDonation() *EconomyDonation {
	if x != nil {
		return x.Donation
	}
	return nil
}

// A list of active donations returned for some set of users.
type EconomyDonationsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The active donations for a set of users.
	Donations []*EconomyDonation `protobuf:"bytes,1,rep,name=donations,proto3" json:"donations,omitempty"`
}

func (x *EconomyDonationsList) Reset() {
	*x = EconomyDonationsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationsList) ProtoMessage() {}

func (x *EconomyDonationsList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationsList.ProtoReflect.Descriptor instead.
func (*EconomyDonationsList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{59}
}

func (x *EconomyDonationsList) GetDonations() []*EconomyDonation {
	if x != nil {
		return x.Donations
	}
	return nil
}

// Request to claim one or more donations.
type EconomyDonationClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The donation IDs to claim.
	DonationIds []string `protobuf:"bytes,1,rep,name=donation_ids,json=donationIds,proto3" json:"donation_ids,omitempty"`
}

func (x *EconomyDonationClaimRequest) Reset() {
	*x = EconomyDonationClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationClaimRequest) ProtoMessage() {}

func (x *EconomyDonationClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationClaimRequest.ProtoReflect.Descriptor instead.
func (*EconomyDonationClaimRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{60}
}

func (x *EconomyDonationClaimRequest) GetDonationIds() []string {
	if x != nil {
		return x.DonationIds
	}
	return nil
}

// Response to claiming one or more donations.
type EconomyDonationClaimRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All active donations for the user.
	Donations *EconomyDonationsList `protobuf:"bytes,1,opt,name=donations,proto3" json:"donations,omitempty"`
	// The rewards from this particular claim.
	ClaimedRewards map[string]*RewardList `protobuf:"bytes,2,rep,name=claimed_rewards,json=claimedRewards,proto3" json:"claimed_rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyDonationClaimRewards) Reset() {
	*x = EconomyDonationClaimRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationClaimRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationClaimRewards) ProtoMessage() {}

func (x *EconomyDonationClaimRewards) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationClaimRewards.ProtoReflect.Descriptor instead.
func (*EconomyDonationClaimRewards) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{61}
}

func (x *EconomyDonationClaimRewards) GetDonations() *EconomyDonationsList {
	if x != nil {
		return x.Donations
	}
	return nil
}

func (x *EconomyDonationClaimRewards) GetClaimedRewards() map[string]*RewardList {
	if x != nil {
		return x.ClaimedRewards
	}
	return nil
}

// Request to give a donation to a user.
type EconomyDonationGiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID who receives the donation.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The donation ID to give into.
	DonationId string `protobuf:"bytes,2,opt,name=donation_id,json=donationId,proto3" json:"donation_id,omitempty"`
}

func (x *EconomyDonationGiveRequest) Reset() {
	*x = EconomyDonationGiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationGiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationGiveRequest) ProtoMessage() {}

func (x *EconomyDonationGiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationGiveRequest.ProtoReflect.Descriptor instead.
func (*EconomyDonationGiveRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{62}
}

func (x *EconomyDonationGiveRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EconomyDonationGiveRequest) GetDonationId() string {
	if x != nil {
		return x.DonationId
	}
	return ""
}

// Request to get donations for one or more users.
type EconomyDonationGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user IDs to get donations for.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *EconomyDonationGetRequest) Reset() {
	*x = EconomyDonationGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationGetRequest) ProtoMessage() {}

func (x *EconomyDonationGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationGetRequest.ProtoReflect.Descriptor instead.
func (*EconomyDonationGetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{63}
}

func (x *EconomyDonationGetRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Request a new donation.
type EconomyDonationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The donation ID to request, defined on the server.
	DonationId string `protobuf:"bytes,1,opt,name=donation_id,json=donationId,proto3" json:"donation_id,omitempty"`
}

func (x *EconomyDonationRequest) Reset() {
	*x = EconomyDonationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationRequest) ProtoMessage() {}

func (x *EconomyDonationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationRequest.ProtoReflect.Descriptor instead.
func (*EconomyDonationRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{64}
}

func (x *EconomyDonationRequest) GetDonationId() string {
	if x != nil {
		return x.DonationId
	}
	return ""
}

// A map of active donations keyed by user ID.
type EconomyDonationsByUserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The active donations grouped by user ID.
	UserDonations map[string]*EconomyDonationsList `protobuf:"bytes,1,rep,name=user_donations,json=userDonations,proto3" json:"user_donations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyDonationsByUserList) Reset() {
	*x = EconomyDonationsByUserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationsByUserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationsByUserList) ProtoMessage() {}

func (x *EconomyDonationsByUserList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationsByUserList.ProtoReflect.Descriptor instead.
func (*EconomyDonationsByUserList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{65}
}

func (x *EconomyDonationsByUserList) GetUserDonations() map[string]*EconomyDonationsList {
	if x != nil {
		return x.UserDonations
	}
	return nil
}

// The cost(s) associated with a store item.
type EconomyListStoreItemCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The virtual currencies, if any.
	Currencies map[string]int64 `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The required purchase SKU, if any.
	Sku string `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku,omitempty"`
}

func (x *EconomyListStoreItemCost) Reset() {
	*x = EconomyListStoreItemCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyListStoreItemCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyListStoreItemCost) ProtoMessage() {}

func (x *EconomyListStoreItemCost) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyListStoreItemCost.ProtoReflect.Descriptor instead.
func (*EconomyListStoreItemCost) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{66}
}

func (x *EconomyListStoreItemCost) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *EconomyListStoreItemCost) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

// Represents an individual available store items.
type EconomyListStoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category to group the item together with others.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// The cost of the item.
	Cost *EconomyListStoreItemCost `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// A description of the item. May be an i18n code.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The ID of the item.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the item. May be an i18n code.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The available rewards in this store item.
	AvailableRewards *AvailableRewards `protobuf:"bytes,6,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,7,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyListStoreItem) Reset() {
	*x = EconomyListStoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyListStoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyListStoreItem) ProtoMessage() {}

func (x *EconomyListStoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyListStoreItem.ProtoReflect.Descriptor instead.
func (*EconomyListStoreItem) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{67}
}

func (x *EconomyListStoreItem) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EconomyListStoreItem) GetCost() *EconomyListStoreItemCost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *EconomyListStoreItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EconomyListStoreItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EconomyListStoreItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EconomyListStoreItem) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *EconomyListStoreItem) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// Represents an available ad placement.
type EconomyListPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the placement.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The reward obtained from this placement.
	Reward *Reward `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available rewards obtained from this placement.
	AvailableRewards *AvailableRewards `protobuf:"bytes,3,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,4,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyListPlacement) Reset() {
	*x = EconomyListPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyListPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyListPlacement) ProtoMessage() {}

func (x *EconomyListPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyListPlacement.ProtoReflect.Descriptor instead.
func (*EconomyListPlacement) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{68}
}

func (x *EconomyListPlacement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EconomyListPlacement) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *EconomyListPlacement) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *EconomyListPlacement) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// The response data with the available store items.
type EconomyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of store items.
	StoreItems []*EconomyListStoreItem `protobuf:"bytes,1,rep,name=store_items,json=storeItems,proto3" json:"store_items,omitempty"`
	// The list of placements.
	Placements []*EconomyListPlacement `protobuf:"bytes,2,rep,name=placements,proto3" json:"placements,omitempty"`
	// The set of active donations for the current user.
	Donations map[string]*EconomyDonation `protobuf:"bytes,3,rep,name=donations,proto3" json:"donations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The list of active reward modifiers.
	ActiveRewardModifiers []*ActiveRewardModifier `protobuf:"bytes,4,rep,name=active_reward_modifiers,json=activeRewardModifiers,proto3" json:"active_reward_modifiers,omitempty"`
	// Current server time.
	CurrentTimeSec int64 `protobuf:"varint,5,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
}

func (x *EconomyList) Reset() {
	*x = EconomyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyList) ProtoMessage() {}

func (x *EconomyList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyList.ProtoReflect.Descriptor instead.
func (*EconomyList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{69}
}

func (x *EconomyList) GetStoreItems() []*EconomyListStoreItem {
	if x != nil {
		return x.StoreItems
	}
	return nil
}

func (x *EconomyList) GetPlacements() []*EconomyListPlacement {
	if x != nil {
		return x.Placements
	}
	return nil
}

func (x *EconomyList) GetDonations() map[string]*EconomyDonation {
	if x != nil {
		return x.Donations
	}
	return nil
}

func (x *EconomyList) GetActiveRewardModifiers() []*ActiveRewardModifier {
	if x != nil {
		return x.ActiveRewardModifiers
	}
	return nil
}

func (x *EconomyList) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

// A item owned by the current user.
type InventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the item.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the item. May be an i18n code.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the item. May be an i18n code.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The category to group the item together with others.
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// The sets the item is grouped into.
	ItemSets []string `protobuf:"bytes,5,rep,name=item_sets,json=itemSets,proto3" json:"item_sets,omitempty"`
	// The current count of the item.
	Count int64 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// The maximum count which can be owned for this item.
	MaxCount int64 `protobuf:"varint,7,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// Whether or not the item is stackable.
	Stackable bool `protobuf:"varint,8,opt,name=stackable,proto3" json:"stackable,omitempty"`
	// Whether or not the item is consumable.
	Consumable bool `protobuf:"varint,9,opt,name=consumable,proto3" json:"consumable,omitempty"`
	// The configuration for the reward to grant for consumption.
	ConsumeAvailableRewards *AvailableRewards `protobuf:"bytes,10,opt,name=consume_available_rewards,json=consumeAvailableRewards,proto3" json:"consume_available_rewards,omitempty"`
	// The properties with string values.
	StringProperties map[string]string `protobuf:"bytes,11,rep,name=string_properties,json=stringProperties,proto3" json:"string_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The properties with numeric values.
	NumericProperties map[string]float64 `protobuf:"bytes,12,rep,name=numeric_properties,json=numericProperties,proto3" json:"numeric_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// A UNIX timestamp when the user acquired this item.
	OwnedTimeSec int64 `protobuf:"varint,13,opt,name=owned_time_sec,json=ownedTimeSec,proto3" json:"owned_time_sec,omitempty"`
	// A UNIX timestamp when the item was updated.
	UpdateTimeSec int64 `protobuf:"varint,14,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// The instance ID of the item, if any.
	InstanceId string `protobuf:"bytes,15,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *InventoryItem) Reset() {
	*x = InventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryItem) ProtoMessage() {}

func (x *InventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryItem.ProtoReflect.Descriptor instead.
func (*InventoryItem) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{70}
}

func (x *InventoryItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InventoryItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InventoryItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InventoryItem) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *InventoryItem) GetItemSets() []string {
	if x != nil {
		return x.ItemSets
	}
	return nil
}

func (x *InventoryItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InventoryItem) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *InventoryItem) GetStackable() bool {
	if x != nil {
		return x.Stackable
	}
	return false
}

func (x *InventoryItem) GetConsumable() bool {
	if x != nil {
		return x.Consumable
	}
	return false
}

func (x *InventoryItem) GetConsumeAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.ConsumeAvailableRewards
	}
	return nil
}

func (x *InventoryItem) GetStringProperties() map[string]string {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

func (x *InventoryItem) GetNumericProperties() map[string]float64 {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

func (x *InventoryItem) GetOwnedTimeSec() int64 {
	if x != nil {
		return x.OwnedTimeSec
	}
	return 0
}

func (x *InventoryItem) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *InventoryItem) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Request all inventory items in the economy.
type InventoryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category for the items to filter for, or empty for all.
	ItemCategory string `protobuf:"bytes,1,opt,name=item_category,json=itemCategory,proto3" json:"item_category,omitempty"`
}

func (x *InventoryListRequest) Reset() {
	*x = InventoryListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryListRequest) ProtoMessage() {}

func (x *InventoryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryListRequest.ProtoReflect.Descriptor instead.
func (*InventoryListRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{71}
}

func (x *InventoryListRequest) GetItemCategory() string {
	if x != nil {
		return x.ItemCategory
	}
	return ""
}

// Represents a request to grant items to the user.
type InventoryGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items to grant.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *InventoryGrantRequest) Reset() {
	*x = InventoryGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryGrantRequest) ProtoMessage() {}

func (x *InventoryGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryGrantRequest.ProtoReflect.Descriptor instead.
func (*InventoryGrantRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{72}
}

func (x *InventoryGrantRequest) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

// The typed properties to update in an instanced inventory item.
type InventoryUpdateItemProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The properties with string values.
	StringProperties map[string]string `protobuf:"bytes,1,rep,name=string_properties,json=stringProperties,proto3" json:"string_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The properties with numeric values.
	NumericProperties map[string]float64 `protobuf:"bytes,2,rep,name=numeric_properties,json=numericProperties,proto3" json:"numeric_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *InventoryUpdateItemProperties) Reset() {
	*x = InventoryUpdateItemProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryUpdateItemProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryUpdateItemProperties) ProtoMessage() {}

func (x *InventoryUpdateItemProperties) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryUpdateItemProperties.ProtoReflect.Descriptor instead.
func (*InventoryUpdateItemProperties) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{73}
}

func (x *InventoryUpdateItemProperties) GetStringProperties() map[string]string {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

func (x *InventoryUpdateItemProperties) GetNumericProperties() map[string]float64 {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

// Represents a request to update properties of instanced items.
type InventoryUpdateItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The item updates to action, keyed by item instance ID.
	ItemUpdates map[string]*InventoryUpdateItemProperties `protobuf:"bytes,1,rep,name=item_updates,json=itemUpdates,proto3" json:"item_updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InventoryUpdateItemsRequest) Reset() {
	*x = InventoryUpdateItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryUpdateItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryUpdateItemsRequest) ProtoMessage() {}

func (x *InventoryUpdateItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryUpdateItemsRequest.ProtoReflect.Descriptor instead.
func (*InventoryUpdateItemsRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{74}
}

func (x *InventoryUpdateItemsRequest) GetItemUpdates() map[string]*InventoryUpdateItemProperties {
	if x != nil {
		return x.ItemUpdates
	}
	return nil
}

// The inventory in the economy or owned by user.
type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items in the player's inventory.
	Items map[string]*InventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{75}
}

func (x *Inventory) GetItems() map[string]*InventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request to consume some amount of items.
type InventoryConsumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Item ID amounts to consume, if any.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Whether or not to allow overconsumption.
	Overconsume bool `protobuf:"varint,2,opt,name=overconsume,proto3" json:"overconsume,omitempty"`
	// Instance ID amounts to consume, if any.
	Instances map[string]int64 `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *InventoryConsumeRequest) Reset() {
	*x = InventoryConsumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryConsumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryConsumeRequest) ProtoMessage() {}

func (x *InventoryConsumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryConsumeRequest.ProtoReflect.Descriptor instead.
func (*InventoryConsumeRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{76}
}

func (x *InventoryConsumeRequest) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *InventoryConsumeRequest) GetOverconsume() bool {
	if x != nil {
		return x.Overconsume
	}
	return false
}

func (x *InventoryConsumeRequest) GetInstances() map[string]int64 {
	if x != nil {
		return x.Instances
	}
	return nil
}

// Updated inventory and rewards granted from consumption.
type InventoryConsumeRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated inventory data, if changed.
	Inventory *Inventory `protobuf:"bytes,1,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Consume rewards by item ID, if any.
	Rewards map[string]*RewardList `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Consume rewards by instance ID, if any.
	InstanceRewards map[string]*RewardList `protobuf:"bytes,3,rep,name=instance_rewards,json=instanceRewards,proto3" json:"instance_rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InventoryConsumeRewards) Reset() {
	*x = InventoryConsumeRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryConsumeRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryConsumeRewards) ProtoMessage() {}

func (x *InventoryConsumeRewards) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryConsumeRewards.ProtoReflect.Descriptor instead.
func (*InventoryConsumeRewards) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{77}
}

func (x *InventoryConsumeRewards) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *InventoryConsumeRewards) GetRewards() map[string]*RewardList {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *InventoryConsumeRewards) GetInstanceRewards() map[string]*RewardList {
	if x != nil {
		return x.InstanceRewards
	}
	return nil
}

// Response from granting or purchasing items. This contains updated inventory data, if changed.
type InventoryUpdateAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Update inventory data, if changed.
	Inventory *Inventory `protobuf:"bytes,1,opt,name=inventory,proto3" json:"inventory,omitempty"`
}

func (x *InventoryUpdateAck) Reset() {
	*x = InventoryUpdateAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryUpdateAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryUpdateAck) ProtoMessage() {}

func (x *InventoryUpdateAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryUpdateAck.ProtoReflect.Descriptor instead.
func (*InventoryUpdateAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{78}
}

func (x *InventoryUpdateAck) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

// Response for retrieving Inventory system data definitions.
type InventoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The inventory items from definitions and the user.
	Items map[string]*InventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InventoryList) Reset() {
	*x = InventoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryList) ProtoMessage() {}

func (x *InventoryList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryList.ProtoReflect.Descriptor instead.
func (*InventoryList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{79}
}

func (x *InventoryList) GetItems() map[string]*InventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Bid amount associated with an auction.
type AuctionBidAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currencies required or placed as part of the bid.
	Currencies map[string]int64 `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AuctionBidAmount) Reset() {
	*x = AuctionBidAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionBidAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionBidAmount) ProtoMessage() {}

func (x *AuctionBidAmount) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionBidAmount.ProtoReflect.Descriptor instead.
func (*AuctionBidAmount) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{80}
}

func (x *AuctionBidAmount) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

// Fee structure associated with an auction, which will be deducted on completion.
type AuctionFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage-based fee value.
	Percentage float64 `protobuf:"fixed64,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Fixed fee amount.
	Fixed *AuctionBidAmount `protobuf:"bytes,2,opt,name=fixed,proto3" json:"fixed,omitempty"`
}

func (x *AuctionFee) Reset() {
	*x = AuctionFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionFee) ProtoMessage() {}

func (x *AuctionFee) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionFee.ProtoReflect.Descriptor instead.
func (*AuctionFee) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{81}
}

func (x *AuctionFee) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *AuctionFee) GetFixed() *AuctionBidAmount {
	if x != nil {
		return x.Fixed
	}
	return nil
}

// Cost to be paid for listing an auction under this config condition.
type AuctionTemplateConditionListingCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currencies cost, if any.
	Currencies map[string]int64 `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Inventory items cost, if any.
	Items map[string]int64 `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Energies cost, if any.
	Energies map[string]int64 `protobuf:"bytes,3,rep,name=energies,proto3" json:"energies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AuctionTemplateConditionListingCost) Reset() {
	*x = AuctionTemplateConditionListingCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionTemplateConditionListingCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionTemplateConditionListingCost) ProtoMessage() {}

func (x *AuctionTemplateConditionListingCost) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionTemplateConditionListingCost.ProtoReflect.Descriptor instead.
func (*AuctionTemplateConditionListingCost) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{82}
}

func (x *AuctionTemplateConditionListingCost) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *AuctionTemplateConditionListingCost) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AuctionTemplateConditionListingCost) GetEnergies() map[string]int64 {
	if x != nil {
		return x.Energies
	}
	return nil
}

// Minimum increment required between bids.
type AuctionTemplateConditionBidIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage-based increment value.
	Percentage float64 `protobuf:"fixed64,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Fixed increment amount.
	Fixed *AuctionBidAmount `protobuf:"bytes,2,opt,name=fixed,proto3" json:"fixed,omitempty"`
}

func (x *AuctionTemplateConditionBidIncrement) Reset() {
	*x = AuctionTemplateConditionBidIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionTemplateConditionBidIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionTemplateConditionBidIncrement) ProtoMessage() {}

func (x *AuctionTemplateConditionBidIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionTemplateConditionBidIncrement.ProtoReflect.Descriptor instead.
func (*AuctionTemplateConditionBidIncrement) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{83}
}

func (x *AuctionTemplateConditionBidIncrement) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *AuctionTemplateConditionBidIncrement) GetFixed() *AuctionBidAmount {
	if x != nil {
		return x.Fixed
	}
	return nil
}

// A condition set as part of an auction template.
type AuctionTemplateCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of seconds the auction will be available for.
	DurationSec int64 `protobuf:"varint,1,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
	// Cost to be paid on creating the auction listing, if any.
	ListingCost *AuctionTemplateConditionListingCost `protobuf:"bytes,2,opt,name=listing_cost,json=listingCost,proto3" json:"listing_cost,omitempty"`
	// Minimum starting bid.
	BidStart *AuctionBidAmount `protobuf:"bytes,3,opt,name=bid_start,json=bidStart,proto3" json:"bid_start,omitempty"`
	// Minimum increment between bids.
	BidIncrement *AuctionTemplateConditionBidIncrement `protobuf:"bytes,4,opt,name=bid_increment,json=bidIncrement,proto3" json:"bid_increment,omitempty"`
	// How close to auction end should it be extended if a new bid arrives.
	ExtensionThresholdSec int64 `protobuf:"varint,5,opt,name=extension_threshold_sec,json=extensionThresholdSec,proto3" json:"extension_threshold_sec,omitempty"`
	// How many seconds at a time will be added when extending.
	ExtensionSec int64 `protobuf:"varint,6,opt,name=extension_sec,json=extensionSec,proto3" json:"extension_sec,omitempty"`
	// How many seconds total may be added as extension.
	ExtensionMaxSec int64 `protobuf:"varint,7,opt,name=extension_max_sec,json=extensionMaxSec,proto3" json:"extension_max_sec,omitempty"`
	// Auction fee the creator will pay out of the winning bid amount, if any.
	Fee *AuctionFee `protobuf:"bytes,8,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *AuctionTemplateCondition) Reset() {
	*x = AuctionTemplateCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionTemplateCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionTemplateCondition) ProtoMessage() {}

func (x *AuctionTemplateCondition) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionTemplateCondition.ProtoReflect.Descriptor instead.
func (*AuctionTemplateCondition) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{84}
}

func (x *AuctionTemplateCondition) GetDurationSec() int64 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

func (x *AuctionTemplateCondition) GetListingCost() *AuctionTemplateConditionListingCost {
	if x != nil {
		return x.ListingCost
	}
	return nil
}

func (x *AuctionTemplateCondition) GetBidStart() *AuctionBidAmount {
	if x != nil {
		return x.BidStart
	}
	return nil
}

func (x *AuctionTemplateCondition) GetBidIncrement() *AuctionTemplateConditionBidIncrement {
	if x != nil {
		return x.BidIncrement
	}
	return nil
}

func (x *AuctionTemplateCondition) GetExtensionThresholdSec() int64 {
	if x != nil {
		return x.ExtensionThresholdSec
	}
	return 0
}

func (x *AuctionTemplateCondition) GetExtensionSec() int64 {
	if x != nil {
		return x.ExtensionSec
	}
	return 0
}

func (x *AuctionTemplateCondition) GetExtensionMaxSec() int64 {
	if x != nil {
		return x.ExtensionMaxSec
	}
	return 0
}

func (x *AuctionTemplateCondition) GetFee() *AuctionFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

// An individually usable auction template.
type AuctionTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Item identifiers that can be listed using this auction template.
	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Item sets that can be listed using this auction template.
	ItemSets []string `protobuf:"bytes,2,rep,name=item_sets,json=itemSets,proto3" json:"item_sets,omitempty"`
	// Condition configurations available.
	Conditions map[string]*AuctionTemplateCondition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuctionTemplate) Reset() {
	*x = AuctionTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionTemplate) ProtoMessage() {}

func (x *AuctionTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionTemplate.ProtoReflect.Descriptor instead.
func (*AuctionTemplate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{85}
}

func (x *AuctionTemplate) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AuctionTemplate) GetItemSets() []string {
	if x != nil {
		return x.ItemSets
	}
	return nil
}

func (x *AuctionTemplate) GetConditions() map[string]*AuctionTemplateCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// Set of all available auction templates.
type AuctionTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All available auction templates, keyed by an unique identifier.
	Templates map[string]*AuctionTemplate `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuctionTemplates) Reset() {
	*x = AuctionTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionTemplates) ProtoMessage() {}

func (x *AuctionTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionTemplates.ProtoReflect.Descriptor instead.
func (*AuctionTemplates) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{86}
}

func (x *AuctionTemplates) GetTemplates() map[string]*AuctionTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

// The content(s) of an auction.
type AuctionReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Items being sold as part of a given auction listing.
	Items []*InventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AuctionReward) Reset() {
	*x = AuctionReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionReward) ProtoMessage() {}

func (x *AuctionReward) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionReward.ProtoReflect.Descriptor instead.
func (*AuctionReward) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{87}
}

func (x *AuctionReward) GetItems() []*InventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Represents a bid on an auction.
type AuctionBid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID of the bidder.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Amount(s) placed as a bid.
	Bid *AuctionBidAmount `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the bid was placed.
	CreateTimeSec int64 `protobuf:"varint,3,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
}

func (x *AuctionBid) Reset() {
	*x = AuctionBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionBid) ProtoMessage() {}

func (x *AuctionBid) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionBid.ProtoReflect.Descriptor instead.
func (*AuctionBid) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{88}
}

func (x *AuctionBid) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuctionBid) GetBid() *AuctionBidAmount {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *AuctionBid) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

// An individual auction listing.
type Auction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for this auction.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Identifier of the user that created this auction.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Item(s) being auctioned.
	Reward *AuctionReward `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
	// Fees associated, to be deducted when the creator claims the winning bid.
	Fee *AuctionFee `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	// Version hash of this auction data, used to ensure operations act on latest known state.
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// Current highest bid, if any.
	Bid *AuctionBid `protobuf:"bytes,6,opt,name=bid,proto3" json:"bid,omitempty"`
	// Minimum next bid amount.
	BidNext *AuctionBidAmount `protobuf:"bytes,7,opt,name=bid_next,json=bidNext,proto3" json:"bid_next,omitempty"`
	// Auction duration in seconds, including any extensions.
	DurationSec int64 `protobuf:"varint,8,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
	// Original auction duration in seconds, not counting any extension time.
	OriginalDurationSec int64 `protobuf:"varint,9,opt,name=original_duration_sec,json=originalDurationSec,proto3" json:"original_duration_sec,omitempty"`
	// Additional time added so far to the original duration.
	ExtensionAddedSec int64 `protobuf:"varint,10,opt,name=extension_added_sec,json=extensionAddedSec,proto3" json:"extension_added_sec,omitempty"`
	// Threshold before end of auction where a bid would extend the time.
	ExtensionThresholdSec int64 `protobuf:"varint,11,opt,name=extension_threshold_sec,json=extensionThresholdSec,proto3" json:"extension_threshold_sec,omitempty"`
	// Extra time that would be added if a bid is placed within the threshold before the auction ends.
	ExtensionSec int64 `protobuf:"varint,12,opt,name=extension_sec,json=extensionSec,proto3" json:"extension_sec,omitempty"`
	// Maximum total number of seconds the auction can be extended by.
	ExtensionMaxSec int64 `protobuf:"varint,13,opt,name=extension_max_sec,json=extensionMaxSec,proto3" json:"extension_max_sec,omitempty"`
	// Extra time still available.
	ExtensionRemainingSec int64 `protobuf:"varint,14,opt,name=extension_remaining_sec,json=extensionRemainingSec,proto3" json:"extension_remaining_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction was created.
	CreateTimeSec int64 `protobuf:"varint,15,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the current bid was updated, for example by placing a new bid.
	UpdateTimeSec int64 `protobuf:"varint,16,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction starts.
	StartTimeSec int64 `protobuf:"varint,17,opt,name=start_time_sec,json=startTimeSec,proto3" json:"start_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction ends.
	EndTimeSec int64 `protobuf:"varint,18,opt,name=end_time_sec,json=endTimeSec,proto3" json:"end_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction was originally intended to end, not counting extensions.
	OriginalEndTimeSec int64 `protobuf:"varint,19,opt,name=original_end_time_sec,json=originalEndTimeSec,proto3" json:"original_end_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction was cancelled, if any.
	CancelTimeSec int64 `protobuf:"varint,20,opt,name=cancel_time_sec,json=cancelTimeSec,proto3" json:"cancel_time_sec,omitempty"`
	// The current UNIX time (for gRPC clients) or ISO string (for REST clients) on the server.
	CurrentTimeSec int64 `protobuf:"varint,21,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the owner claimed the successful bid amount.
	OwnerClaimSec int64 `protobuf:"varint,22,opt,name=owner_claim_sec,json=ownerClaimSec,proto3" json:"owner_claim_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the winning bidder claimed the auction reward.
	WinnerClaimSec int64 `protobuf:"varint,23,opt,name=winner_claim_sec,json=winnerClaimSec,proto3" json:"winner_claim_sec,omitempty"`
	// Indicates if the auction has started from the server perspective.
	HasStarted bool `protobuf:"varint,24,opt,name=has_started,json=hasStarted,proto3" json:"has_started,omitempty"`
	// Indicates if the auction has ended from the server perspective.
	HasEnded bool `protobuf:"varint,25,opt,name=has_ended,json=hasEnded,proto3" json:"has_ended,omitempty"`
	// Indicates if the caller can bid on this auction.
	CanBid bool `protobuf:"varint,26,opt,name=can_bid,json=canBid,proto3" json:"can_bid,omitempty"`
	// Indicates if the caller can claim a reward from this auction, either the reward or winning bid.
	CanClaim bool `protobuf:"varint,27,opt,name=can_claim,json=canClaim,proto3" json:"can_claim,omitempty"`
	// Indicates if the auction can be cancelled by its creator.
	CanCancel bool `protobuf:"varint,28,opt,name=can_cancel,json=canCancel,proto3" json:"can_cancel,omitempty"`
}

func (x *Auction) Reset() {
	*x = Auction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auction) ProtoMessage() {}

func (x *Auction) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auction.ProtoReflect.Descriptor instead.
func (*Auction) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{89}
}

func (x *Auction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Auction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Auction) GetReward() *AuctionReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *Auction) GetFee() *AuctionFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Auction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Auction) GetBid() *AuctionBid {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *Auction) GetBidNext() *AuctionBidAmount {
	if x != nil {
		return x.BidNext
	}
	return nil
}

func (x *Auction) GetDurationSec() int64 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

func (x *Auction) GetOriginalDurationSec() int64 {
	if x != nil {
		return x.OriginalDurationSec
	}
	return 0
}

func (x *Auction) GetExtensionAddedSec() int64 {
	if x != nil {
		return x.ExtensionAddedSec
	}
	return 0
}

func (x *Auction) GetExtensionThresholdSec() int64 {
	if x != nil {
		return x.ExtensionThresholdSec
	}
	return 0
}

func (x *Auction) GetExtensionSec() int64 {
	if x != nil {
		return x.ExtensionSec
	}
	return 0
}

func (x *Auction) GetExtensionMaxSec() int64 {
	if x != nil {
		return x.ExtensionMaxSec
	}
	return 0
}

func (x *Auction) GetExtensionRemainingSec() int64 {
	if x != nil {
		return x.ExtensionRemainingSec
	}
	return 0
}

func (x *Auction) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *Auction) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *Auction) GetStartTimeSec() int64 {
	if x != nil {
		return x.StartTimeSec
	}
	return 0
}

func (x *Auction) GetEndTimeSec() int64 {
	if x != nil {
		return x.EndTimeSec
	}
	return 0
}

func (x *Auction) GetOriginalEndTimeSec() int64 {
	if x != nil {
		return x.OriginalEndTimeSec
	}
	return 0
}

func (x *Auction) GetCancelTimeSec() int64 {
	if x != nil {
		return x.CancelTimeSec
	}
	return 0
}

func (x *Auction) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

func (x *Auction) GetOwnerClaimSec() int64 {
	if x != nil {
		return x.OwnerClaimSec
	}
	return 0
}

func (x *Auction) GetWinnerClaimSec() int64 {
	if x != nil {
		return x.WinnerClaimSec
	}
	return 0
}

func (x *Auction) GetHasStarted() bool {
	if x != nil {
		return x.HasStarted
	}
	return false
}

func (x *Auction) GetHasEnded() bool {
	if x != nil {
		return x.HasEnded
	}
	return false
}

func (x *Auction) GetCanBid() bool {
	if x != nil {
		return x.CanBid
	}
	return false
}

func (x *Auction) GetCanClaim() bool {
	if x != nil {
		return x.CanClaim
	}
	return false
}

func (x *Auction) GetCanCancel() bool {
	if x != nil {
		return x.CanCancel
	}
	return false
}

// Notification payload containing a bid update for a followed auction.
type AuctionNotificationBid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique auction identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// New version hash for this auction.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Current highest bid, if any.
	Bid *AuctionBid `protobuf:"bytes,3,opt,name=bid,proto3" json:"bid,omitempty"`
	// Minimum next bid amount.
	BidNext *AuctionBidAmount `protobuf:"bytes,4,opt,name=bid_next,json=bidNext,proto3" json:"bid_next,omitempty"`
	// Additional time added so far to the original duration.
	ExtensionAddedSec int64 `protobuf:"varint,5,opt,name=extension_added_sec,json=extensionAddedSec,proto3" json:"extension_added_sec,omitempty"`
	// Extra time still available.
	ExtensionRemainingSec int64 `protobuf:"varint,6,opt,name=extension_remaining_sec,json=extensionRemainingSec,proto3" json:"extension_remaining_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the current bid was updated, for example by placing a new bid.
	UpdateTimeSec int64 `protobuf:"varint,7,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction ends.
	EndTimeSec int64 `protobuf:"varint,8,opt,name=end_time_sec,json=endTimeSec,proto3" json:"end_time_sec,omitempty"`
	// The current UNIX time (for gRPC clients) or ISO string (for REST clients) on the server.
	CurrentTimeSec int64 `protobuf:"varint,9,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
}

func (x *AuctionNotificationBid) Reset() {
	*x = AuctionNotificationBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionNotificationBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionNotificationBid) ProtoMessage() {}

func (x *AuctionNotificationBid) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionNotificationBid.ProtoReflect.Descriptor instead.
func (*AuctionNotificationBid) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{90}
}

func (x *AuctionNotificationBid) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuctionNotificationBid) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AuctionNotificationBid) GetBid() *AuctionBid {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *AuctionNotificationBid) GetBidNext() *AuctionBidAmount {
	if x != nil {
		return x.BidNext
	}
	return nil
}

func (x *AuctionNotificationBid) GetExtensionAddedSec() int64 {
	if x != nil {
		return x.ExtensionAddedSec
	}
	return 0
}

func (x *AuctionNotificationBid) GetExtensionRemainingSec() int64 {
	if x != nil {
		return x.ExtensionRemainingSec
	}
	return 0
}

func (x *AuctionNotificationBid) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *AuctionNotificationBid) GetEndTimeSec() int64 {
	if x != nil {
		return x.EndTimeSec
	}
	return 0
}

func (x *AuctionNotificationBid) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

// Server to client stream envelope.
type StreamEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*StreamEnvelope_AuctionBid
	Message isStreamEnvelope_Message `protobuf_oneof:"message"`
}

func (x *StreamEnvelope) Reset() {
	*x = StreamEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEnvelope) ProtoMessage() {}

func (x *StreamEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEnvelope.ProtoReflect.Descriptor instead.
func (*StreamEnvelope) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{91}
}

func (m *StreamEnvelope) GetMessage() isStreamEnvelope_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *StreamEnvelope) GetAuctionBid() *AuctionNotificationBid {
	if x, ok := x.GetMessage().(*StreamEnvelope_AuctionBid); ok {
		return x.AuctionBid
	}
	return nil
}

type isStreamEnvelope_Message interface {
	isStreamEnvelope_Message()
}

type StreamEnvelope_AuctionBid struct {
	AuctionBid *AuctionNotificationBid `protobuf:"bytes,1,opt,name=auction_bid,json=auctionBid,proto3,oneof"`
}

func (*StreamEnvelope_AuctionBid) isStreamEnvelope_Message() {}

// Result of claiming an auction as the winning bidder.
type AuctionClaimBid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Auction that was just claimed.
	Auction *Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
	// Reward(s) that were successfully claimed by the winning bidder.
	Reward *AuctionReward `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *AuctionClaimBid) Reset() {
	*x = AuctionClaimBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionClaimBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionClaimBid) ProtoMessage() {}

func (x *AuctionClaimBid) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionClaimBid.ProtoReflect.Descriptor instead.
func (*AuctionClaimBid) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{92}
}

func (x *AuctionClaimBid) GetAuction() *Auction {
	if x != nil {
		return x.Auction
	}
	return nil
}

func (x *AuctionClaimBid) GetReward() *AuctionReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

// Result of claiming an auction as the creator.
type AuctionClaimCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Auction that was just claimed.
	Auction *Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
	// Reward(s) that were successfully claimed by the creator.
	Reward *AuctionBidAmount `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
	// Fee(s) that were paid by the creator.
	Fee *AuctionBidAmount `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// Items returned in the event of a failed auction.
	ReturnedItems []*InventoryItem `protobuf:"bytes,4,rep,name=returned_items,json=returnedItems,proto3" json:"returned_items,omitempty"`
}

func (x *AuctionClaimCreated) Reset() {
	*x = AuctionClaimCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionClaimCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionClaimCreated) ProtoMessage() {}

func (x *AuctionClaimCreated) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionClaimCreated.ProtoReflect.Descriptor instead.
func (*AuctionClaimCreated) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{93}
}

func (x *AuctionClaimCreated) GetAuction() *Auction {
	if x != nil {
		return x.Auction
	}
	return nil
}

func (x *AuctionClaimCreated) GetReward() *AuctionBidAmount {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *AuctionClaimCreated) GetFee() *AuctionBidAmount {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *AuctionClaimCreated) GetReturnedItems() []*InventoryItem {
	if x != nil {
		return x.ReturnedItems
	}
	return nil
}

// Result of cancelling an auction.
type AuctionCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Auction that was just cancelled.
	Auction *Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
	// Reward(s) that were successfully refunded to the original auction creator.
	Reward *AuctionReward `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *AuctionCancel) Reset() {
	*x = AuctionCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionCancel) ProtoMessage() {}

func (x *AuctionCancel) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionCancel.ProtoReflect.Descriptor instead.
func (*AuctionCancel) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{94}
}

func (x *AuctionCancel) GetAuction() *Auction {
	if x != nil {
		return x.Auction
	}
	return nil
}

func (x *AuctionCancel) GetReward() *AuctionReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

// A list of auctions filtered by some initial request criteria.
type AuctionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Auctions matching the requested filters.
	Auctions []*Auction `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions,omitempty"`
	// Pagination cursor to fetch more results, or empty if there are no more.
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *AuctionList) Reset() {
	*x = AuctionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionList) ProtoMessage() {}

func (x *AuctionList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionList.ProtoReflect.Descriptor instead.
func (*AuctionList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{95}
}

func (x *AuctionList) GetAuctions() []*Auction {
	if x != nil {
		return x.Auctions
	}
	return nil
}

func (x *AuctionList) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// Request to list available auctions, optionally filtered based on given criteria.
type AuctionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Formatted filter query.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Custom sort criteria.
	Sort []string `protobuf:"bytes,2,rep,name=sort,proto3" json:"sort,omitempty"`
	// Maximum number of auctions to return in a single response.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Cursor to use for retrieving the next page of results.
	Cursor string `protobuf:"bytes,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *AuctionListRequest) Reset() {
	*x = AuctionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionListRequest) ProtoMessage() {}

func (x *AuctionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionListRequest.ProtoReflect.Descriptor instead.
func (*AuctionListRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{96}
}

func (x *AuctionListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *AuctionListRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *AuctionListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AuctionListRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// Request to place a bid on an active auction.
type AuctionBidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique auction identifier to bid on.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The last seen version hash of the auction.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Bid amounts to place, must at least match the minimum next bid.
	Bid *AuctionBidAmount `protobuf:"bytes,3,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (x *AuctionBidRequest) Reset() {
	*x = AuctionBidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionBidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionBidRequest) ProtoMessage() {}

func (x *AuctionBidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionBidRequest.ProtoReflect.Descriptor instead.
func (*AuctionBidRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{97}
}

func (x *AuctionBidRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuctionBidRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AuctionBidRequest) GetBid() *AuctionBidAmount {
	if x != nil {
		return x.Bid
	}
	return nil
}

// Request to claim a successful auction by either the winning bidder.
type AuctionClaimBidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique auction identifier to claim.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AuctionClaimBidRequest) Reset() {
	*x = AuctionClaimBidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionClaimBidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionClaimBidRequest) ProtoMessage() {}

func (x *AuctionClaimBidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionClaimBidRequest.ProtoReflect.Descriptor instead.
func (*AuctionClaimBidRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{98}
}

func (x *AuctionClaimBidRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request to claim a successful auction by either the creator.
type AuctionClaimCreatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique auction identifier to claim.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AuctionClaimCreatedRequest) Reset() {
	*x = AuctionClaimCreatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionClaimCreatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionClaimCreatedRequest) ProtoMessage() {}

func (x *AuctionClaimCreatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionClaimCreatedRequest.ProtoReflect.Descriptor instead.
func (*AuctionClaimCreatedRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{99}
}

func (x *AuctionClaimCreatedRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request to cancel an active auction.
type AuctionCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique auction identifier to cancel.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AuctionCancelRequest) Reset() {
	*x = AuctionCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionCancelRequest) ProtoMessage() {}

func (x *AuctionCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionCancelRequest.ProtoReflect.Descriptor instead.
func (*AuctionCancelRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{100}
}

func (x *AuctionCancelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request to create a new auction.
type AuctionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Auction template to use.
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// Auction condition set to use.
	ConditionId string `protobuf:"bytes,2,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	// Item instance(s) to list in the auction.
	InstanceIds []string `protobuf:"bytes,3,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	// Time when the auction should start, omit to start immediately.
	StartTimeSec int64 `protobuf:"varint,4,opt,name=start_time_sec,json=startTimeSec,proto3" json:"start_time_sec,omitempty"`
}

func (x *AuctionCreateRequest) Reset() {
	*x = AuctionCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionCreateRequest) ProtoMessage() {}

func (x *AuctionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionCreateRequest.ProtoReflect.Descriptor instead.
func (*AuctionCreateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{101}
}

func (x *AuctionCreateRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *AuctionCreateRequest) GetConditionId() string {
	if x != nil {
		return x.ConditionId
	}
	return ""
}

func (x *AuctionCreateRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *AuctionCreateRequest) GetStartTimeSec() int64 {
	if x != nil {
		return x.StartTimeSec
	}
	return 0
}

// Request to retrieve a list of auctions the user has bid on.
type AuctionListBidsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of auctions to return in a single response.
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Cursor to use for retrieving the next page of results.
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *AuctionListBidsRequest) Reset() {
	*x = AuctionListBidsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionListBidsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionListBidsRequest) ProtoMessage() {}

func (x *AuctionListBidsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionListBidsRequest.ProtoReflect.Descriptor instead.
func (*AuctionListBidsRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{102}
}

func (x *AuctionListBidsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AuctionListBidsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// Request to retrieve a list of auctions the user has created.
type AuctionListCreatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of auctions to return in a single response.
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Cursor to use for retrieving the next page of results.
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *AuctionListCreatedRequest) Reset() {
	*x = AuctionListCreatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionListCreatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionListCreatedRequest) ProtoMessage() {}

func (x *AuctionListCreatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionListCreatedRequest.ProtoReflect.Descriptor instead.
func (*AuctionListCreatedRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{103}
}

func (x *AuctionListCreatedRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AuctionListCreatedRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// Request to follow auctions the user has an interest in.
type AuctionsFollowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Auction IDs to follow.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *AuctionsFollowRequest) Reset() {
	*x = AuctionsFollowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionsFollowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionsFollowRequest) ProtoMessage() {}

func (x *AuctionsFollowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionsFollowRequest.ProtoReflect.Descriptor instead.
func (*AuctionsFollowRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{104}
}

func (x *AuctionsFollowRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Represents a request to retrieve available store items.
type EconomyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The game client's store type.
	StoreType EconomyStoreType `protobuf:"varint,1,opt,name=store_type,json=storeType,proto3,enum=hiro.EconomyStoreType" json:"store_type,omitempty"`
}

func (x *EconomyListRequest) Reset() {
	*x = EconomyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyListRequest) ProtoMessage() {}

func (x *EconomyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyListRequest.ProtoReflect.Descriptor instead.
func (*EconomyListRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{105}
}

func (x *EconomyListRequest) GetStoreType() EconomyStoreType {
	if x != nil {
		return x.StoreType
	}
	return EconomyStoreType_ECONOMY_STORE_TYPE_UNSPECIFIED
}

// Represents a request to grant rewards to the user.
type EconomyGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The currencies to grant.
	Currencies map[string]int64 `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The reward modifiers to grant.
	RewardModifiers []*RewardModifier `protobuf:"bytes,2,rep,name=reward_modifiers,json=rewardModifiers,proto3" json:"reward_modifiers,omitempty"`
	// Any items to grant.
	Items map[string]int64 `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EconomyGrantRequest) Reset() {
	*x = EconomyGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyGrantRequest) ProtoMessage() {}

func (x *EconomyGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyGrantRequest.ProtoReflect.Descriptor instead.
func (*EconomyGrantRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{106}
}

func (x *EconomyGrantRequest) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *EconomyGrantRequest) GetRewardModifiers() []*RewardModifier {
	if x != nil {
		return x.RewardModifiers
	}
	return nil
}

func (x *EconomyGrantRequest) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request to create a store item purchase intent.
type EconomyPurchaseIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An item's ID.
	ItemId string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// The store type.
	StoreType EconomyStoreType `protobuf:"varint,2,opt,name=store_type,json=storeType,proto3,enum=hiro.EconomyStoreType" json:"store_type,omitempty"`
	// The SKU code, if any.
	Sku string `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku,omitempty"`
}

func (x *EconomyPurchaseIntentRequest) Reset() {
	*x = EconomyPurchaseIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPurchaseIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPurchaseIntentRequest) ProtoMessage() {}

func (x *EconomyPurchaseIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPurchaseIntentRequest.ProtoReflect.Descriptor instead.
func (*EconomyPurchaseIntentRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{107}
}

func (x *EconomyPurchaseIntentRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *EconomyPurchaseIntentRequest) GetStoreType() EconomyStoreType {
	if x != nil {
		return x.StoreType
	}
	return EconomyStoreType_ECONOMY_STORE_TYPE_UNSPECIFIED
}

func (x *EconomyPurchaseIntentRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

// Request to purchase a particular store item.
type EconomyPurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An item's ID.
	ItemId string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// The store type.
	StoreType EconomyStoreType `protobuf:"varint,2,opt,name=store_type,json=storeType,proto3,enum=hiro.EconomyStoreType" json:"store_type,omitempty"`
	// The IAP receipt purchased.
	Receipt string `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *EconomyPurchaseRequest) Reset() {
	*x = EconomyPurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPurchaseRequest) ProtoMessage() {}

func (x *EconomyPurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPurchaseRequest.ProtoReflect.Descriptor instead.
func (*EconomyPurchaseRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{108}
}

func (x *EconomyPurchaseRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *EconomyPurchaseRequest) GetStoreType() EconomyStoreType {
	if x != nil {
		return x.StoreType
	}
	return EconomyStoreType_ECONOMY_STORE_TYPE_UNSPECIFIED
}

func (x *EconomyPurchaseRequest) GetReceipt() string {
	if x != nil {
		return x.Receipt
	}
	return ""
}

// Request to restore a set of purchases.
type EconomyPurchaseRestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The store type.
	StoreType EconomyStoreType `protobuf:"varint,1,opt,name=store_type,json=storeType,proto3,enum=hiro.EconomyStoreType" json:"store_type,omitempty"`
	// The IAP receipts to restore.
	Receipts []string `protobuf:"bytes,2,rep,name=receipts,proto3" json:"receipts,omitempty"`
}

func (x *EconomyPurchaseRestoreRequest) Reset() {
	*x = EconomyPurchaseRestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPurchaseRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPurchaseRestoreRequest) ProtoMessage() {}

func (x *EconomyPurchaseRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPurchaseRestoreRequest.ProtoReflect.Descriptor instead.
func (*EconomyPurchaseRestoreRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{109}
}

func (x *EconomyPurchaseRestoreRequest) GetStoreType() EconomyStoreType {
	if x != nil {
		return x.StoreType
	}
	return EconomyStoreType_ECONOMY_STORE_TYPE_UNSPECIFIED
}

func (x *EconomyPurchaseRestoreRequest) GetReceipts() []string {
	if x != nil {
		return x.Receipts
	}
	return nil
}

// Request to retrieve status af a specific placement instance by reward ID.
type EconomyPlacementStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reward ID to check.
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// The placement ID to check, will be used if reward ID is not supplied.
	PlacementId string `protobuf:"bytes,2,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
	// The check attempt counter, optional.
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EconomyPlacementStatusRequest) Reset() {
	*x = EconomyPlacementStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPlacementStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPlacementStatusRequest) ProtoMessage() {}

func (x *EconomyPlacementStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPlacementStatusRequest.ProtoReflect.Descriptor instead.
func (*EconomyPlacementStatusRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{110}
}

func (x *EconomyPlacementStatusRequest) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

func (x *EconomyPlacementStatusRequest) GetPlacementId() string {
	if x != nil {
		return x.PlacementId
	}
	return ""
}

func (x *EconomyPlacementStatusRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Request to start a placement reward.
type EconomyPlacementStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier to start a reward for.
	PlacementId string `protobuf:"bytes,1,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
	// Optional metadata to associate with the placement.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyPlacementStartRequest) Reset() {
	*x = EconomyPlacementStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPlacementStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPlacementStartRequest) ProtoMessage() {}

func (x *EconomyPlacementStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPlacementStartRequest.ProtoReflect.Descriptor instead.
func (*EconomyPlacementStartRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{111}
}

func (x *EconomyPlacementStartRequest) GetPlacementId() string {
	if x != nil {
		return x.PlacementId
	}
	return ""
}

func (x *EconomyPlacementStartRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// The current status of a placement reward.
type EconomyPlacementStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reward ID.
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// The placement ID.
	PlacementId string `protobuf:"bytes,2,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
	// The UNIX timestamp when the placement was created.
	CreateTimeSec int64 `protobuf:"varint,3,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// The UNIX timestamp when the placement was completed.
	CompleteTimeSec int64 `protobuf:"varint,4,opt,name=complete_time_sec,json=completeTimeSec,proto3" json:"complete_time_sec,omitempty"`
	// If completed, was it successful.
	Success bool `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	// The reward for completing the placement, if it was autocompleted as part of the status request.
	Reward *Reward `protobuf:"bytes,6,opt,name=reward,proto3" json:"reward,omitempty"`
	// Metadata associated with the placement, if any.
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyPlacementStatus) Reset() {
	*x = EconomyPlacementStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPlacementStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPlacementStatus) ProtoMessage() {}

func (x *EconomyPlacementStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPlacementStatus.ProtoReflect.Descriptor instead.
func (*EconomyPlacementStatus) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{112}
}

func (x *EconomyPlacementStatus) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

func (x *EconomyPlacementStatus) GetPlacementId() string {
	if x != nil {
		return x.PlacementId
	}
	return ""
}

func (x *EconomyPlacementStatus) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *EconomyPlacementStatus) GetCompleteTimeSec() int64 {
	if x != nil {
		return x.CompleteTimeSec
	}
	return 0
}

func (x *EconomyPlacementStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EconomyPlacementStatus) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *EconomyPlacementStatus) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Response from granting currencies, reward modifiers, and/or items.
// Contains updated wallet and inventory data, if changed.
// Contains reward granted, if any.
// Contains active reward modifiers, if changed.
type EconomyUpdateAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated wallet data, if changed.
	Wallet map[string]int64 `protobuf:"bytes,1,rep,name=wallet,proto3" json:"wallet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Update inventory data, if changed.
	Inventory *Inventory `protobuf:"bytes,2,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Reward, if any.
	Reward *Reward `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
	// Updated active reward modifiers, if changed.
	ActiveRewardModifiers []*ActiveRewardModifier `protobuf:"bytes,4,rep,name=active_reward_modifiers,json=activeRewardModifiers,proto3" json:"active_reward_modifiers,omitempty"`
	// Current server time.
	CurrentTimeSec int64 `protobuf:"varint,5,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
}

func (x *EconomyUpdateAck) Reset() {
	*x = EconomyUpdateAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyUpdateAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyUpdateAck) ProtoMessage() {}

func (x *EconomyUpdateAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyUpdateAck.ProtoReflect.Descriptor instead.
func (*EconomyUpdateAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{113}
}

func (x *EconomyUpdateAck) GetWallet() map[string]int64 {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *EconomyUpdateAck) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *EconomyUpdateAck) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *EconomyUpdateAck) GetActiveRewardModifiers() []*ActiveRewardModifier {
	if x != nil {
		return x.ActiveRewardModifiers
	}
	return nil
}

func (x *EconomyUpdateAck) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

// Response from purchasing currencies and/or items.
// Contains updated wallet and inventory data, if changed.
// Contains reward granted, if any.
// Contains indication of whether or not the purchase was a sandbox purchase.
type EconomyPurchaseAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated wallet data, if changed.
	Wallet map[string]int64 `protobuf:"bytes,1,rep,name=wallet,proto3" json:"wallet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Update inventory data, if changed.
	Inventory *Inventory `protobuf:"bytes,2,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Reward, if any.
	Reward *Reward `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
	// Was the purchase a sandbox purchase?
	IsSandboxPurchase bool `protobuf:"varint,4,opt,name=is_sandbox_purchase,json=isSandboxPurchase,proto3" json:"is_sandbox_purchase,omitempty"`
}

func (x *EconomyPurchaseAck) Reset() {
	*x = EconomyPurchaseAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPurchaseAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPurchaseAck) ProtoMessage() {}

func (x *EconomyPurchaseAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPurchaseAck.ProtoReflect.Descriptor instead.
func (*EconomyPurchaseAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{114}
}

func (x *EconomyPurchaseAck) GetWallet() map[string]int64 {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *EconomyPurchaseAck) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *EconomyPurchaseAck) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *EconomyPurchaseAck) GetIsSandboxPurchase() bool {
	if x != nil {
		return x.IsSandboxPurchase
	}
	return false
}

// A modifier that may change energy behaviour.
type EnergyModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The modifier operator.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// The modifier value, if applicable.
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// The UNIX timestamp when the modifier became active.
	StartTimeSec int64 `protobuf:"varint,3,opt,name=start_time_sec,json=startTimeSec,proto3" json:"start_time_sec,omitempty"`
	// The UNIX timestamp when the modifier ends.
	EndTimeSec int64 `protobuf:"varint,4,opt,name=end_time_sec,json=endTimeSec,proto3" json:"end_time_sec,omitempty"`
}

func (x *EnergyModifier) Reset() {
	*x = EnergyModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyModifier) ProtoMessage() {}

func (x *EnergyModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyModifier.ProtoReflect.Descriptor instead.
func (*EnergyModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{115}
}

func (x *EnergyModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *EnergyModifier) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EnergyModifier) GetStartTimeSec() int64 {
	if x != nil {
		return x.StartTimeSec
	}
	return 0
}

func (x *EnergyModifier) GetEndTimeSec() int64 {
	if x != nil {
		return x.EndTimeSec
	}
	return 0
}

// Information about a single energy type.
type Energy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique energy identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The current amount.
	Current int32 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	// The maximum amount.
	Max int32 `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	// Amount of energy granted per refill.
	Refill int32 `protobuf:"varint,4,opt,name=refill,proto3" json:"refill,omitempty"`
	// Number of seconds between refills.
	RefillSec int64 `protobuf:"varint,5,opt,name=refill_sec,json=refillSec,proto3" json:"refill_sec,omitempty"`
	// The UNIX timestamp when the count will increase, if it is not at max already.
	NextRefillTimeSec int64 `protobuf:"varint,6,opt,name=next_refill_time_sec,json=nextRefillTimeSec,proto3" json:"next_refill_time_sec,omitempty"`
	// The UNIX timestamp when the count will reach max, if it is not at max already.
	MaxRefillTimeSec int64 `protobuf:"varint,7,opt,name=max_refill_time_sec,json=maxRefillTimeSec,proto3" json:"max_refill_time_sec,omitempty"`
	// The UNIX timestamp when the count started filling, if it is not at max already.
	StartRefillTimeSec int64 `protobuf:"varint,8,opt,name=start_refill_time_sec,json=startRefillTimeSec,proto3" json:"start_refill_time_sec,omitempty"`
	// The modifiers, if any.
	Modifiers []*EnergyModifier `protobuf:"bytes,9,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
	// The available rewards, if any.
	AvailableRewards *AvailableRewards `protobuf:"bytes,10,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,11,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The current UNIX timestamp in seconds.
	CurrentTimeSec int64 `protobuf:"varint,12,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
}

func (x *Energy) Reset() {
	*x = Energy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Energy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Energy) ProtoMessage() {}

func (x *Energy) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Energy.ProtoReflect.Descriptor instead.
func (*Energy) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{116}
}

func (x *Energy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Energy) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Energy) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Energy) GetRefill() int32 {
	if x != nil {
		return x.Refill
	}
	return 0
}

func (x *Energy) GetRefillSec() int64 {
	if x != nil {
		return x.RefillSec
	}
	return 0
}

func (x *Energy) GetNextRefillTimeSec() int64 {
	if x != nil {
		return x.NextRefillTimeSec
	}
	return 0
}

func (x *Energy) GetMaxRefillTimeSec() int64 {
	if x != nil {
		return x.MaxRefillTimeSec
	}
	return 0
}

func (x *Energy) GetStartRefillTimeSec() int64 {
	if x != nil {
		return x.StartRefillTimeSec
	}
	return 0
}

func (x *Energy) GetModifiers() []*EnergyModifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *Energy) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *Energy) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Energy) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

// One or more energy values for a user.
type EnergyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Energy types keyed on the energy identifier.
	Energies map[string]*Energy `protobuf:"bytes,1,rep,name=energies,proto3" json:"energies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EnergyList) Reset() {
	*x = EnergyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyList) ProtoMessage() {}

func (x *EnergyList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyList.ProtoReflect.Descriptor instead.
func (*EnergyList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{117}
}

func (x *EnergyList) GetEnergies() map[string]*Energy {
	if x != nil {
		return x.Energies
	}
	return nil
}

// Request to spend one or more energy amounts.
type EnergySpendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Energy amounts to spend.
	Amounts map[string]int32 `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EnergySpendRequest) Reset() {
	*x = EnergySpendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergySpendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergySpendRequest) ProtoMessage() {}

func (x *EnergySpendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergySpendRequest.ProtoReflect.Descriptor instead.
func (*EnergySpendRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{118}
}

func (x *EnergySpendRequest) GetAmounts() map[string]int32 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

// Request to spend one or more energy amounts.
type EnergySpendReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated list of energy.
	Energies *EnergyList `protobuf:"bytes,1,opt,name=energies,proto3" json:"energies,omitempty"`
	// The cumulative reward of spending the energies.
	Reward *Reward `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *EnergySpendReward) Reset() {
	*x = EnergySpendReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergySpendReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergySpendReward) ProtoMessage() {}

func (x *EnergySpendReward) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergySpendReward.ProtoReflect.Descriptor instead.
func (*EnergySpendReward) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{119}
}

func (x *EnergySpendReward) GetEnergies() *EnergyList {
	if x != nil {
		return x.Energies
	}
	return nil
}

func (x *EnergySpendReward) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

// Request to grant one or more energy amounts.
type EnergyGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Energy amounts to grant.
	Amounts map[string]int32 `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EnergyGrantRequest) Reset() {
	*x = EnergyGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyGrantRequest) ProtoMessage() {}

func (x *EnergyGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyGrantRequest.ProtoReflect.Descriptor instead.
func (*EnergyGrantRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{120}
}

func (x *EnergyGrantRequest) GetAmounts() map[string]int32 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

// A leaderboard configuration.
type LeaderboardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The leaderboard id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The leaderboard sort order.
	SortOrder string `protobuf:"bytes,2,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	// The leaderboard operator.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	// The leaderboard reset schedule.
	ResetSchedule string `protobuf:"bytes,4,opt,name=reset_schedule,json=resetSchedule,proto3" json:"reset_schedule,omitempty"`
	// Whether the leaderboard is authoritative or not.
	Authoritative bool `protobuf:"varint,5,opt,name=authoritative,proto3" json:"authoritative,omitempty"`
	// List of regional leaderboards of the leaderboard, if any.
	Regions []string `protobuf:"bytes,6,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *LeaderboardConfig) Reset() {
	*x = LeaderboardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardConfig) ProtoMessage() {}

func (x *LeaderboardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardConfig.ProtoReflect.Descriptor instead.
func (*LeaderboardConfig) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{121}
}

func (x *LeaderboardConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LeaderboardConfig) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

func (x *LeaderboardConfig) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *LeaderboardConfig) GetResetSchedule() string {
	if x != nil {
		return x.ResetSchedule
	}
	return ""
}

func (x *LeaderboardConfig) GetAuthoritative() bool {
	if x != nil {
		return x.Authoritative
	}
	return false
}

func (x *LeaderboardConfig) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

// A list of leaderboard configurations.
type LeaderboardConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of leaderboard configurations.
	LeaderboardConfigs []*LeaderboardConfig `protobuf:"bytes,1,rep,name=leaderboard_configs,json=leaderboardConfigs,proto3" json:"leaderboard_configs,omitempty"`
}

func (x *LeaderboardConfigList) Reset() {
	*x = LeaderboardConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardConfigList) ProtoMessage() {}

func (x *LeaderboardConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardConfigList.ProtoReflect.Descriptor instead.
func (*LeaderboardConfigList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{122}
}

func (x *LeaderboardConfigList) GetLeaderboardConfigs() []*LeaderboardConfig {
	if x != nil {
		return x.LeaderboardConfigs
	}
	return nil
}

// An individual set of tutorial steps.
type Tutorial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique tutorial identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The current step in the tutorial.
	Current int32 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	// The maximum step in the tutorial based on configuration.
	Max int32 `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	// The accepted state of the tutorial.
	State TutorialState `protobuf:"varint,4,opt,name=state,proto3,enum=hiro.TutorialState" json:"state,omitempty"`
	// The UNIX timestamp when the tutorial was last updated.
	UpdateTimeSec int64 `protobuf:"varint,5,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// The UNIX timestamp when the tutorial was completed, if it is completed.
	CompleteTimeSec int64 `protobuf:"varint,6,opt,name=complete_time_sec,json=completeTimeSec,proto3" json:"complete_time_sec,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,7,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Tutorial) Reset() {
	*x = Tutorial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tutorial) ProtoMessage() {}

func (x *Tutorial) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tutorial.ProtoReflect.Descriptor instead.
func (*Tutorial) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{123}
}

func (x *Tutorial) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tutorial) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Tutorial) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Tutorial) GetState() TutorialState {
	if x != nil {
		return x.State
	}
	return TutorialState_TUTORIAL_STATE_NONE
}

func (x *Tutorial) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *Tutorial) GetCompleteTimeSec() int64 {
	if x != nil {
		return x.CompleteTimeSec
	}
	return 0
}

func (x *Tutorial) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// The full tutorial statuses for a given user.
type TutorialList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All available tutorials.
	Tutorials map[string]*Tutorial `protobuf:"bytes,1,rep,name=tutorials,proto3" json:"tutorials,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TutorialList) Reset() {
	*x = TutorialList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialList) ProtoMessage() {}

func (x *TutorialList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialList.ProtoReflect.Descriptor instead.
func (*TutorialList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{124}
}

func (x *TutorialList) GetTutorials() map[string]*Tutorial {
	if x != nil {
		return x.Tutorials
	}
	return nil
}

// A request to accept a tutorial.
type TutorialAcceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tutorial to accept.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TutorialAcceptRequest) Reset() {
	*x = TutorialAcceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialAcceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialAcceptRequest) ProtoMessage() {}

func (x *TutorialAcceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialAcceptRequest.ProtoReflect.Descriptor instead.
func (*TutorialAcceptRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{125}
}

func (x *TutorialAcceptRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A request to decline a tutorial.
type TutorialDeclineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tutorial to decline.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TutorialDeclineRequest) Reset() {
	*x = TutorialDeclineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialDeclineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialDeclineRequest) ProtoMessage() {}

func (x *TutorialDeclineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialDeclineRequest.ProtoReflect.Descriptor instead.
func (*TutorialDeclineRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{126}
}

func (x *TutorialDeclineRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A request to abandon a tutorial.
type TutorialAbandonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tutorial to abandon.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TutorialAbandonRequest) Reset() {
	*x = TutorialAbandonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialAbandonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialAbandonRequest) ProtoMessage() {}

func (x *TutorialAbandonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialAbandonRequest.ProtoReflect.Descriptor instead.
func (*TutorialAbandonRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{127}
}

func (x *TutorialAbandonRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A request to update a tutorial.
type TutorialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tutorial to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The latest step that should be marked completed. All previous steps will also be marked as completed.
	Step int32 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *TutorialUpdateRequest) Reset() {
	*x = TutorialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialUpdateRequest) ProtoMessage() {}

func (x *TutorialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialUpdateRequest.ProtoReflect.Descriptor instead.
func (*TutorialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{128}
}

func (x *TutorialUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TutorialUpdateRequest) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

// A request to reset the state of one or more tutorials.
type TutorialResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tutorials to reset.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *TutorialResetRequest) Reset() {
	*x = TutorialResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialResetRequest) ProtoMessage() {}

func (x *TutorialResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialResetRequest.ProtoReflect.Descriptor instead.
func (*TutorialResetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{129}
}

func (x *TutorialResetRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// The input message when the user rates the app.
type RateAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The score given by the user. Above zero values indicate a positive review.
	Score uint32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	// The message about the reason for their score. May be blank.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RateAppRequest) Reset() {
	*x = RateAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateAppRequest) ProtoMessage() {}

func (x *RateAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateAppRequest.ProtoReflect.Descriptor instead.
func (*RateAppRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{130}
}

func (x *RateAppRequest) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RateAppRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A Team represents a group of users who play together.
type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of a team.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the user who created the team.
	CreatorId string `protobuf:"bytes,2,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// The unique name of the team.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A description for the team.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	LangTag string `protobuf:"bytes,5,opt,name=lang_tag,json=langTag,proto3" json:"lang_tag,omitempty"`
	// Additional information stored as a JSON object.
	Metadata string `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// A URL for an avatar image.
	AvatarUrl string `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// Anyone can join open groups, otherwise only admins can accept members.
	Open bool `protobuf:"varint,8,opt,name=open,proto3" json:"open,omitempty"`
	// The current count of all members in the group.
	EdgeCount int32 `protobuf:"varint,9,opt,name=edge_count,json=edgeCount,proto3" json:"edge_count,omitempty"`
	// The maximum number of members allowed.
	MaxCount int32 `protobuf:"varint,10,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// The UNIX timestamp when the group was created.
	CreateTimeSec int64 `protobuf:"varint,11,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// The UNIX timestamp when the group was last updated.
	UpdateTimeSec int64 `protobuf:"varint,12,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// The icon artwork reference ID for the team, if any.
	Icon string `protobuf:"bytes,13,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{131}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Team) GetLangTag() string {
	if x != nil {
		return x.LangTag
	}
	return ""
}

func (x *Team) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Team) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Team) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Team) GetEdgeCount() int32 {
	if x != nil {
		return x.EdgeCount
	}
	return 0
}

func (x *Team) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *Team) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *Team) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *Team) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// A request to create a team.
type TeamCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the team to be created.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the team to be created.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// True if the team is open to join by any user.
	Open bool `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"`
	// The icon artwork reference ID for the team, if any.
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	LangTag string `protobuf:"bytes,5,opt,name=lang_tag,json=langTag,proto3" json:"lang_tag,omitempty"`
	// The starting metadata passed in as part of creating the team.
	SetupMetadata string `protobuf:"bytes,6,opt,name=setup_metadata,json=setupMetadata,proto3" json:"setup_metadata,omitempty"`
}

func (x *TeamCreateRequest) Reset() {
	*x = TeamCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamCreateRequest) ProtoMessage() {}

func (x *TeamCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamCreateRequest.ProtoReflect.Descriptor instead.
func (*TeamCreateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{132}
}

func (x *TeamCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TeamCreateRequest) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *TeamCreateRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TeamCreateRequest) GetLangTag() string {
	if x != nil {
		return x.LangTag
	}
	return ""
}

func (x *TeamCreateRequest) GetSetupMetadata() string {
	if x != nil {
		return x.SetupMetadata
	}
	return ""
}

// A request to list teams which a user can join.
type TeamListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional cursor used to get the next page.
	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// The optional location filter.
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// An optional limit on how many results are returned. Defaults to 10.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TeamListRequest) Reset() {
	*x = TeamListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamListRequest) ProtoMessage() {}

func (x *TeamListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamListRequest.ProtoReflect.Descriptor instead.
func (*TeamListRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{133}
}

func (x *TeamListRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *TeamListRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TeamListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// A list of teams.
type TeamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current page of teams returned in the list.
	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	// A cursor used to get the next page.
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *TeamList) Reset() {
	*x = TeamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamList) ProtoMessage() {}

func (x *TeamList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamList.ProtoReflect.Descriptor instead.
func (*TeamList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{134}
}

func (x *TeamList) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *TeamList) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// A request to search for teams which the user wants to join.
type TeamSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The search term(s) passed in by the user.
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// An optional limit on how many results are returned. Defaults to 10.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Additionally search by language, if specified.
	LangTag string `protobuf:"bytes,3,opt,name=lang_tag,json=langTag,proto3" json:"lang_tag,omitempty"`
}

func (x *TeamSearchRequest) Reset() {
	*x = TeamSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSearchRequest) ProtoMessage() {}

func (x *TeamSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSearchRequest.ProtoReflect.Descriptor instead.
func (*TeamSearchRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{135}
}

func (x *TeamSearchRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TeamSearchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TeamSearchRequest) GetLangTag() string {
	if x != nil {
		return x.LangTag
	}
	return ""
}

// A request to write a chat message to the channel for a team the user is part of.
type TeamWriteChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the team.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The content of the chat message. Usually an escaped JSON object.
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *TeamWriteChatMessageRequest) Reset() {
	*x = TeamWriteChatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamWriteChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamWriteChatMessageRequest) ProtoMessage() {}

func (x *TeamWriteChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamWriteChatMessageRequest.ProtoReflect.Descriptor instead.
func (*TeamWriteChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{136}
}

func (x *TeamWriteChatMessageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamWriteChatMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// The unlockable cost, may relate to starting an unlock, or fully completing it.
type UnlockableCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items which will be deducted.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The currencies which will be deducted.
	Currencies map[string]int64 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UnlockableCost) Reset() {
	*x = UnlockableCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockableCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockableCost) ProtoMessage() {}

func (x *UnlockableCost) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockableCost.ProtoReflect.Descriptor instead.
func (*UnlockableCost) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{137}
}

func (x *UnlockableCost) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UnlockableCost) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

// A single unlockable object.
type Unlockable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unlockable definition ID, eg. "bronze-chest".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The instance ID.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The category the unlockable is part of.
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	// The cost to begin unlocking this particular unlockable.
	StartCost *UnlockableCost `protobuf:"bytes,4,opt,name=start_cost,json=startCost,proto3" json:"start_cost,omitempty"`
	// The cost to fully unlock this unlockable, accounting for any time already spent.
	Cost *UnlockableCost `protobuf:"bytes,5,opt,name=cost,proto3" json:"cost,omitempty"`
	// The description, if any. May be an i18n code.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The name. May be an i18n code.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// The reward already granted when the unlockable has been claimed.
	Reward *Reward `protobuf:"bytes,8,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available rewards for when the unlockable is claimed.
	AvailableRewards *AvailableRewards `protobuf:"bytes,9,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Total time this unlockable will take to unlock once activated.
	WaitTimeSec int32 `protobuf:"varint,10,opt,name=wait_time_sec,json=waitTimeSec,proto3" json:"wait_time_sec,omitempty"`
	// The UNIX timestamp when this unlockable was granted to the user.
	CreateTimeSec int64 `protobuf:"varint,11,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// The UNIX timestamp when this unlockable began unlocking, or 0 if it is not active.
	UnlockStartTimeSec int64 `protobuf:"varint,12,opt,name=unlock_start_time_sec,json=unlockStartTimeSec,proto3" json:"unlock_start_time_sec,omitempty"`
	// The UNIX timestamp when this unlockable will complete unlocking and become claimable, or 0 if it is not active.
	UnlockCompleteTimeSec int64 `protobuf:"varint,13,opt,name=unlock_complete_time_sec,json=unlockCompleteTimeSec,proto3" json:"unlock_complete_time_sec,omitempty"`
	// If the unlock process has completed (either by time elapsed or purchase) and the unlockable reward can be claimed.
	CanClaim bool `protobuf:"varint,14,opt,name=can_claim,json=canClaim,proto3" json:"can_claim,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,15,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional time that has been added to speed up the unlockable's progress, if any.
	AdvanceTimeSec int64 `protobuf:"varint,16,opt,name=advance_time_sec,json=advanceTimeSec,proto3" json:"advance_time_sec,omitempty"`
}

func (x *Unlockable) Reset() {
	*x = Unlockable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unlockable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unlockable) ProtoMessage() {}

func (x *Unlockable) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unlockable.ProtoReflect.Descriptor instead.
func (*Unlockable) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{138}
}

func (x *Unlockable) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Unlockable) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Unlockable) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Unlockable) GetStartCost() *UnlockableCost {
	if x != nil {
		return x.StartCost
	}
	return nil
}

func (x *Unlockable) GetCost() *UnlockableCost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Unlockable) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Unlockable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Unlockable) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *Unlockable) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *Unlockable) GetWaitTimeSec() int32 {
	if x != nil {
		return x.WaitTimeSec
	}
	return 0
}

func (x *Unlockable) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *Unlockable) GetUnlockStartTimeSec() int64 {
	if x != nil {
		return x.UnlockStartTimeSec
	}
	return 0
}

func (x *Unlockable) GetUnlockCompleteTimeSec() int64 {
	if x != nil {
		return x.UnlockCompleteTimeSec
	}
	return 0
}

func (x *Unlockable) GetCanClaim() bool {
	if x != nil {
		return x.CanClaim
	}
	return false
}

func (x *Unlockable) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Unlockable) GetAdvanceTimeSec() int64 {
	if x != nil {
		return x.AdvanceTimeSec
	}
	return 0
}

// The cost to purchase an additional unlockable active slot.
type UnlockableSlotCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items which will be deducted.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The currencies which will be deducted.
	Currencies map[string]int64 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UnlockableSlotCost) Reset() {
	*x = UnlockableSlotCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockableSlotCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockableSlotCost) ProtoMessage() {}

func (x *UnlockableSlotCost) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockableSlotCost.ProtoReflect.Descriptor instead.
func (*UnlockableSlotCost) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{139}
}

func (x *UnlockableSlotCost) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UnlockableSlotCost) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

// A list of unlockables currently owned by a user.
type UnlockablesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of unlockables owned by a user.
	Unlockables []*Unlockable `protobuf:"bytes,1,rep,name=unlockables,proto3" json:"unlockables,omitempty"`
	// The unlockable overflow slot.
	Overflow *Unlockable `protobuf:"bytes,2,opt,name=overflow,proto3" json:"overflow,omitempty"`
	// The total number of non-overflow slots.
	Slots int32 `protobuf:"varint,3,opt,name=slots,proto3" json:"slots,omitempty"`
	// The current number of active slots.
	ActiveSlots int32 `protobuf:"varint,4,opt,name=active_slots,json=activeSlots,proto3" json:"active_slots,omitempty"`
	// The max number of active slots the user can ever obtain.
	MaxActiveSlots int32 `protobuf:"varint,5,opt,name=max_active_slots,json=maxActiveSlots,proto3" json:"max_active_slots,omitempty"`
	// The cost to purchase the next active slot, if another is available for purchase.
	SlotCost *UnlockableSlotCost `protobuf:"bytes,6,opt,name=slot_cost,json=slotCost,proto3" json:"slot_cost,omitempty"`
	// The newly granted unlockable, if any.
	InstanceId string `protobuf:"bytes,7,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Unlockable instance IDs queued to start unlocking as soon as possible.
	QueuedUnlocks []string `protobuf:"bytes,8,rep,name=queued_unlocks,json=queuedUnlocks,proto3" json:"queued_unlocks,omitempty"`
	// Maximum unlock queue size.
	MaxQueuedUnlocks int32 `protobuf:"varint,9,opt,name=max_queued_unlocks,json=maxQueuedUnlocks,proto3" json:"max_queued_unlocks,omitempty"`
}

func (x *UnlockablesList) Reset() {
	*x = UnlockablesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockablesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockablesList) ProtoMessage() {}

func (x *UnlockablesList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockablesList.ProtoReflect.Descriptor instead.
func (*UnlockablesList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{140}
}

func (x *UnlockablesList) GetUnlockables() []*Unlockable {
	if x != nil {
		return x.Unlockables
	}
	return nil
}

func (x *UnlockablesList) GetOverflow() *Unlockable {
	if x != nil {
		return x.Overflow
	}
	return nil
}

func (x *UnlockablesList) GetSlots() int32 {
	if x != nil {
		return x.Slots
	}
	return 0
}

func (x *UnlockablesList) GetActiveSlots() int32 {
	if x != nil {
		return x.ActiveSlots
	}
	return 0
}

func (x *UnlockablesList) GetMaxActiveSlots() int32 {
	if x != nil {
		return x.MaxActiveSlots
	}
	return 0
}

func (x *UnlockablesList) GetSlotCost() *UnlockableSlotCost {
	if x != nil {
		return x.SlotCost
	}
	return nil
}

func (x *UnlockablesList) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UnlockablesList) GetQueuedUnlocks() []string {
	if x != nil {
		return x.QueuedUnlocks
	}
	return nil
}

func (x *UnlockablesList) GetMaxQueuedUnlocks() int32 {
	if x != nil {
		return x.MaxQueuedUnlocks
	}
	return 0
}

// A reward that was granted upon unlock, and a new state of all unlockables.
type UnlockablesReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated state of remaining unlockables.
	Unlockables *UnlockablesList `protobuf:"bytes,1,opt,name=unlockables,proto3" json:"unlockables,omitempty"`
	// The reward granted from the unlockable.
	Reward *Reward `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available rewards active for the unlockable.
	AvailableRewards *AvailableRewards `protobuf:"bytes,3,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
}

func (x *UnlockablesReward) Reset() {
	*x = UnlockablesReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockablesReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockablesReward) ProtoMessage() {}

func (x *UnlockablesReward) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockablesReward.ProtoReflect.Descriptor instead.
func (*UnlockablesReward) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{141}
}

func (x *UnlockablesReward) GetUnlockables() *UnlockablesList {
	if x != nil {
		return x.Unlockables
	}
	return nil
}

func (x *UnlockablesReward) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *UnlockablesReward) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

// Request body for interacting with a specific unlockable.
type UnlockablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unlockable instance ID.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *UnlockablesRequest) Reset() {
	*x = UnlockablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockablesRequest) ProtoMessage() {}

func (x *UnlockablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockablesRequest.ProtoReflect.Descriptor instead.
func (*UnlockablesRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{142}
}

func (x *UnlockablesRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Request to add a set of unlockables to the unlock queue.
type UnlockablesQueueAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unlockable instance IDs to add.
	InstanceIds []string `protobuf:"bytes,1,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *UnlockablesQueueAddRequest) Reset() {
	*x = UnlockablesQueueAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockablesQueueAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockablesQueueAddRequest) ProtoMessage() {}

func (x *UnlockablesQueueAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockablesQueueAddRequest.ProtoReflect.Descriptor instead.
func (*UnlockablesQueueAddRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{143}
}

func (x *UnlockablesQueueAddRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

// Request to remove a set of unlockables from the unlock queue.
type UnlockablesQueueRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unlockable instance IDs to remove.
	InstanceIds []string `protobuf:"bytes,1,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *UnlockablesQueueRemoveRequest) Reset() {
	*x = UnlockablesQueueRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockablesQueueRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockablesQueueRemoveRequest) ProtoMessage() {}

func (x *UnlockablesQueueRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockablesQueueRemoveRequest.ProtoReflect.Descriptor instead.
func (*UnlockablesQueueRemoveRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{144}
}

func (x *UnlockablesQueueRemoveRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

// Request to replace the unlock queue with the given set of unlockables.
type UnlockablesQueueSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unlockable instance IDs to set.
	InstanceIds []string `protobuf:"bytes,1,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *UnlockablesQueueSetRequest) Reset() {
	*x = UnlockablesQueueSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockablesQueueSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockablesQueueSetRequest) ProtoMessage() {}

func (x *UnlockablesQueueSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockablesQueueSetRequest.ProtoReflect.Descriptor instead.
func (*UnlockablesQueueSetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{145}
}

func (x *UnlockablesQueueSetRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

// A sub-achievement is an achievement which belongs as part of a parent achievement.
type SubAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category to group the sub-achievement together with others.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// The UNIX timestamp for when the sub-achievement reward was claimed, or zero if unclaimed.
	ClaimTimeSec int64 `protobuf:"varint,2,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
	// The count of the sub-achievement.
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// The UNIX timestamp for the current server time.
	CurrentTimeSec int64 `protobuf:"varint,4,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
	// A description of the sub-achievement. May be an i18n code.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The UNIX timestamp when this sub-achievement will expire. This may be before its next reset. A zero means it does not expire.
	ExpireTimeSec int64 `protobuf:"varint,6,opt,name=expire_time_sec,json=expireTimeSec,proto3" json:"expire_time_sec,omitempty"`
	// The ID of the sub-achievement.
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// The maximum count of the sub-achievement.
	MaxCount int64 `protobuf:"varint,8,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// The name of the sub-achievement. May be an i18n code.
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// The IDs which are a precondition on the progress to be made on this sub-achievement.
	PreconditionIds []string `protobuf:"bytes,10,rep,name=precondition_ids,json=preconditionIds,proto3" json:"precondition_ids,omitempty"`
	// The UNIX timestamp when this sub-achievement will reset.
	ResetTimeSec int64 `protobuf:"varint,11,opt,name=reset_time_sec,json=resetTimeSec,proto3" json:"reset_time_sec,omitempty"`
	// The outcome (rolled) reward for the achievement, if any.
	Reward *Reward `protobuf:"bytes,12,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available reward and its probabilities.
	AvailableRewards *AvailableRewards `protobuf:"bytes,13,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,14,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether the sub-achievement reward will be given automatically upon completion.
	AutoClaim bool `protobuf:"varint,15,opt,name=auto_claim,json=autoClaim,proto3" json:"auto_claim,omitempty"`
	// Whether the sub-achievement will reset after completion.
	AutoReset bool `protobuf:"varint,16,opt,name=auto_reset,json=autoReset,proto3" json:"auto_reset,omitempty"`
}

func (x *SubAchievement) Reset() {
	*x = SubAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubAchievement) ProtoMessage() {}

func (x *SubAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubAchievement.ProtoReflect.Descriptor instead.
func (*SubAchievement) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{146}
}

func (x *SubAchievement) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *SubAchievement) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

func (x *SubAchievement) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SubAchievement) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

func (x *SubAchievement) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubAchievement) GetExpireTimeSec() int64 {
	if x != nil {
		return x.ExpireTimeSec
	}
	return 0
}

func (x *SubAchievement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubAchievement) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *SubAchievement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubAchievement) GetPreconditionIds() []string {
	if x != nil {
		return x.PreconditionIds
	}
	return nil
}

func (x *SubAchievement) GetResetTimeSec() int64 {
	if x != nil {
		return x.ResetTimeSec
	}
	return 0
}

func (x *SubAchievement) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *SubAchievement) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *SubAchievement) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *SubAchievement) GetAutoClaim() bool {
	if x != nil {
		return x.AutoClaim
	}
	return false
}

func (x *SubAchievement) GetAutoReset() bool {
	if x != nil {
		return x.AutoReset
	}
	return false
}

// An achievement which is a numeric task which can be unlocked and has an optional reward.
type Achievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category to group the achievement together with others.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// The UNIX timestamp for when the achievement reward was claimed, or zero if unclaimed.
	ClaimTimeSec int64 `protobuf:"varint,2,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
	// The UNIX timestamp for when the achievement total reward was claimed, or zero if unclaimed.
	TotalClaimTimeSec int64 `protobuf:"varint,3,opt,name=total_claim_time_sec,json=totalClaimTimeSec,proto3" json:"total_claim_time_sec,omitempty"`
	// The count of the achievement.
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// The UNIX timestamp for the current server time.
	CurrentTimeSec int64 `protobuf:"varint,5,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
	// A description of the achievement. May be an i18n code.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The UNIX timestamp when this achievement will expire. This may be before its next reset. A zero means it does not expire.
	ExpireTimeSec int64 `protobuf:"varint,7,opt,name=expire_time_sec,json=expireTimeSec,proto3" json:"expire_time_sec,omitempty"`
	// The ID of the achievement.
	Id string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	// The maximum count of the achievement.
	MaxCount int64 `protobuf:"varint,9,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// The name of the achievement. May be an i18n code.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The IDs which are a precondition on the progress to be made on this achievement.
	PreconditionIds []string `protobuf:"bytes,11,rep,name=precondition_ids,json=preconditionIds,proto3" json:"precondition_ids,omitempty"`
	// The UNIX timestamp when this achievement will reset.
	ResetTimeSec int64 `protobuf:"varint,12,opt,name=reset_time_sec,json=resetTimeSec,proto3" json:"reset_time_sec,omitempty"`
	// The available reward and its probabilities.
	AvailableRewards *AvailableRewards `protobuf:"bytes,13,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// The outcome (rolled) reward for the achievement.
	Reward *Reward `protobuf:"bytes,14,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available reward and its probabilities for the total completion of the achievement, if any.
	AvailableTotalReward *AvailableRewards `protobuf:"bytes,15,opt,name=available_total_reward,json=availableTotalReward,proto3" json:"available_total_reward,omitempty"`
	// The outcome (rolled) reward for the total completion of the achievement, if any.
	TotalReward *Reward `protobuf:"bytes,16,opt,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`
	// The sub-achievements for this achievement, if any.
	SubAchievements map[string]*SubAchievement `protobuf:"bytes,17,rep,name=sub_achievements,json=subAchievements,proto3" json:"sub_achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,18,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether the achievement reward will be given automatically upon completion.
	AutoClaim bool `protobuf:"varint,19,opt,name=auto_claim,json=autoClaim,proto3" json:"auto_claim,omitempty"`
	// Whether the achievement total reward will be given automatically upon completing this and all sub-achievements.
	AutoClaimTotal bool `protobuf:"varint,20,opt,name=auto_claim_total,json=autoClaimTotal,proto3" json:"auto_claim_total,omitempty"`
	// Whether the achievement will reset after completion.
	AutoReset bool `protobuf:"varint,21,opt,name=auto_reset,json=autoReset,proto3" json:"auto_reset,omitempty"`
}

func (x *Achievement) Reset() {
	*x = Achievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement) ProtoMessage() {}

func (x *Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement.ProtoReflect.Descriptor instead.
func (*Achievement) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{147}
}

func (x *Achievement) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Achievement) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

func (x *Achievement) GetTotalClaimTimeSec() int64 {
	if x != nil {
		return x.TotalClaimTimeSec
	}
	return 0
}

func (x *Achievement) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Achievement) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

func (x *Achievement) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Achievement) GetExpireTimeSec() int64 {
	if x != nil {
		return x.ExpireTimeSec
	}
	return 0
}

func (x *Achievement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Achievement) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *Achievement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Achievement) GetPreconditionIds() []string {
	if x != nil {
		return x.PreconditionIds
	}
	return nil
}

func (x *Achievement) GetResetTimeSec() int64 {
	if x != nil {
		return x.ResetTimeSec
	}
	return 0
}

func (x *Achievement) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *Achievement) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *Achievement) GetAvailableTotalReward() *AvailableRewards {
	if x != nil {
		return x.AvailableTotalReward
	}
	return nil
}

func (x *Achievement) GetTotalReward() *Reward {
	if x != nil {
		return x.TotalReward
	}
	return nil
}

func (x *Achievement) GetSubAchievements() map[string]*SubAchievement {
	if x != nil {
		return x.SubAchievements
	}
	return nil
}

func (x *Achievement) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Achievement) GetAutoClaim() bool {
	if x != nil {
		return x.AutoClaim
	}
	return false
}

func (x *Achievement) GetAutoClaimTotal() bool {
	if x != nil {
		return x.AutoClaimTotal
	}
	return false
}

func (x *Achievement) GetAutoReset() bool {
	if x != nil {
		return x.AutoReset
	}
	return false
}

// The achievements returned by the server.
type AchievementList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The one off achievements which can be progressed or are unlocked by the user alongside all on the server.
	Achievements map[string]*Achievement `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The repeat achievements which can be progressed or are unlocked by the user alongside all on the server.
	RepeatAchievements map[string]*Achievement `protobuf:"bytes,2,rep,name=repeat_achievements,json=repeatAchievements,proto3" json:"repeat_achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AchievementList) Reset() {
	*x = AchievementList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementList) ProtoMessage() {}

func (x *AchievementList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementList.ProtoReflect.Descriptor instead.
func (*AchievementList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{148}
}

func (x *AchievementList) GetAchievements() map[string]*Achievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *AchievementList) GetRepeatAchievements() map[string]*Achievement {
	if x != nil {
		return x.RepeatAchievements
	}
	return nil
}

// Claim rewards with one or more achievement on the server.
type AchievementsClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of achievement IDs to claim.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// Whether or not to claim the total reward as well, if available.
	ClaimTotalReward bool `protobuf:"varint,2,opt,name=claim_total_reward,json=claimTotalReward,proto3" json:"claim_total_reward,omitempty"`
}

func (x *AchievementsClaimRequest) Reset() {
	*x = AchievementsClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsClaimRequest) ProtoMessage() {}

func (x *AchievementsClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsClaimRequest.ProtoReflect.Descriptor instead.
func (*AchievementsClaimRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{149}
}

func (x *AchievementsClaimRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *AchievementsClaimRequest) GetClaimTotalReward() bool {
	if x != nil {
		return x.ClaimTotalReward
	}
	return false
}

// Get all achievements for the user alongside all on the server.
type AchievementsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AchievementsGetRequest) Reset() {
	*x = AchievementsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsGetRequest) ProtoMessage() {}

func (x *AchievementsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsGetRequest.ProtoReflect.Descriptor instead.
func (*AchievementsGetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{150}
}

// A response when an achievements update is acknowledged by the server.
type AchievementsUpdateAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The one off achievements which can be progressed or are unlocked by the user.
	Achievements map[string]*Achievement `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The repeat achievements which can be progressed or are unlocked by the user.
	RepeatAchievements map[string]*Achievement `protobuf:"bytes,2,rep,name=repeat_achievements,json=repeatAchievements,proto3" json:"repeat_achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AchievementsUpdateAck) Reset() {
	*x = AchievementsUpdateAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsUpdateAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsUpdateAck) ProtoMessage() {}

func (x *AchievementsUpdateAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsUpdateAck.ProtoReflect.Descriptor instead.
func (*AchievementsUpdateAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{151}
}

func (x *AchievementsUpdateAck) GetAchievements() map[string]*Achievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *AchievementsUpdateAck) GetRepeatAchievements() map[string]*Achievement {
	if x != nil {
		return x.RepeatAchievements
	}
	return nil
}

// Update progress on one or more achievements on the server.
type AchievementsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of achievement IDs to progress.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// The amount of progress to increment on the achievements.
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Achievements with different amounts.
	Achievements map[string]int64 `protobuf:"bytes,3,rep,name=achievements,proto3" json:"achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AchievementsUpdateRequest) Reset() {
	*x = AchievementsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsUpdateRequest) ProtoMessage() {}

func (x *AchievementsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsUpdateRequest.ProtoReflect.Descriptor instead.
func (*AchievementsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{152}
}

func (x *AchievementsUpdateRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *AchievementsUpdateRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AchievementsUpdateRequest) GetAchievements() map[string]int64 {
	if x != nil {
		return x.Achievements
	}
	return nil
}

// Represents an available reward based on the progress of a streak.
type StreakAvailableReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum streak progress count required for this reward, inclusive.
	CountMin int64 `protobuf:"varint,1,opt,name=count_min,json=countMin,proto3" json:"count_min,omitempty"`
	// Maximum streak progress count required for this reward, inclusive.
	CountMax int64 `protobuf:"varint,2,opt,name=count_max,json=countMax,proto3" json:"count_max,omitempty"`
	// Available reward contents.
	Reward *AvailableRewards `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *StreakAvailableReward) Reset() {
	*x = StreakAvailableReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreakAvailableReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreakAvailableReward) ProtoMessage() {}

func (x *StreakAvailableReward) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreakAvailableReward.ProtoReflect.Descriptor instead.
func (*StreakAvailableReward) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{153}
}

func (x *StreakAvailableReward) GetCountMin() int64 {
	if x != nil {
		return x.CountMin
	}
	return 0
}

func (x *StreakAvailableReward) GetCountMax() int64 {
	if x != nil {
		return x.CountMax
	}
	return 0
}

func (x *StreakAvailableReward) GetReward() *AvailableRewards {
	if x != nil {
		return x.Reward
	}
	return nil
}

// A single claimed streak reward.
type StreakReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum streak progress count required for this reward, inclusive.
	CountMin int64 `protobuf:"varint,1,opt,name=count_min,json=countMin,proto3" json:"count_min,omitempty"`
	// Maximum streak progress count required for this reward, inclusive.
	CountMax int64 `protobuf:"varint,2,opt,name=count_max,json=countMax,proto3" json:"count_max,omitempty"`
	// Reward that was actually granted.
	Reward *Reward `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when this reward was claimed.
	ClaimTimeSec int64 `protobuf:"varint,4,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
}

func (x *StreakReward) Reset() {
	*x = StreakReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreakReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreakReward) ProtoMessage() {}

func (x *StreakReward) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreakReward.ProtoReflect.Descriptor instead.
func (*StreakReward) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{154}
}

func (x *StreakReward) GetCountMin() int64 {
	if x != nil {
		return x.CountMin
	}
	return 0
}

func (x *StreakReward) GetCountMax() int64 {
	if x != nil {
		return x.CountMax
	}
	return 0
}

func (x *StreakReward) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *StreakReward) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

// An individual streak, along with its status and progress if any.
type Streak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Display name for this streak.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A user-facing description for this streak.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Current overall progress count.
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// Maximum allowed overall progress count.
	MaxCount int64 `protobuf:"varint,5,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// Progress count submitted during this reset.
	CountCurrentReset int64 `protobuf:"varint,6,opt,name=count_current_reset,json=countCurrentReset,proto3" json:"count_current_reset,omitempty"`
	// Maximum progress count allowed during any single reset.
	MaxCountCurrentReset int64 `protobuf:"varint,7,opt,name=max_count_current_reset,json=maxCountCurrentReset,proto3" json:"max_count_current_reset,omitempty"`
	// How much overall count is lost per idle reset.
	IdleCountDecayReset int64 `protobuf:"varint,8,opt,name=idle_count_decay_reset,json=idleCountDecayReset,proto3" json:"idle_count_decay_reset,omitempty"`
	// How much overall count can be lost total in any contiguous idle period.
	MaxIdleCountDecay int64 `protobuf:"varint,9,opt,name=max_idle_count_decay,json=maxIdleCountDecay,proto3" json:"max_idle_count_decay,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak's last reset period was.
	PrevResetTimeSec int64 `protobuf:"varint,10,opt,name=prev_reset_time_sec,json=prevResetTimeSec,proto3" json:"prev_reset_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak's next reset period is.
	ResetTimeSec int64 `protobuf:"varint,11,opt,name=reset_time_sec,json=resetTimeSec,proto3" json:"reset_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak was first registered for this user.
	CreateTimeSec int64 `protobuf:"varint,12,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak was last updated.
	UpdateTimeSec int64 `protobuf:"varint,13,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak was last claimed.
	ClaimTimeSec int64 `protobuf:"varint,14,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak becomes available for use.
	StartTimeSec int64 `protobuf:"varint,15,opt,name=start_time_sec,json=startTimeSec,proto3" json:"start_time_sec,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak is no longer available for use.
	EndTimeSec int64 `protobuf:"varint,16,opt,name=end_time_sec,json=endTimeSec,proto3" json:"end_time_sec,omitempty"`
	// All rewards configured for this streak.
	Rewards []*StreakAvailableReward `protobuf:"bytes,17,rep,name=rewards,proto3" json:"rewards,omitempty"`
	// Rewards currently available to claim for this streak.
	AvailableRewards []*StreakAvailableReward `protobuf:"bytes,18,rep,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Claimed rewards.
	ClaimedRewards []*StreakReward `protobuf:"bytes,19,rep,name=claimed_rewards,json=claimedRewards,proto3" json:"claimed_rewards,omitempty"`
	// Flag indicating if this streak can currently be claimed to obtain some rewards.
	CanClaim bool `protobuf:"varint,20,opt,name=can_claim,json=canClaim,proto3" json:"can_claim,omitempty"`
	// Flag indicating if submitting a count update is allowed.
	CanUpdate bool `protobuf:"varint,21,opt,name=can_update,json=canUpdate,proto3" json:"can_update,omitempty"`
	// Flag indicating if resetting the streak is allowed.
	CanReset bool `protobuf:"varint,22,opt,name=can_reset,json=canReset,proto3" json:"can_reset,omitempty"`
}

func (x *Streak) Reset() {
	*x = Streak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Streak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Streak) ProtoMessage() {}

func (x *Streak) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Streak.ProtoReflect.Descriptor instead.
func (*Streak) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{155}
}

func (x *Streak) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Streak) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Streak) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Streak) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Streak) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *Streak) GetCountCurrentReset() int64 {
	if x != nil {
		return x.CountCurrentReset
	}
	return 0
}

func (x *Streak) GetMaxCountCurrentReset() int64 {
	if x != nil {
		return x.MaxCountCurrentReset
	}
	return 0
}

func (x *Streak) GetIdleCountDecayReset() int64 {
	if x != nil {
		return x.IdleCountDecayReset
	}
	return 0
}

func (x *Streak) GetMaxIdleCountDecay() int64 {
	if x != nil {
		return x.MaxIdleCountDecay
	}
	return 0
}

func (x *Streak) GetPrevResetTimeSec() int64 {
	if x != nil {
		return x.PrevResetTimeSec
	}
	return 0
}

func (x *Streak) GetResetTimeSec() int64 {
	if x != nil {
		return x.ResetTimeSec
	}
	return 0
}

func (x *Streak) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *Streak) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *Streak) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

func (x *Streak) GetStartTimeSec() int64 {
	if x != nil {
		return x.StartTimeSec
	}
	return 0
}

func (x *Streak) GetEndTimeSec() int64 {
	if x != nil {
		return x.EndTimeSec
	}
	return 0
}

func (x *Streak) GetRewards() []*StreakAvailableReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *Streak) GetAvailableRewards() []*StreakAvailableReward {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *Streak) GetClaimedRewards() []*StreakReward {
	if x != nil {
		return x.ClaimedRewards
	}
	return nil
}

func (x *Streak) GetCanClaim() bool {
	if x != nil {
		return x.CanClaim
	}
	return false
}

func (x *Streak) GetCanUpdate() bool {
	if x != nil {
		return x.CanUpdate
	}
	return false
}

func (x *Streak) GetCanReset() bool {
	if x != nil {
		return x.CanReset
	}
	return false
}

// A list of all streaks for a given user.
type StreaksList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All available streaks for the caller.
	Streaks map[string]*Streak `protobuf:"bytes,1,rep,name=streaks,proto3" json:"streaks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StreaksList) Reset() {
	*x = StreaksList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreaksList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreaksList) ProtoMessage() {}

func (x *StreaksList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreaksList.ProtoReflect.Descriptor instead.
func (*StreaksList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{156}
}

func (x *StreaksList) GetStreaks() map[string]*Streak {
	if x != nil {
		return x.Streaks
	}
	return nil
}

// Request to update one or more streaks with new progress.
type StreaksUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Update one or more streaks by identifier.
	Updates map[string]int64 `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StreaksUpdateRequest) Reset() {
	*x = StreaksUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreaksUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreaksUpdateRequest) ProtoMessage() {}

func (x *StreaksUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreaksUpdateRequest.ProtoReflect.Descriptor instead.
func (*StreaksUpdateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{157}
}

func (x *StreaksUpdateRequest) GetUpdates() map[string]int64 {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Request to claim rewards for one or more streaks.
type StreaksClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of streak identifiers to claim.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *StreaksClaimRequest) Reset() {
	*x = StreaksClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreaksClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreaksClaimRequest) ProtoMessage() {}

func (x *StreaksClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreaksClaimRequest.ProtoReflect.Descriptor instead.
func (*StreaksClaimRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{158}
}

func (x *StreaksClaimRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Request to fully reset the progress of one or more streaks.
type StreaksResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of streak identifiers to reset.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *StreaksResetRequest) Reset() {
	*x = StreaksResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreaksResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreaksResetRequest) ProtoMessage() {}

func (x *StreaksResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreaksResetRequest.ProtoReflect.Descriptor instead.
func (*StreaksResetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{159}
}

func (x *StreaksResetRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Sync operation for a single inventory item.
type SyncInventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Item identifier from config mapping.
	ItemId string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// Number of items to add or remove.
	Delta int64 `protobuf:"varint,2,opt,name=delta,proto3" json:"delta,omitempty"`
	// Item properties with string values.
	StringProperties map[string]string `protobuf:"bytes,3,rep,name=string_properties,json=stringProperties,proto3" json:"string_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Item properties with numeric values.
	NumericProperties map[string]float64 `protobuf:"bytes,4,rep,name=numeric_properties,json=numericProperties,proto3" json:"numeric_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *SyncInventoryItem) Reset() {
	*x = SyncInventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventoryItem) ProtoMessage() {}

func (x *SyncInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventoryItem.ProtoReflect.Descriptor instead.
func (*SyncInventoryItem) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{160}
}

func (x *SyncInventoryItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *SyncInventoryItem) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *SyncInventoryItem) GetStringProperties() map[string]string {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

func (x *SyncInventoryItem) GetNumericProperties() map[string]float64 {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

// Input for an offline state sync operation for the inventory system.
type SyncInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of instance IDs to update operation data.
	Items map[string]*SyncInventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SyncInventory) Reset() {
	*x = SyncInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventory) ProtoMessage() {}

func (x *SyncInventory) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventory.ProtoReflect.Descriptor instead.
func (*SyncInventory) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{161}
}

func (x *SyncInventory) GetItems() map[string]*SyncInventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Input for an offline state sync operation for the economy system.
type SyncEconomy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currencies deltas.
	Currencies map[string]int64 `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Economy modifiers to add.
	Modifiers []*ActiveRewardModifier `protobuf:"bytes,2,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
}

func (x *SyncEconomy) Reset() {
	*x = SyncEconomy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncEconomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncEconomy) ProtoMessage() {}

func (x *SyncEconomy) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncEconomy.ProtoReflect.Descriptor instead.
func (*SyncEconomy) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{162}
}

func (x *SyncEconomy) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *SyncEconomy) GetModifiers() []*ActiveRewardModifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

// Sync operation for a single achievement.
type SyncAchievementsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Count to add.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Time when the achievement first recorded progress.
	CreateTimeSec int64 `protobuf:"varint,2,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// Time when the achievement update was generated on the client.
	UpdateTimeSec int64 `protobuf:"varint,3,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// Claim time, if claimed offline.
	ClaimTimeSec int64 `protobuf:"varint,4,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
	// Total claim time, if claimed offline.
	TotalClaimTimeSec int64 `protobuf:"varint,5,opt,name=total_claim_time_sec,json=totalClaimTimeSec,proto3" json:"total_claim_time_sec,omitempty"`
}

func (x *SyncAchievementsUpdate) Reset() {
	*x = SyncAchievementsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAchievementsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAchievementsUpdate) ProtoMessage() {}

func (x *SyncAchievementsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAchievementsUpdate.ProtoReflect.Descriptor instead.
func (*SyncAchievementsUpdate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{163}
}

func (x *SyncAchievementsUpdate) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SyncAchievementsUpdate) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *SyncAchievementsUpdate) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *SyncAchievementsUpdate) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

func (x *SyncAchievementsUpdate) GetTotalClaimTimeSec() int64 {
	if x != nil {
		return x.TotalClaimTimeSec
	}
	return 0
}

// Input for an offline state sync operation for the achievements system.
type SyncAchievements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Achievement updates and associated metadata.
	Achievements map[string]*SyncAchievementsUpdate `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SyncAchievements) Reset() {
	*x = SyncAchievements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAchievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAchievements) ProtoMessage() {}

func (x *SyncAchievements) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAchievements.ProtoReflect.Descriptor instead.
func (*SyncAchievements) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{164}
}

func (x *SyncAchievements) GetAchievements() map[string]*SyncAchievementsUpdate {
	if x != nil {
		return x.Achievements
	}
	return nil
}

// Full state (not delta) for an energy.
type SyncEnergyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current count.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Time when the energy started refilling.
	RefillStartTimeSec int64 `protobuf:"varint,2,opt,name=refill_start_time_sec,json=refillStartTimeSec,proto3" json:"refill_start_time_sec,omitempty"`
}

func (x *SyncEnergyState) Reset() {
	*x = SyncEnergyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncEnergyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncEnergyState) ProtoMessage() {}

func (x *SyncEnergyState) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncEnergyState.ProtoReflect.Descriptor instead.
func (*SyncEnergyState) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{165}
}

func (x *SyncEnergyState) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SyncEnergyState) GetRefillStartTimeSec() int64 {
	if x != nil {
		return x.RefillStartTimeSec
	}
	return 0
}

// Input for an offline state sync operation for the energy system.
type SyncEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Energies and associated full sync data.
	Energies map[string]*SyncEnergyState `protobuf:"bytes,1,rep,name=energies,proto3" json:"energies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Energy modifiers to add.
	Modifiers []*EnergyModifier `protobuf:"bytes,2,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
}

func (x *SyncEnergy) Reset() {
	*x = SyncEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncEnergy) ProtoMessage() {}

func (x *SyncEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncEnergy.ProtoReflect.Descriptor instead.
func (*SyncEnergy) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{166}
}

func (x *SyncEnergy) GetEnergies() map[string]*SyncEnergyState {
	if x != nil {
		return x.Energies
	}
	return nil
}

func (x *SyncEnergy) GetModifiers() []*EnergyModifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

// Single event leaderboard update.
type SyncEventLeaderboardUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Score.
	Score int64 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	// Subscore.
	Subscore int64 `protobuf:"varint,2,opt,name=subscore,proto3" json:"subscore,omitempty"`
	// Time when the score was generated on the client.
	UpdateTimeSec int64 `protobuf:"varint,3,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
}

func (x *SyncEventLeaderboardUpdate) Reset() {
	*x = SyncEventLeaderboardUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncEventLeaderboardUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncEventLeaderboardUpdate) ProtoMessage() {}

func (x *SyncEventLeaderboardUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncEventLeaderboardUpdate.ProtoReflect.Descriptor instead.
func (*SyncEventLeaderboardUpdate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{167}
}

func (x *SyncEventLeaderboardUpdate) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SyncEventLeaderboardUpdate) GetSubscore() int64 {
	if x != nil {
		return x.Subscore
	}
	return 0
}

func (x *SyncEventLeaderboardUpdate) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

// Input for an offline state sync of event leaderboard updates.
type SyncEventLeaderboards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updates for various event leaderboards, keyed by event leaderboard identifier.
	EventLeaderboards map[string]*SyncEventLeaderboardUpdate `protobuf:"bytes,1,rep,name=event_leaderboards,json=eventLeaderboards,proto3" json:"event_leaderboards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SyncEventLeaderboards) Reset() {
	*x = SyncEventLeaderboards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncEventLeaderboards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncEventLeaderboards) ProtoMessage() {}

func (x *SyncEventLeaderboards) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncEventLeaderboards.ProtoReflect.Descriptor instead.
func (*SyncEventLeaderboards) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{168}
}

func (x *SyncEventLeaderboards) GetEventLeaderboards() map[string]*SyncEventLeaderboardUpdate {
	if x != nil {
		return x.EventLeaderboards
	}
	return nil
}

// Single progression update.
type SyncProgressionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The counts to set.
	Counts map[string]int64 `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Time when the progression was first updated on the client, if new.
	CreateTimeSec int64 `protobuf:"varint,2,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// Time when the progression update was generated on the client.
	UpdateTimeSec int64 `protobuf:"varint,3,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// Cost paid to unlock the progression.
	Cost *ProgressionCost `protobuf:"bytes,4,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *SyncProgressionUpdate) Reset() {
	*x = SyncProgressionUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProgressionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProgressionUpdate) ProtoMessage() {}

func (x *SyncProgressionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProgressionUpdate.ProtoReflect.Descriptor instead.
func (*SyncProgressionUpdate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{169}
}

func (x *SyncProgressionUpdate) GetCounts() map[string]int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *SyncProgressionUpdate) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *SyncProgressionUpdate) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *SyncProgressionUpdate) GetCost() *ProgressionCost {
	if x != nil {
		return x.Cost
	}
	return nil
}

// Input for an offline state sync of progressions updates.
type SyncProgressions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updates for various progressions, keyed by progression identifier.
	Progressions map[string]*SyncProgressionUpdate `protobuf:"bytes,1,rep,name=progressions,proto3" json:"progressions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SyncProgressions) Reset() {
	*x = SyncProgressions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProgressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProgressions) ProtoMessage() {}

func (x *SyncProgressions) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProgressions.ProtoReflect.Descriptor instead.
func (*SyncProgressions) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{170}
}

func (x *SyncProgressions) GetProgressions() map[string]*SyncProgressionUpdate {
	if x != nil {
		return x.Progressions
	}
	return nil
}

// Input for an offline state sync of tutorials updates.
type SyncTutorials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accept list.
	Accepts []string `protobuf:"bytes,1,rep,name=accepts,proto3" json:"accepts,omitempty"`
	// Decline list.
	Declines []string `protobuf:"bytes,2,rep,name=declines,proto3" json:"declines,omitempty"`
	// Abandon list.
	Abandons []string `protobuf:"bytes,3,rep,name=abandons,proto3" json:"abandons,omitempty"`
	// Updates to tutorial steps. Implicitly counts as accepting these tutorials, if not accepted already.
	Updates map[string]int64 `protobuf:"bytes,4,rep,name=updates,proto3" json:"updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SyncTutorials) Reset() {
	*x = SyncTutorials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTutorials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTutorials) ProtoMessage() {}

func (x *SyncTutorials) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTutorials.ProtoReflect.Descriptor instead.
func (*SyncTutorials) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{171}
}

func (x *SyncTutorials) GetAccepts() []string {
	if x != nil {
		return x.Accepts
	}
	return nil
}

func (x *SyncTutorials) GetDeclines() []string {
	if x != nil {
		return x.Declines
	}
	return nil
}

func (x *SyncTutorials) GetAbandons() []string {
	if x != nil {
		return x.Abandons
	}
	return nil
}

func (x *SyncTutorials) GetUpdates() map[string]int64 {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Single unlockable update, either grant or unlock start.
type SyncUnlockableUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unlockable identifier from config.
	UnlockableId string `protobuf:"bytes,1,opt,name=unlockable_id,json=unlockableId,proto3" json:"unlockable_id,omitempty"`
	// Time this unlockabled was granted.
	CreateTimeSec int64 `protobuf:"varint,2,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// Unlock start time, if any.
	StartTimeSec int64 `protobuf:"varint,3,opt,name=start_time_sec,json=startTimeSec,proto3" json:"start_time_sec,omitempty"`
	// Unlock completion time, if any.
	UnlockTimeSec int64 `protobuf:"varint,4,opt,name=unlock_time_sec,json=unlockTimeSec,proto3" json:"unlock_time_sec,omitempty"`
}

func (x *SyncUnlockableUpdate) Reset() {
	*x = SyncUnlockableUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncUnlockableUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncUnlockableUpdate) ProtoMessage() {}

func (x *SyncUnlockableUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncUnlockableUpdate.ProtoReflect.Descriptor instead.
func (*SyncUnlockableUpdate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{172}
}

func (x *SyncUnlockableUpdate) GetUnlockableId() string {
	if x != nil {
		return x.UnlockableId
	}
	return ""
}

func (x *SyncUnlockableUpdate) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *SyncUnlockableUpdate) GetStartTimeSec() int64 {
	if x != nil {
		return x.StartTimeSec
	}
	return 0
}

func (x *SyncUnlockableUpdate) GetUnlockTimeSec() int64 {
	if x != nil {
		return x.UnlockTimeSec
	}
	return 0
}

// Input for an offline state sync of unlockables updates.
type SyncUnlockables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unlockable instance IDs to remove.
	Removes []string `protobuf:"bytes,1,rep,name=removes,proto3" json:"removes,omitempty"`
	// Unlockable updates keyed by instance identifier, such as new grants or unlock starts.
	Updates map[string]*SyncUnlockableUpdate `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SyncUnlockables) Reset() {
	*x = SyncUnlockables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncUnlockables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncUnlockables) ProtoMessage() {}

func (x *SyncUnlockables) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncUnlockables.ProtoReflect.Descriptor instead.
func (*SyncUnlockables) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{173}
}

func (x *SyncUnlockables) GetRemoves() []string {
	if x != nil {
		return x.Removes
	}
	return nil
}

func (x *SyncUnlockables) GetUpdates() map[string]*SyncUnlockableUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Single streak state update.
type SyncStreakUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current progress count for this streak.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Progress count for the current reset.
	CountCurrentReset int64 `protobuf:"varint,2,opt,name=count_current_reset,json=countCurrentReset,proto3" json:"count_current_reset,omitempty"`
	// Last count that was claimed.
	ClaimCount int64 `protobuf:"varint,3,opt,name=claim_count,json=claimCount,proto3" json:"claim_count,omitempty"`
	// When updates for this streak were first recorded.
	CreateTimeSec int64 `protobuf:"varint,4,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// When an update for this streak was most recently recorded.
	UpdateTimeSec int64 `protobuf:"varint,5,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// When the last claim for this streak was.
	ClaimTimeSec int64 `protobuf:"varint,6,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
	// Record of rewards that have been claimed.
	ClaimedRewards []*StreakReward `protobuf:"bytes,7,rep,name=claimed_rewards,json=claimedRewards,proto3" json:"claimed_rewards,omitempty"`
}

func (x *SyncStreakUpdate) Reset() {
	*x = SyncStreakUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStreakUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStreakUpdate) ProtoMessage() {}

func (x *SyncStreakUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStreakUpdate.ProtoReflect.Descriptor instead.
func (*SyncStreakUpdate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{174}
}

func (x *SyncStreakUpdate) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SyncStreakUpdate) GetCountCurrentReset() int64 {
	if x != nil {
		return x.CountCurrentReset
	}
	return 0
}

func (x *SyncStreakUpdate) GetClaimCount() int64 {
	if x != nil {
		return x.ClaimCount
	}
	return 0
}

func (x *SyncStreakUpdate) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *SyncStreakUpdate) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *SyncStreakUpdate) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

func (x *SyncStreakUpdate) GetClaimedRewards() []*StreakReward {
	if x != nil {
		return x.ClaimedRewards
	}
	return nil
}

// Input for an offline state sync of streaks updates.
type SyncStreaks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Streak identifiers to reset.
	Resets []string `protobuf:"bytes,1,rep,name=resets,proto3" json:"resets,omitempty"`
	// Streak state updates keyed by streak identifier.
	Updates map[string]*SyncStreakUpdate `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SyncStreaks) Reset() {
	*x = SyncStreaks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStreaks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStreaks) ProtoMessage() {}

func (x *SyncStreaks) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStreaks.ProtoReflect.Descriptor instead.
func (*SyncStreaks) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{175}
}

func (x *SyncStreaks) GetResets() []string {
	if x != nil {
		return x.Resets
	}
	return nil
}

func (x *SyncStreaks) GetUpdates() map[string]*SyncStreakUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Input for an offline state sync operation.
type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inventory.
	Inventory *SyncInventory `protobuf:"bytes,1,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Economy.
	Economy *SyncEconomy `protobuf:"bytes,2,opt,name=economy,proto3" json:"economy,omitempty"`
	// Achievements.
	Achievements *SyncAchievements `protobuf:"bytes,3,opt,name=achievements,proto3" json:"achievements,omitempty"`
	// Energy.
	Energy *SyncEnergy `protobuf:"bytes,4,opt,name=energy,proto3" json:"energy,omitempty"`
	// Event leaderboards.
	EventLeaderboards *SyncEventLeaderboards `protobuf:"bytes,5,opt,name=event_leaderboards,json=eventLeaderboards,proto3" json:"event_leaderboards,omitempty"`
	// Progressions.
	Progressions *SyncProgressions `protobuf:"bytes,6,opt,name=progressions,proto3" json:"progressions,omitempty"`
	// Stats. Message reused from standard synchronous stats updates.
	Stats *StatUpdateRequest `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	// Tutorials.
	Tutorials *SyncTutorials `protobuf:"bytes,8,opt,name=tutorials,proto3" json:"tutorials,omitempty"`
	// Unlockables.
	Unlockables *SyncUnlockables `protobuf:"bytes,9,opt,name=unlockables,proto3" json:"unlockables,omitempty"`
	// Streaks.
	Streaks *SyncStreaks `protobuf:"bytes,10,opt,name=streaks,proto3" json:"streaks,omitempty"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{176}
}

func (x *SyncRequest) GetInventory() *SyncInventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *SyncRequest) GetEconomy() *SyncEconomy {
	if x != nil {
		return x.Economy
	}
	return nil
}

func (x *SyncRequest) GetAchievements() *SyncAchievements {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *SyncRequest) GetEnergy() *SyncEnergy {
	if x != nil {
		return x.Energy
	}
	return nil
}

func (x *SyncRequest) GetEventLeaderboards() *SyncEventLeaderboards {
	if x != nil {
		return x.EventLeaderboards
	}
	return nil
}

func (x *SyncRequest) GetProgressions() *SyncProgressions {
	if x != nil {
		return x.Progressions
	}
	return nil
}

func (x *SyncRequest) GetStats() *StatUpdateRequest {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *SyncRequest) GetTutorials() *SyncTutorials {
	if x != nil {
		return x.Tutorials
	}
	return nil
}

func (x *SyncRequest) GetUnlockables() *SyncUnlockables {
	if x != nil {
		return x.Unlockables
	}
	return nil
}

func (x *SyncRequest) GetStreaks() *SyncStreaks {
	if x != nil {
		return x.Streaks
	}
	return nil
}

// Resulting updates after an offline state sync operation.
// Fields are only populated if the corresponding updated was requested via the sync.
type SyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated wallet data, if any.
	Wallet map[string]int64 `protobuf:"bytes,1,rep,name=wallet,proto3" json:"wallet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Inventory.
	Inventory *Inventory `protobuf:"bytes,2,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Achievements.
	Achievements *AchievementList `protobuf:"bytes,3,opt,name=achievements,proto3" json:"achievements,omitempty"`
	// Energies.
	Energy *EnergyList `protobuf:"bytes,4,opt,name=energy,proto3" json:"energy,omitempty"`
	// Event leaderboards.
	EventLeaderboards []*EventLeaderboard `protobuf:"bytes,5,rep,name=event_leaderboards,json=eventLeaderboards,proto3" json:"event_leaderboards,omitempty"`
	// Progressions.
	Progressions *ProgressionList `protobuf:"bytes,6,opt,name=progressions,proto3" json:"progressions,omitempty"`
	// Stats.
	Stats *StatList `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	// Tutorials.
	Tutorials *TutorialList `protobuf:"bytes,8,opt,name=tutorials,proto3" json:"tutorials,omitempty"`
	// Unlockables.
	Unlockables *UnlockablesList `protobuf:"bytes,9,opt,name=unlockables,proto3" json:"unlockables,omitempty"`
	// The list of active reward modifiers.
	ActiveRewardModifiers []*ActiveRewardModifier `protobuf:"bytes,10,rep,name=active_reward_modifiers,json=activeRewardModifiers,proto3" json:"active_reward_modifiers,omitempty"`
	// Current server time.
	CurrentTimeSec int64 `protobuf:"varint,11,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
	// Streaks.
	Streaks *StreaksList `protobuf:"bytes,12,opt,name=streaks,proto3" json:"streaks,omitempty"`
}

func (x *SyncResponse) Reset() {
	*x = SyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResponse) ProtoMessage() {}

func (x *SyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResponse.ProtoReflect.Descriptor instead.
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{177}
}

func (x *SyncResponse) GetWallet() map[string]int64 {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *SyncResponse) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *SyncResponse) GetAchievements() *AchievementList {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *SyncResponse) GetEnergy() *EnergyList {
	if x != nil {
		return x.Energy
	}
	return nil
}

func (x *SyncResponse) GetEventLeaderboards() []*EventLeaderboard {
	if x != nil {
		return x.EventLeaderboards
	}
	return nil
}

func (x *SyncResponse) GetProgressions() *ProgressionList {
	if x != nil {
		return x.Progressions
	}
	return nil
}

func (x *SyncResponse) GetStats() *StatList {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *SyncResponse) GetTutorials() *TutorialList {
	if x != nil {
		return x.Tutorials
	}
	return nil
}

func (x *SyncResponse) GetUnlockables() *UnlockablesList {
	if x != nil {
		return x.Unlockables
	}
	return nil
}

func (x *SyncResponse) GetActiveRewardModifiers() []*ActiveRewardModifier {
	if x != nil {
		return x.ActiveRewardModifiers
	}
	return nil
}

func (x *SyncResponse) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

func (x *SyncResponse) GetStreaks() *StreaksList {
	if x != nil {
		return x.Streaks
	}
	return nil
}

var file_hiro_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         1000,
		Name:          "hiro.input",
		Tag:           "bytes,1000,opt,name=input",
		Filename:      "hiro.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         1001,
		Name:          "hiro.output",
		Tag:           "bytes,1001,opt,name=output",
		Filename:      "hiro.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// The input proto message to the Nakama RPC.
	//
	// optional string input = 1000;
	E_Input = &file_hiro_proto_extTypes[0]
	// The output proto message of the Nakama RPC.
	//
	// optional string output = 1001;
	E_Output = &file_hiro_proto_extTypes[1]
)

var File_hiro_proto protoreflect.FileDescriptor

var file_hiro_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x68, 0x69,
	0x72, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x45,
	0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec,
	0x0a, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x29, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x69, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x49, 0x0a,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x4d, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x4c,
	0x0a, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0a,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x52, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x52,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x78,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x61, 0x78, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x4d, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x78,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x69, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3c, 0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01,
	0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x36, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0xc9, 0x04, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x60, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x49, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x75, 0x6e,
	0x6d, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x12, 0x75, 0x6e,
	0x6d, 0x65, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0,
	0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x39, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x1a, 0x52, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x52,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2c, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xa9, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x17,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x6c, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x69, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22,
	0x84, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x45, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46,
	0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x4f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x77, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x54, 0x77, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6f, 0x73, 0x12, 0x4b, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x03, 0x0a, 0x13, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x22, 0xb4, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x22, 0xb6, 0x05, 0x0a, 0x06,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x12, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x52, 0x0a, 0x10, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x52,
	0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x3e, 0x0a, 0x24,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf8, 0x01, 0x0a,
	0x1e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x4b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a,
	0x66, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x03, 0x0a, 0x14, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60,
	0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x5d, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x5d, 0x0a, 0x16, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69,
	0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x17, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x48, 0x0a, 0x18, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x46, 0x0a, 0x16, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x22, 0xca, 0x01, 0x0a, 0x1e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x22, 0xfb, 0x05,
	0x0a, 0x18, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65,
	0x73, 0x12, 0x4f, 0x0a, 0x10, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x54, 0x0a, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x59, 0x0a, 0x0d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x10,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x3e, 0x0a, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64,
	0x12, 0x3a, 0x0a, 0x08, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x08, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x22, 0x5c, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x22, 0x8a, 0x05, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x43, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x1a, 0x4f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x40, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x22, 0xd0, 0x03, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x22, 0x2e, 0x0a, 0x1c, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x1c, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x1b, 0x49, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x22, 0x32, 0x0a, 0x1c, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x25, 0x0a, 0x13,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x47, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd6, 0x02, 0x0a,
	0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6e, 0x75, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b,
	0x4d, 0x61, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x6e, 0x12, 0x43,
	0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x6c,
	0x65, 0x22, 0xc6, 0x0a, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x65, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x15, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x1a, 0x61, 0x0a, 0x10,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x69, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x60, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x20, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xdd, 0x01, 0x0a, 0x28, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61,
	0x78, 0x22, 0x4b, 0x0a, 0x1a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb9,
	0x06, 0x0a, 0x0f, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x19, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x39, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x15, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x12, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a,
	0x14, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x40, 0x0a, 0x1b, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x8c, 0x02, 0x0a,
	0x1b, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x53, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x1a, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x39, 0x0a, 0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd6, 0x01,
	0x0a, 0x1a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5c, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x18, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x6b, 0x75, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x03, 0x0a, 0x14, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x69, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x02, 0x0a,
	0x14, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x69, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x03, 0x0a, 0x0b, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a,
	0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a,
	0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x1a, 0x53, 0x0a, 0x0e, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x80, 0x06, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x52, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x17, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x59,
	0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a,
	0x16, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x22, 0x8f, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xfd, 0x02, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x12,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x74,
	0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x63, 0x0a, 0x10, 0x49, 0x74, 0x65,
	0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c,
	0x01, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4d,
	0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x02,
	0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x76, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x91, 0x03, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x5d, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a,
	0x4c, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a,
	0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x1a, 0x4d, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x99, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x0a, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x22, 0xd7, 0x03, 0x0a, 0x23, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x59, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x74, 0x0a, 0x24, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x22, 0xbe, 0x03, 0x0a, 0x18, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x08, 0x62, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x62, 0x69,
	0x64, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x69, 0x64, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x62,
	0x69, 0x64, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x53, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x78, 0x53, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0f, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x73, 0x12,
	0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a,
	0x53, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0d, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x77, 0x0a, 0x0a, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x03, 0x62, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x22, 0xbe, 0x08, 0x0a, 0x07, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x03, 0x62, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x08, 0x62, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x69, 0x64, 0x4e, 0x65, 0x78, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x53, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63,
	0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x31, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x65, 0x63, 0x12, 0x28, 0x0a,
	0x10, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x53, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x69, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x42, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x61, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0xf5, 0x02, 0x0a, 0x16, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x52, 0x03,
	0x62, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x62,
	0x69, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x53, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x12, 0x26,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x22, 0x5c, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x67, 0x0a, 0x0f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x42, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x65, 0x0a, 0x0d, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x0b, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x6c, 0x0a, 0x12, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x11, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x03, 0x62, 0x69, 0x64,
	0x22, 0x28, 0x0a, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xa3, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x22, 0x46, 0x0a, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x49,
	0x0a, 0x19, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x29, 0x0a, 0x15, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x12, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x22, 0x82, 0x01,
	0x0a, 0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x22, 0x72, 0x0a, 0x1d, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x1d, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcc, 0x01,
	0x0a, 0x1c, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x02, 0x0a,
	0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xdc, 0x02, 0x0a, 0x10, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x1a, 0x39, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x92, 0x02, 0x0a, 0x12, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x63, 0x6b,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x22, 0xd7, 0x04, 0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x12,
	0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x0a,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x1a, 0x49, 0x0a, 0x0d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x11, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x91,
	0x01, 0x0a, 0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x15, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xed, 0x02,
	0x0a, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x5d, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01,
	0x0a, 0x0c, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x09, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x1a,
	0x4c, 0x0a, 0x0e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a,
	0x15, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x28, 0x0a, 0x16, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x15, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x28, 0x0a, 0x14, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x40, 0x0a, 0x0e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x11,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x44, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x54,
	0x61, 0x67, 0x22, 0x47, 0x0a, 0x1b, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x0e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x06, 0x0a, 0x0a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x33, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x15,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x37, 0x0a, 0x18, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x5f, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83,
	0x03, 0x0a, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x35,
	0x0a, 0x12, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x1d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x1a, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xc5, 0x05, 0x0a, 0x0e,
	0x53, 0x75, 0x62, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x75,
	0x62, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc6, 0x08, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a,
	0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x51, 0x0a, 0x10,
	0x73, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x73, 0x75, 0x62, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x60, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x58, 0x0a, 0x14, 0x53, 0x75, 0x62,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x02, 0x0a,
	0x0f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a,
	0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x52, 0x0a,
	0x11, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x18, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xfe, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x51, 0x0a, 0x0c, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x64,
	0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0x52, 0x0a, 0x11, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x78, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x22, 0xf8, 0x06,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x64, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x69, 0x64, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x61, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x61, 0x79, 0x12, 0x2d,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x73, 0x1a, 0x48, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a,
	0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6b, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x27, 0x0a,
	0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x88, 0x03, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x11, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x98, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a,
	0x0b, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x41, 0x0a, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x53, 0x79, 0x6e,
	0x63, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x22, 0xbf, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x11, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5a, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x72,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x66, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x22, 0xd0,
	0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x3a, 0x0a,
	0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x52, 0x0a,
	0x0d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x76, 0x0a, 0x1a, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x22, 0xe2, 0x01, 0x0a, 0x15, 0x53, 0x79,
	0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x61, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x66, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e,
	0x02, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbe, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x5c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd9, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a,
	0x14, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x02, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x04, 0x0a, 0x0b, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x07,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x52, 0x07, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12,
	0x4a, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x09,
	0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x22,
	0xd3, 0x05, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x45, 0x0a, 0x12,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x54,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x2b, 0x0a,
	0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xf0, 0x2b, 0x0a, 0x05, 0x52, 0x70, 0x63, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x15, 0x52, 0x50, 0x43, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x01, 0x1a, 0x27, 0xc2, 0x3e, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0d, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x1f, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02,
	0x1a, 0x27, 0xc2, 0x3e, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0d, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x18, 0x52, 0x50, 0x43,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0x34, 0xc2, 0x3e, 0x17, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xca, 0x3e, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x49, 0x0a,
	0x16, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x2d, 0xc2, 0x3e, 0x15, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xca, 0x3e, 0x12, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x17, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x05, 0x1a, 0x33, 0xc2, 0x3e, 0x1b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x12, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x5f, 0x0a, 0x1d, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x44, 0x4f, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x06, 0x1a, 0x3c, 0xc2,
	0x3e, 0x1b, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x1b,
	0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x1c, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x44, 0x4f,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0x07, 0x1a, 0x30, 0xc2,
	0x3e, 0x1a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x10, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12,
	0x5a, 0x0a, 0x1b, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d,
	0x59, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x08,
	0x1a, 0x39, 0xc2, 0x3e, 0x19, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e,
	0x1a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x1f, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x44, 0x4f,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x09,
	0x1a, 0x2e, 0xc2, 0x3e, 0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x12, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b,
	0x12, 0x41, 0x0a, 0x18, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f,
	0x4d, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x0a, 0x1a, 0x23,
	0xc2, 0x3e, 0x12, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0b, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43,
	0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x0b, 0x1a, 0x29, 0xc2,
	0x3e, 0x13, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x10, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x1e, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x1a, 0x22, 0xc2, 0x3e,
	0x1c, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x00,
	0x12, 0x50, 0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f,
	0x4d, 0x59, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0x0d, 0x1a, 0x2e, 0xc2, 0x3e, 0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x12,
	0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41,
	0x63, 0x6b, 0x12, 0x48, 0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f,
	0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x3b, 0x1a, 0x23, 0xc2, 0x3e, 0x1d, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x00, 0x12, 0x5e, 0x0a, 0x1f,
	0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x0e, 0x1a, 0x39, 0xc2, 0x3e, 0x1d, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xca, 0x3e, 0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x1e,
	0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0f,
	0x1a, 0x38, 0xc2, 0x3e, 0x1c, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xca, 0x3e, 0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x10, 0x1a, 0x33, 0xc2, 0x3e, 0x18, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x15, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x32,
	0x0a, 0x17, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x11, 0x1a, 0x15, 0xc2, 0x3e, 0x00,
	0xca, 0x3e, 0x0f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x1a, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x12, 0x1a, 0x34, 0xc2, 0x3e, 0x19, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xca, 0x3e, 0x15, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x11, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x13, 0x1a,
	0x10, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x45, 0x52,
	0x47, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x14, 0x1a, 0x29, 0xc2, 0x3e, 0x12, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xca, 0x3e, 0x11, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x41, 0x1a, 0x22,
	0xc2, 0x3e, 0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x54,
	0x4f, 0x52, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x15, 0x1a, 0x12, 0xc2, 0x3e,
	0x00, 0xca, 0x3e, 0x0c, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x17, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52,
	0x49, 0x41, 0x4c, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x16, 0x1a, 0x23, 0xc2,
	0x3e, 0x15, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x42, 0x0a, 0x18, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x54,
	0x4f, 0x52, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x17,
	0x1a, 0x24, 0xc2, 0x3e, 0x16, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x08, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x18, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44,
	0x4f, 0x4e, 0x10, 0x18, 0x1a, 0x24, 0xc2, 0x3e, 0x16, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca,
	0x3e, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x17, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x19, 0x1a, 0x27, 0xc2, 0x3e, 0x15, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xca, 0x3e, 0x0c, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x16, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52,
	0x49, 0x41, 0x4c, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x4f, 0x1a, 0x26, 0xc2, 0x3e,
	0x14, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0c, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x1a, 0x1a, 0x1b, 0xc2,
	0x3e, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xca, 0x3e, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x11, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x1b, 0x1a, 0x1d, 0xc2, 0x3e, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x1c, 0x1a, 0x1f, 0xc2, 0x3e, 0x11, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca,
	0x3e, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x1f, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x1d, 0x1a,
	0x32, 0xc2, 0x3e, 0x1b, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca,
	0x3e, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x19, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x1e, 0x1a, 0x15, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x16, 0x52, 0x50, 0x43,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f,
	0x47, 0x45, 0x54, 0x10, 0x1f, 0x1a, 0x15, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0f, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x1f,
	0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c,
	0x45, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x20, 0x1a, 0x27, 0xc2, 0x3e, 0x12, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x22, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53,
	0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x21, 0x1a, 0x27, 0xc2, 0x3e, 0x12, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0f, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x20, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45,
	0x53, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10,
	0x22, 0x1a, 0x15, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x18, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x43,
	0x4c, 0x41, 0x49, 0x4d, 0x10, 0x23, 0x1a, 0x29, 0xc2, 0x3e, 0x12, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x11,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x51, 0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x3e, 0x1a, 0x2f, 0xc2, 0x3e, 0x1a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xca, 0x3e, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x3f, 0x1a, 0x32, 0xc2, 0x3e, 0x1d, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0f, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42,
	0x4c, 0x45, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x40, 0x1a,
	0x2f, 0xc2, 0x3e, 0x1a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e,
	0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x24, 0x1a, 0x14, 0xc2, 0x3e, 0x0e, 0x52,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x00,
	0x12, 0x3a, 0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x53,
	0x10, 0x25, 0x1a, 0x18, 0xc2, 0x3e, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x00, 0x12, 0x33, 0x0a, 0x10,
	0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0x3a, 0x1a, 0x1d, 0xc2, 0x3e, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xca, 0x3e, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x1e, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x47, 0x45, 0x54, 0x10, 0x26, 0x1a, 0x1b, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x15, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x47,
	0x45, 0x54, 0x10, 0x2a, 0x1a, 0x29, 0xc2, 0x3e, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0xca, 0x3e, 0x10, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x51, 0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x2b, 0x1a, 0x2c, 0xc2, 0x3e, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0xca,
	0x3e, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x43,
	0x4c, 0x41, 0x49, 0x4d, 0x10, 0x2c, 0x1a, 0x2b, 0xc2, 0x3e, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0xca, 0x3e, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x4d, 0x0a, 0x1d, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f,
	0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x2d, 0x1a, 0x2a, 0xc2, 0x3e, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0xca,
	0x3e, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x3f, 0x0a, 0x23, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x3c, 0x1a, 0x16, 0xc2, 0x3e, 0x00,
	0xca, 0x3e, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x70, 0x0a, 0x2c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x53, 0x10, 0x3d, 0x1a, 0x3e, 0xc2, 0x3e, 0x28, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xca, 0x3e, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x10, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x2e, 0x1a, 0x0e, 0xc2, 0x3e, 0x00,
	0xca, 0x3e, 0x08, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x13, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x2f, 0x1a, 0x1f, 0xc2, 0x3e, 0x11, 0x53, 0x74, 0x61, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x08, 0x53, 0x74, 0x61,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x17, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x54,
	0x10, 0x30, 0x1a, 0x2a, 0xc2, 0x3e, 0x15, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0f, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x31,
	0x1a, 0x2f, 0xc2, 0x3e, 0x1a, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca,
	0x3e, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x1a, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x32, 0x1a, 0x2d, 0xc2, 0x3e, 0x18, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e,
	0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x1d, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e,
	0x54, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x33, 0x1a, 0x13, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0d, 0x49, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x34, 0x1a, 0x2f, 0xc2,
	0x3e, 0x1c, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e,
	0x0d, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x49,
	0x56, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x35, 0x1a, 0x2f, 0xc2, 0x3e, 0x1c, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0d, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x36, 0x1a, 0x2e, 0xc2, 0x3e, 0x1b, 0x49, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0d, 0x49, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x37, 0x1a, 0x2f, 0xc2,
	0x3e, 0x1c, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e,
	0x0d, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58,
	0x0a, 0x21, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x49,
	0x56, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c,
	0x41, 0x49, 0x4d, 0x10, 0x38, 0x1a, 0x31, 0xc2, 0x3e, 0x1e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0d, 0x49, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x19, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x39, 0x1a, 0x2c, 0xc2, 0x3e, 0x17, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xca, 0x3e, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x1d, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x10, 0x42, 0x1a, 0x16, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x10,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x43, 0x1a, 0x23, 0xc2, 0x3e, 0x12, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xca, 0x3e, 0x0b, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x44, 0x1a, 0x1e, 0xc2, 0x3e, 0x11, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e,
	0x07, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x19, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x49,
	0x4d, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x45, 0x1a, 0x2b, 0xc2, 0x3e, 0x16, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xca, 0x3e, 0x0f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x42, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x1d, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x46, 0x1a, 0x33, 0xc2, 0x3e, 0x1a, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x13, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x16,
	0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x47, 0x1a, 0x27, 0xc2, 0x3e, 0x14, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xca, 0x3e, 0x0d, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x3d, 0x0a, 0x16, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x48, 0x1a, 0x21, 0xc2,
	0x3e, 0x14, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x07, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x19, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x49, 0x44, 0x53, 0x10, 0x49, 0x1a,
	0x27, 0xc2, 0x3e, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0b, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x4a, 0x1a, 0x2a, 0xc2, 0x3e, 0x19, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0b, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4b, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x4b, 0x1a,
	0x11, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x15, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4b, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x4c, 0x1a, 0x25, 0xc2,
	0x3e, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4b, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x4d, 0x1a, 0x24,
	0xc2, 0x3e, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x4e, 0x1a, 0x24,
	0xc2, 0x3e, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x20, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xe9, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xea, 0x07, 0x12,
	0x27, 0x0a, 0x22, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0xeb, 0x07, 0x2a, 0xb6, 0x01, 0x0a, 0x0b, 0x52, 0x70, 0x63,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x50, 0x43, 0x5f,
	0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x48, 0x0a, 0x1d, 0x52, 0x50, 0x43, 0x5f, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x1a, 0x25, 0xc2, 0x3e, 0x14, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xca, 0x3e, 0x0b, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x49, 0x44, 0x10,
	0x02, 0x1a, 0x1e, 0xc2, 0x3e, 0x11, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x07, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2a, 0x85, 0x02, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x04, 0x2a, 0xb1, 0x01, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x54,
	0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xb4, 0x01,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x04, 0x2a, 0xc3, 0x01, 0x0a, 0x10, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x43, 0x4f,
	0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x43, 0x4f, 0x4e,
	0x4f, 0x4d, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x42, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x43,
	0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x04, 0x2a, 0x4a, 0x0a, 0x0d, 0x49, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x4e, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x10, 0x01, 0x2a, 0xbe, 0x01, 0x0a, 0x0d, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x55, 0x54, 0x4f,
	0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x55, 0x54,
	0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x42, 0x41, 0x4e,
	0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x3a, 0x3b, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x3a, 0x3d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x61, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x42,
	0x09, 0x48, 0x69, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c,
	0x61, 0x62, 0x73, 0x2f, 0x68, 0x69, 0x72, 0x6f, 0xa2, 0x02, 0x03, 0x48, 0x58, 0x58, 0xaa, 0x02,
	0x04, 0x48, 0x69, 0x72, 0x6f, 0xca, 0x02, 0x04, 0x48, 0x69, 0x72, 0x6f, 0xe2, 0x02, 0x10, 0x48,
	0x69, 0x72, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x04, 0x48, 0x69, 0x72, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hiro_proto_rawDescOnce sync.Once
	file_hiro_proto_rawDescData = file_hiro_proto_rawDesc
)

func file_hiro_proto_rawDescGZIP() []byte {
	file_hiro_proto_rawDescOnce.Do(func() {
		file_hiro_proto_rawDescData = protoimpl.X.CompressGZIP(file_hiro_proto_rawDescData)
	})
	return file_hiro_proto_rawDescData
}

var file_hiro_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_hiro_proto_msgTypes = make([]protoimpl.MessageInfo, 280)
var file_hiro_proto_goTypes = []any{
	(RpcId)(0),                                       // 0: hiro.RpcId
	(RpcSocketId)(0),                                 // 1: hiro.RpcSocketId
	(ProgressionPreconditionsOperator)(0),            // 2: hiro.ProgressionPreconditionsOperator
	(ProgressionDeltaState)(0),                       // 3: hiro.ProgressionDeltaState
	(StatUpdateOperator)(0),                          // 4: hiro.StatUpdateOperator
	(EconomyStoreType)(0),                            // 5: hiro.EconomyStoreType
	(IncentiveType)(0),                               // 6: hiro.IncentiveType
	(TutorialState)(0),                               // 7: hiro.TutorialState
	(*ProgressionCost)(nil),                          // 8: hiro.ProgressionCost
	(*ProgressionPreconditions)(nil),                 // 9: hiro.ProgressionPreconditions
	(*ProgressionPreconditionsBlock)(nil),            // 10: hiro.ProgressionPreconditionsBlock
	(*Progression)(nil),                              // 11: hiro.Progression
	(*ProgressionDelta)(nil),                         // 12: hiro.ProgressionDelta
	(*ProgressionList)(nil),                          // 13: hiro.ProgressionList
	(*ProgressionGetRequest)(nil),                    // 14: hiro.ProgressionGetRequest
	(*ProgressionPurchaseRequest)(nil),               // 15: hiro.ProgressionPurchaseRequest
	(*ProgressionUpdateRequest)(nil),                 // 16: hiro.ProgressionUpdateRequest
	(*ProgressionResetRequest)(nil),                  // 17: hiro.ProgressionResetRequest
	(*StatUpdate)(nil),                               // 18: hiro.StatUpdate
	(*StatUpdateRequest)(nil),                        // 19: hiro.StatUpdateRequest
	(*Stat)(nil),                                     // 20: hiro.Stat
	(*StatList)(nil),                                 // 21: hiro.StatList
	(*ChannelMessageAck)(nil),                        // 22: hiro.ChannelMessageAck
	(*DevicePrefsRequest)(nil),                       // 23: hiro.DevicePrefsRequest
	(*RewardInventoryItem)(nil),                      // 24: hiro.RewardInventoryItem
	(*RewardEnergyModifier)(nil),                     // 25: hiro.RewardEnergyModifier
	(*RewardModifier)(nil),                           // 26: hiro.RewardModifier
	(*ActiveRewardModifier)(nil),                     // 27: hiro.ActiveRewardModifier
	(*Reward)(nil),                                   // 28: hiro.Reward
	(*RewardList)(nil),                               // 29: hiro.RewardList
	(*RewardRangeInt32)(nil),                         // 30: hiro.RewardRangeInt32
	(*RewardRangeInt64)(nil),                         // 31: hiro.RewardRangeInt64
	(*RewardRangeUInt64)(nil),                        // 32: hiro.RewardRangeUInt64
	(*RewardRangeDouble)(nil),                        // 33: hiro.RewardRangeDouble
	(*AvailableRewardsStringPropertyOption)(nil),     // 34: hiro.AvailableRewardsStringPropertyOption
	(*AvailableRewardsStringProperty)(nil),           // 35: hiro.AvailableRewardsStringProperty
	(*AvailableRewardsItem)(nil),                     // 36: hiro.AvailableRewardsItem
	(*AvailableRewardsItemSet)(nil),                  // 37: hiro.AvailableRewardsItemSet
	(*AvailableRewardsCurrency)(nil),                 // 38: hiro.AvailableRewardsCurrency
	(*AvailableRewardsEnergy)(nil),                   // 39: hiro.AvailableRewardsEnergy
	(*AvailableRewardsEnergyModifier)(nil),           // 40: hiro.AvailableRewardsEnergyModifier
	(*AvailableRewardsRewardModifier)(nil),           // 41: hiro.AvailableRewardsRewardModifier
	(*AvailableRewardsContents)(nil),                 // 42: hiro.AvailableRewardsContents
	(*AvailableRewards)(nil),                         // 43: hiro.AvailableRewards
	(*IncentiveClaim)(nil),                           // 44: hiro.IncentiveClaim
	(*Incentive)(nil),                                // 45: hiro.Incentive
	(*IncentiveList)(nil),                            // 46: hiro.IncentiveList
	(*IncentiveInfo)(nil),                            // 47: hiro.IncentiveInfo
	(*IncentiveSenderCreateRequest)(nil),             // 48: hiro.IncentiveSenderCreateRequest
	(*IncentiveSenderDeleteRequest)(nil),             // 49: hiro.IncentiveSenderDeleteRequest
	(*IncentiveSenderClaimRequest)(nil),              // 50: hiro.IncentiveSenderClaimRequest
	(*IncentiveRecipientGetRequest)(nil),             // 51: hiro.IncentiveRecipientGetRequest
	(*IncentiveRecipientClaimRequest)(nil),           // 52: hiro.IncentiveRecipientClaimRequest
	(*EventLeaderboardGet)(nil),                      // 53: hiro.EventLeaderboardGet
	(*EventLeaderboardUpdate)(nil),                   // 54: hiro.EventLeaderboardUpdate
	(*EventLeaderboardClaim)(nil),                    // 55: hiro.EventLeaderboardClaim
	(*EventLeaderboardRoll)(nil),                     // 56: hiro.EventLeaderboardRoll
	(*EventLeaderboardScore)(nil),                    // 57: hiro.EventLeaderboardScore
	(*EventLeaderboardRewardTier)(nil),               // 58: hiro.EventLeaderboardRewardTier
	(*EventLeaderboardRewardTiers)(nil),              // 59: hiro.EventLeaderboardRewardTiers
	(*EventLeaderboardChangeZone)(nil),               // 60: hiro.EventLeaderboardChangeZone
	(*EventLeaderboard)(nil),                         // 61: hiro.EventLeaderboard
	(*EventLeaderboardDebugFillRequest)(nil),         // 62: hiro.EventLeaderboardDebugFillRequest
	(*EventLeaderboardDebugRandomScoresRequest)(nil), // 63: hiro.EventLeaderboardDebugRandomScoresRequest
	(*EconomyDonationContributor)(nil),               // 64: hiro.EconomyDonationContributor
	(*EconomyDonation)(nil),                          // 65: hiro.EconomyDonation
	(*EconomyDonationAck)(nil),                       // 66: hiro.EconomyDonationAck
	(*EconomyDonationsList)(nil),                     // 67: hiro.EconomyDonationsList
	(*EconomyDonationClaimRequest)(nil),              // 68: hiro.EconomyDonationClaimRequest
	(*EconomyDonationClaimRewards)(nil),              // 69: hiro.EconomyDonationClaimRewards
	(*EconomyDonationGiveRequest)(nil),               // 70: hiro.EconomyDonationGiveRequest
	(*EconomyDonationGetRequest)(nil),                // 71: hiro.EconomyDonationGetRequest
	(*EconomyDonationRequest)(nil),                   // 72: hiro.EconomyDonationRequest
	(*EconomyDonationsByUserList)(nil),               // 73: hiro.EconomyDonationsByUserList
	(*EconomyListStoreItemCost)(nil),                 // 74: hiro.EconomyListStoreItemCost
	(*EconomyListStoreItem)(nil),                     // 75: hiro.EconomyListStoreItem
	(*EconomyListPlacement)(nil),                     // 76: hiro.EconomyListPlacement
	(*EconomyList)(nil),                              // 77: hiro.EconomyList
	(*InventoryItem)(nil),                            // 78: hiro.InventoryItem
	(*InventoryListRequest)(nil),                     // 79: hiro.InventoryListRequest
	(*InventoryGrantRequest)(nil),                    // 80: hiro.InventoryGrantRequest
	(*InventoryUpdateItemProperties)(nil),            // 81: hiro.InventoryUpdateItemProperties
	(*InventoryUpdateItemsRequest)(nil),              // 82: hiro.InventoryUpdateItemsRequest
	(*Inventory)(nil),                                // 83: hiro.Inventory
	(*InventoryConsumeRequest)(nil),                  // 84: hiro.InventoryConsumeRequest
	(*InventoryConsumeRewards)(nil),                  // 85: hiro.InventoryConsumeRewards
	(*InventoryUpdateAck)(nil),                       // 86: hiro.InventoryUpdateAck
	(*InventoryList)(nil),                            // 87: hiro.InventoryList
	(*AuctionBidAmount)(nil),                         // 88: hiro.AuctionBidAmount
	(*AuctionFee)(nil),                               // 89: hiro.AuctionFee
	(*AuctionTemplateConditionListingCost)(nil),      // 90: hiro.AuctionTemplateConditionListingCost
	(*AuctionTemplateConditionBidIncrement)(nil),     // 91: hiro.AuctionTemplateConditionBidIncrement
	(*AuctionTemplateCondition)(nil),                 // 92: hiro.AuctionTemplateCondition
	(*AuctionTemplate)(nil),                          // 93: hiro.AuctionTemplate
	(*AuctionTemplates)(nil),                         // 94: hiro.AuctionTemplates
	(*AuctionReward)(nil),                            // 95: hiro.AuctionReward
	(*AuctionBid)(nil),                               // 96: hiro.AuctionBid
	(*Auction)(nil),                                  // 97: hiro.Auction
	(*AuctionNotificationBid)(nil),                   // 98: hiro.AuctionNotificationBid
	(*StreamEnvelope)(nil),                           // 99: hiro.StreamEnvelope
	(*AuctionClaimBid)(nil),                          // 100: hiro.AuctionClaimBid
	(*AuctionClaimCreated)(nil),                      // 101: hiro.AuctionClaimCreated
	(*AuctionCancel)(nil),                            // 102: hiro.AuctionCancel
	(*AuctionList)(nil),                              // 103: hiro.AuctionList
	(*AuctionListRequest)(nil),                       // 104: hiro.AuctionListRequest
	(*AuctionBidRequest)(nil),                        // 105: hiro.AuctionBidRequest
	(*AuctionClaimBidRequest)(nil),                   // 106: hiro.AuctionClaimBidRequest
	(*AuctionClaimCreatedRequest)(nil),               // 107: hiro.AuctionClaimCreatedRequest
	(*AuctionCancelRequest)(nil),                     // 108: hiro.AuctionCancelRequest
	(*AuctionCreateRequest)(nil),                     // 109: hiro.AuctionCreateRequest
	(*AuctionListBidsRequest)(nil),                   // 110: hiro.AuctionListBidsRequest
	(*AuctionListCreatedRequest)(nil),                // 111: hiro.AuctionListCreatedRequest
	(*AuctionsFollowRequest)(nil),                    // 112: hiro.AuctionsFollowRequest
	(*EconomyListRequest)(nil),                       // 113: hiro.EconomyListRequest
	(*EconomyGrantRequest)(nil),                      // 114: hiro.EconomyGrantRequest
	(*EconomyPurchaseIntentRequest)(nil),             // 115: hiro.EconomyPurchaseIntentRequest
	(*EconomyPurchaseRequest)(nil),                   // 116: hiro.EconomyPurchaseRequest
	(*EconomyPurchaseRestoreRequest)(nil),            // 117: hiro.EconomyPurchaseRestoreRequest
	(*EconomyPlacementStatusRequest)(nil),            // 118: hiro.EconomyPlacementStatusRequest
	(*EconomyPlacementStartRequest)(nil),             // 119: hiro.EconomyPlacementStartRequest
	(*EconomyPlacementStatus)(nil),                   // 120: hiro.EconomyPlacementStatus
	(*EconomyUpdateAck)(nil),                         // 121: hiro.EconomyUpdateAck
	(*EconomyPurchaseAck)(nil),                       // 122: hiro.EconomyPurchaseAck
	(*EnergyModifier)(nil),                           // 123: hiro.EnergyModifier
	(*Energy)(nil),                                   // 124: hiro.Energy
	(*EnergyList)(nil),                               // 125: hiro.EnergyList
	(*EnergySpendRequest)(nil),                       // 126: hiro.EnergySpendRequest
	(*EnergySpendReward)(nil),                        // 127: hiro.EnergySpendReward
	(*EnergyGrantRequest)(nil),                       // 128: hiro.EnergyGrantRequest
	(*LeaderboardConfig)(nil),                        // 129: hiro.LeaderboardConfig
	(*LeaderboardConfigList)(nil),                    // 130: hiro.LeaderboardConfigList
	(*Tutorial)(nil),                                 // 131: hiro.Tutorial
	(*TutorialList)(nil),                             // 132: hiro.TutorialList
	(*TutorialAcceptRequest)(nil),                    // 133: hiro.TutorialAcceptRequest
	(*TutorialDeclineRequest)(nil),                   // 134: hiro.TutorialDeclineRequest
	(*TutorialAbandonRequest)(nil),                   // 135: hiro.TutorialAbandonRequest
	(*TutorialUpdateRequest)(nil),                    // 136: hiro.TutorialUpdateRequest
	(*TutorialResetRequest)(nil),                     // 137: hiro.TutorialResetRequest
	(*RateAppRequest)(nil),                           // 138: hiro.RateAppRequest
	(*Team)(nil),                                     // 139: hiro.Team
	(*TeamCreateRequest)(nil),                        // 140: hiro.TeamCreateRequest
	(*TeamListRequest)(nil),                          // 141: hiro.TeamListRequest
	(*TeamList)(nil),                                 // 142: hiro.TeamList
	(*TeamSearchRequest)(nil),                        // 143: hiro.TeamSearchRequest
	(*TeamWriteChatMessageRequest)(nil),              // 144: hiro.TeamWriteChatMessageRequest
	(*UnlockableCost)(nil),                           // 145: hiro.UnlockableCost
	(*Unlockable)(nil),                               // 146: hiro.Unlockable
	(*UnlockableSlotCost)(nil),                       // 147: hiro.UnlockableSlotCost
	(*UnlockablesList)(nil),                          // 148: hiro.UnlockablesList
	(*UnlockablesReward)(nil),                        // 149: hiro.UnlockablesReward
	(*UnlockablesRequest)(nil),                       // 150: hiro.UnlockablesRequest
	(*UnlockablesQueueAddRequest)(nil),               // 151: hiro.UnlockablesQueueAddRequest
	(*UnlockablesQueueRemoveRequest)(nil),            // 152: hiro.UnlockablesQueueRemoveRequest
	(*UnlockablesQueueSetRequest)(nil),               // 153: hiro.UnlockablesQueueSetRequest
	(*SubAchievement)(nil),                           // 154: hiro.SubAchievement
	(*Achievement)(nil),                              // 155: hiro.Achievement
	(*AchievementList)(nil),                          // 156: hiro.AchievementList
	(*AchievementsClaimRequest)(nil),                 // 157: hiro.AchievementsClaimRequest
	(*AchievementsGetRequest)(nil),                   // 158: hiro.AchievementsGetRequest
	(*AchievementsUpdateAck)(nil),                    // 159: hiro.AchievementsUpdateAck
	(*AchievementsUpdateRequest)(nil),                // 160: hiro.AchievementsUpdateRequest
	(*StreakAvailableReward)(nil),                    // 161: hiro.StreakAvailableReward
	(*StreakReward)(nil),                             // 162: hiro.StreakReward
	(*Streak)(nil),                                   // 163: hiro.Streak
	(*StreaksList)(nil),                              // 164: hiro.StreaksList
	(*StreaksUpdateRequest)(nil),                     // 165: hiro.StreaksUpdateRequest
	(*StreaksClaimRequest)(nil),                      // 166: hiro.StreaksClaimRequest
	(*StreaksResetRequest)(nil),                      // 167: hiro.StreaksResetRequest
	(*SyncInventoryItem)(nil),                        // 168: hiro.SyncInventoryItem
	(*SyncInventory)(nil),                            // 169: hiro.SyncInventory
	(*SyncEconomy)(nil),                              // 170: hiro.SyncEconomy
	(*SyncAchievementsUpdate)(nil),                   // 171: hiro.SyncAchievementsUpdate
	(*SyncAchievements)(nil),                         // 172: hiro.SyncAchievements
	(*SyncEnergyState)(nil),                          // 173: hiro.SyncEnergyState
	(*SyncEnergy)(nil),                               // 174: hiro.SyncEnergy
	(*SyncEventLeaderboardUpdate)(nil),               // 175: hiro.SyncEventLeaderboardUpdate
	(*SyncEventLeaderboards)(nil),                    // 176: hiro.SyncEventLeaderboards
	(*SyncProgressionUpdate)(nil),                    // 177: hiro.SyncProgressionUpdate
	(*SyncProgressions)(nil),                         // 178: hiro.SyncProgressions
	(*SyncTutorials)(nil),                            // 179: hiro.SyncTutorials
	(*SyncUnlockableUpdate)(nil),                     // 180: hiro.SyncUnlockableUpdate
	(*SyncUnlockables)(nil),                          // 181: hiro.SyncUnlockables
	(*SyncStreakUpdate)(nil),                         // 182: hiro.SyncStreakUpdate
	(*SyncStreaks)(nil),                              // 183: hiro.SyncStreaks
	(*SyncRequest)(nil),                              // 184: hiro.SyncRequest
	(*SyncResponse)(nil),                             // 185: hiro.SyncResponse
	nil,                                              // 186: hiro.ProgressionCost.ItemsEntry
	nil,                                              // 187: hiro.ProgressionCost.CurrenciesEntry
	nil,                                              // 188: hiro.ProgressionPreconditions.CountsEntry
	nil,                                              // 189: hiro.ProgressionPreconditions.ItemsMinEntry
	nil,                                              // 190: hiro.ProgressionPreconditions.ItemsMaxEntry
	nil,                                              // 191: hiro.ProgressionPreconditions.StatsMinEntry
	nil,                                              // 192: hiro.ProgressionPreconditions.StatsMaxEntry
	nil,                                              // 193: hiro.ProgressionPreconditions.EnergyMinEntry
	nil,                                              // 194: hiro.ProgressionPreconditions.EnergyMaxEntry
	nil,                                              // 195: hiro.ProgressionPreconditions.CurrencyMinEntry
	nil,                                              // 196: hiro.ProgressionPreconditions.CurrencyMaxEntry
	nil,                                              // 197: hiro.Progression.CountsEntry
	nil,                                              // 198: hiro.Progression.AdditionalPropertiesEntry
	nil,                                              // 199: hiro.ProgressionDelta.CountsEntry
	nil,                                              // 200: hiro.ProgressionList.ProgressionsEntry
	nil,                                              // 201: hiro.ProgressionList.DeltasEntry
	nil,                                              // 202: hiro.ProgressionGetRequest.ProgressionsEntry
	nil,                                              // 203: hiro.ProgressionUpdateRequest.CountsEntry
	nil,                                              // 204: hiro.StatList.PublicEntry
	nil,                                              // 205: hiro.StatList.PrivateEntry
	nil,                                              // 206: hiro.DevicePrefsRequest.PreferencesEntry
	nil,                                              // 207: hiro.RewardInventoryItem.StringPropertiesEntry
	nil,                                              // 208: hiro.RewardInventoryItem.NumericPropertiesEntry
	nil,                                              // 209: hiro.Reward.ItemsEntry
	nil,                                              // 210: hiro.Reward.CurrenciesEntry
	nil,                                              // 211: hiro.Reward.EnergiesEntry
	nil,                                              // 212: hiro.Reward.ItemInstancesEntry
	nil,                                              // 213: hiro.AvailableRewardsStringProperty.OptionsEntry
	nil,                                              // 214: hiro.AvailableRewardsItem.NumericPropertiesEntry
	nil,                                              // 215: hiro.AvailableRewardsItem.StringPropertiesEntry
	nil,                                              // 216: hiro.AvailableRewardsContents.ItemsEntry
	nil,                                              // 217: hiro.AvailableRewardsContents.CurrenciesEntry
	nil,                                              // 218: hiro.AvailableRewardsContents.EnergiesEntry
	nil,                                              // 219: hiro.Incentive.ClaimsEntry
	nil,                                              // 220: hiro.EventLeaderboard.RewardTiersEntry
	nil,                                              // 221: hiro.EventLeaderboard.ChangeZonesEntry
	nil,                                              // 222: hiro.EventLeaderboard.AdditionalPropertiesEntry
	nil,                                              // 223: hiro.EconomyDonation.AdditionalPropertiesEntry
	nil,                                              // 224: hiro.EconomyDonationClaimRewards.ClaimedRewardsEntry
	nil,                                              // 225: hiro.EconomyDonationsByUserList.UserDonationsEntry
	nil,                                              // 226: hiro.EconomyListStoreItemCost.CurrenciesEntry
	nil,                                              // 227: hiro.EconomyListStoreItem.AdditionalPropertiesEntry
	nil,                                              // 228: hiro.EconomyListPlacement.AdditionalPropertiesEntry
	nil,                                              // 229: hiro.EconomyList.DonationsEntry
	nil,                                              // 230: hiro.InventoryItem.StringPropertiesEntry
	nil,                                              // 231: hiro.InventoryItem.NumericPropertiesEntry
	nil,                                              // 232: hiro.InventoryGrantRequest.ItemsEntry
	nil,                                              // 233: hiro.InventoryUpdateItemProperties.StringPropertiesEntry
	nil,                                              // 234: hiro.InventoryUpdateItemProperties.NumericPropertiesEntry
	nil,                                              // 235: hiro.InventoryUpdateItemsRequest.ItemUpdatesEntry
	nil,                                              // 236: hiro.Inventory.ItemsEntry
	nil,                                              // 237: hiro.InventoryConsumeRequest.ItemsEntry
	nil,                                              // 238: hiro.InventoryConsumeRequest.InstancesEntry
	nil,                                              // 239: hiro.InventoryConsumeRewards.RewardsEntry
	nil,                                              // 240: hiro.InventoryConsumeRewards.InstanceRewardsEntry
	nil,                                              // 241: hiro.InventoryList.ItemsEntry
	nil,                                              // 242: hiro.AuctionBidAmount.CurrenciesEntry
	nil,                                              // 243: hiro.AuctionTemplateConditionListingCost.CurrenciesEntry
	nil,                                              // 244: hiro.AuctionTemplateConditionListingCost.ItemsEntry
	nil,                                              // 245: hiro.AuctionTemplateConditionListingCost.EnergiesEntry
	nil,                                              // 246: hiro.AuctionTemplate.ConditionsEntry
	nil,                                              // 247: hiro.AuctionTemplates.TemplatesEntry
	nil,                                              // 248: hiro.EconomyGrantRequest.CurrenciesEntry
	nil,                                              // 249: hiro.EconomyGrantRequest.ItemsEntry
	nil,                                              // 250: hiro.EconomyPlacementStartRequest.MetadataEntry
	nil,                                              // 251: hiro.EconomyPlacementStatus.MetadataEntry
	nil,                                              // 252: hiro.EconomyUpdateAck.WalletEntry
	nil,                                              // 253: hiro.EconomyPurchaseAck.WalletEntry
	nil,                                              // 254: hiro.Energy.AdditionalPropertiesEntry
	nil,                                              // 255: hiro.EnergyList.EnergiesEntry
	nil,                                              // 256: hiro.EnergySpendRequest.AmountsEntry
	nil,                                              // 257: hiro.EnergyGrantRequest.AmountsEntry
	nil,                                              // 258: hiro.Tutorial.AdditionalPropertiesEntry
	nil,                                              // 259: hiro.TutorialList.TutorialsEntry
	nil,                                              // 260: hiro.UnlockableCost.ItemsEntry
	nil,                                              // 261: hiro.UnlockableCost.CurrenciesEntry
	nil,                                              // 262: hiro.Unlockable.AdditionalPropertiesEntry
	nil,                                              // 263: hiro.UnlockableSlotCost.ItemsEntry
	nil,                                              // 264: hiro.UnlockableSlotCost.CurrenciesEntry
	nil,                                              // 265: hiro.SubAchievement.AdditionalPropertiesEntry
	nil,                                              // 266: hiro.Achievement.SubAchievementsEntry
	nil,                                              // 267: hiro.Achievement.AdditionalPropertiesEntry
	nil,                                              // 268: hiro.AchievementList.AchievementsEntry
	nil,                                              // 269: hiro.AchievementList.RepeatAchievementsEntry
	nil,                                              // 270: hiro.AchievementsUpdateAck.AchievementsEntry
	nil,                                              // 271: hiro.AchievementsUpdateAck.RepeatAchievementsEntry
	nil,                                              // 272: hiro.AchievementsUpdateRequest.AchievementsEntry
	nil,                                              // 273: hiro.StreaksList.StreaksEntry
	nil,                                              // 274: hiro.StreaksUpdateRequest.UpdatesEntry
	nil,                                              // 275: hiro.SyncInventoryItem.StringPropertiesEntry
	nil,                                              // 276: hiro.SyncInventoryItem.NumericPropertiesEntry
	nil,                                              // 277: hiro.SyncInventory.ItemsEntry
	nil,                                              // 278: hiro.SyncEconomy.CurrenciesEntry
	nil,                                              // 279: hiro.SyncAchievements.AchievementsEntry
	nil,                                              // 280: hiro.SyncEnergy.EnergiesEntry
	nil,                                              // 281: hiro.SyncEventLeaderboards.EventLeaderboardsEntry
	nil,                                              // 282: hiro.SyncProgressionUpdate.CountsEntry
	nil,                                              // 283: hiro.SyncProgressions.ProgressionsEntry
	nil,                                              // 284: hiro.SyncTutorials.UpdatesEntry
	nil,                                              // 285: hiro.SyncUnlockables.UpdatesEntry
	nil,                                              // 286: hiro.SyncStreaks.UpdatesEntry
	nil,                                              // 287: hiro.SyncResponse.WalletEntry
	(*structpb.Struct)(nil),                          // 288: google.protobuf.Struct
	(*wrapperspb.Int32Value)(nil),                    // 289: google.protobuf.Int32Value
	(*descriptorpb.EnumValueOptions)(nil),            // 290: google.protobuf.EnumValueOptions
}
var file_hiro_proto_depIdxs = []int32{
	186, // 0: hiro.ProgressionCost.items:type_name -> hiro.ProgressionCost.ItemsEntry
	187, // 1: hiro.ProgressionCost.currencies:type_name -> hiro.ProgressionCost.CurrenciesEntry
	188, // 2: hiro.ProgressionPreconditions.counts:type_name -> hiro.ProgressionPreconditions.CountsEntry
	8,   // 3: hiro.ProgressionPreconditions.cost:type_name -> hiro.ProgressionCost
	189, // 4: hiro.ProgressionPreconditions.items_min:type_name -> hiro.ProgressionPreconditions.ItemsMinEntry
	190, // 5: hiro.ProgressionPreconditions.items_max:type_name -> hiro.ProgressionPreconditions.ItemsMaxEntry
	191, // 6: hiro.ProgressionPreconditions.stats_min:type_name -> hiro.ProgressionPreconditions.StatsMinEntry
	192, // 7: hiro.ProgressionPreconditions.stats_max:type_name -> hiro.ProgressionPreconditions.StatsMaxEntry
	193, // 8: hiro.ProgressionPreconditions.energy_min:type_name -> hiro.ProgressionPreconditions.EnergyMinEntry
	194, // 9: hiro.ProgressionPreconditions.energy_max:type_name -> hiro.ProgressionPreconditions.EnergyMaxEntry
	195, // 10: hiro.ProgressionPreconditions.currency_min:type_name -> hiro.ProgressionPreconditions.CurrencyMinEntry
	196, // 11: hiro.ProgressionPreconditions.currency_max:type_name -> hiro.ProgressionPreconditions.CurrencyMaxEntry
	9,   // 12: hiro.ProgressionPreconditionsBlock.direct:type_name -> hiro.ProgressionPreconditions
	2,   // 13: hiro.ProgressionPreconditionsBlock.operator:type_name -> hiro.ProgressionPreconditionsOperator
	10,  // 14: hiro.ProgressionPreconditionsBlock.nested:type_name -> hiro.ProgressionPreconditionsBlock
	197, // 15: hiro.Progression.counts:type_name -> hiro.Progression.CountsEntry
	198, // 16: hiro.Progression.additional_properties:type_name -> hiro.Progression.AdditionalPropertiesEntry
	10,  // 17: hiro.Progression.preconditions:type_name -> hiro.ProgressionPreconditionsBlock
	10,  // 18: hiro.Progression.unmet_preconditions:type_name -> hiro.ProgressionPreconditionsBlock
	3,   // 19: hiro.ProgressionDelta.state:type_name -> hiro.ProgressionDeltaState
	199, // 20: hiro.ProgressionDelta.counts:type_name -> hiro.ProgressionDelta.CountsEntry
	10,  // 21: hiro.ProgressionDelta.preconditions:type_name -> hiro.ProgressionPreconditionsBlock
	200, // 22: hiro.ProgressionList.progressions:type_name -> hiro.ProgressionList.ProgressionsEntry
	201, // 23: hiro.ProgressionList.deltas:type_name -> hiro.ProgressionList.DeltasEntry
	202, // 24: hiro.ProgressionGetRequest.progressions:type_name -> hiro.ProgressionGetRequest.ProgressionsEntry
	203, // 25: hiro.ProgressionUpdateRequest.counts:type_name -> hiro.ProgressionUpdateRequest.CountsEntry
	4,   // 26: hiro.StatUpdate.operator:type_name -> hiro.StatUpdateOperator
	18,  // 27: hiro.StatUpdateRequest.public:type_name -> hiro.StatUpdate
	18,  // 28: hiro.StatUpdateRequest.private:type_name -> hiro.StatUpdate
	204, // 29: hiro.StatList.public:type_name -> hiro.StatList.PublicEntry
	205, // 30: hiro.StatList.private:type_name -> hiro.StatList.PrivateEntry
	206, // 31: hiro.DevicePrefsRequest.preferences:type_name -> hiro.DevicePrefsRequest.PreferencesEntry
	207, // 32: hiro.RewardInventoryItem.string_properties:type_name -> hiro.RewardInventoryItem.StringPropertiesEntry
	208, // 33: hiro.RewardInventoryItem.numeric_properties:type_name -> hiro.RewardInventoryItem.NumericPropertiesEntry
	209, // 34: hiro.Reward.items:type_name -> hiro.Reward.ItemsEntry
	210, // 35: hiro.Reward.currencies:type_name -> hiro.Reward.CurrenciesEntry
	211, // 36: hiro.Reward.energies:type_name -> hiro.Reward.EnergiesEntry
	25,  // 37: hiro.Reward.energy_modifiers:type_name -> hiro.RewardEnergyModifier
	26,  // 38: hiro.Reward.reward_modifiers:type_name -> hiro.RewardModifier
	212, // 39: hiro.Reward.item_instances:type_name -> hiro.Reward.ItemInstancesEntry
	28,  // 40: hiro.RewardList.rewards:type_name -> hiro.Reward
	213, // 41: hiro.AvailableRewardsStringProperty.options:type_name -> hiro.AvailableRewardsStringProperty.OptionsEntry
	31,  // 42: hiro.AvailableRewardsItem.count:type_name -> hiro.RewardRangeInt64
	214, // 43: hiro.AvailableRewardsItem.numeric_properties:type_name -> hiro.AvailableRewardsItem.NumericPropertiesEntry
	215, // 44: hiro.AvailableRewardsItem.string_properties:type_name -> hiro.AvailableRewardsItem.StringPropertiesEntry
	31,  // 45: hiro.AvailableRewardsItemSet.count:type_name -> hiro.RewardRangeInt64
	31,  // 46: hiro.AvailableRewardsCurrency.count:type_name -> hiro.RewardRangeInt64
	30,  // 47: hiro.AvailableRewardsEnergy.count:type_name -> hiro.RewardRangeInt32
	31,  // 48: hiro.AvailableRewardsEnergyModifier.value:type_name -> hiro.RewardRangeInt64
	32,  // 49: hiro.AvailableRewardsEnergyModifier.duration_sec:type_name -> hiro.RewardRangeUInt64
	31,  // 50: hiro.AvailableRewardsRewardModifier.value:type_name -> hiro.RewardRangeInt64
	32,  // 51: hiro.AvailableRewardsRewardModifier.duration_sec:type_name -> hiro.RewardRangeUInt64
	216, // 52: hiro.AvailableRewardsContents.items:type_name -> hiro.AvailableRewardsContents.ItemsEntry
	37,  // 53: hiro.AvailableRewardsContents.item_sets:type_name -> hiro.AvailableRewardsItemSet
	217, // 54: hiro.AvailableRewardsContents.currencies:type_name -> hiro.AvailableRewardsContents.CurrenciesEntry
	218, // 55: hiro.AvailableRewardsContents.energies:type_name -> hiro.AvailableRewardsContents.EnergiesEntry
	40,  // 56: hiro.AvailableRewardsContents.energy_modifiers:type_name -> hiro.AvailableRewardsEnergyModifier
	41,  // 57: hiro.AvailableRewardsContents.reward_modifiers:type_name -> hiro.AvailableRewardsRewardModifier
	42,  // 58: hiro.AvailableRewards.guaranteed:type_name -> hiro.AvailableRewardsContents
	42,  // 59: hiro.AvailableRewards.weighted:type_name -> hiro.AvailableRewardsContents
	28,  // 60: hiro.IncentiveClaim.reward:type_name -> hiro.Reward
	6,   // 61: hiro.Incentive.type:type_name -> hiro.IncentiveType
	43,  // 62: hiro.Incentive.recipient_rewards:type_name -> hiro.AvailableRewards
	43,  // 63: hiro.Incentive.sender_rewards:type_name -> hiro.AvailableRewards
	28,  // 64: hiro.Incentive.rewards:type_name -> hiro.Reward
	219, // 65: hiro.Incentive.claims:type_name -> hiro.Incentive.ClaimsEntry
	45,  // 66: hiro.IncentiveList.incentives:type_name -> hiro.Incentive
	6,   // 67: hiro.IncentiveInfo.type:type_name -> hiro.IncentiveType
	43,  // 68: hiro.IncentiveInfo.available_rewards:type_name -> hiro.AvailableRewards
	28,  // 69: hiro.IncentiveInfo.reward:type_name -> hiro.Reward
	43,  // 70: hiro.EventLeaderboardRewardTier.available_rewards:type_name -> hiro.AvailableRewards
	58,  // 71: hiro.EventLeaderboardRewardTiers.reward_tiers:type_name -> hiro.EventLeaderboardRewardTier
	43,  // 72: hiro.EventLeaderboard.available_rewards:type_name -> hiro.AvailableRewards
	220, // 73: hiro.EventLeaderboard.reward_tiers:type_name -> hiro.EventLeaderboard.RewardTiersEntry
	221, // 74: hiro.EventLeaderboard.change_zones:type_name -> hiro.EventLeaderboard.ChangeZonesEntry
	28,  // 75: hiro.EventLeaderboard.reward:type_name -> hiro.Reward
	222, // 76: hiro.EventLeaderboard.additional_properties:type_name -> hiro.EventLeaderboard.AdditionalPropertiesEntry
	57,  // 77: hiro.EventLeaderboard.scores:type_name -> hiro.EventLeaderboardScore
	288, // 78: hiro.EventLeaderboard.matchmaker_properties:type_name -> google.protobuf.Struct
	289, // 79: hiro.EventLeaderboardDebugRandomScoresRequest.operator:type_name -> google.protobuf.Int32Value
	43,  // 80: hiro.EconomyDonation.recipient_available_rewards:type_name -> hiro.AvailableRewards
	64,  // 81: hiro.EconomyDonation.contributors:type_name -> hiro.EconomyDonationContributor
	43,  // 82: hiro.EconomyDonation.contributor_available_rewards:type_name -> hiro.AvailableRewards
	28,  // 83: hiro.EconomyDonation.recipient_rewards:type_name -> hiro.Reward
	223, // 84: hiro.EconomyDonation.additional_properties:type_name -> hiro.EconomyDonation.AdditionalPropertiesEntry
	65,  // 85: hiro.EconomyDonationAck.donation:type_name -> hiro.EconomyDonation
	65,  // 86: hiro.EconomyDonationsList.donations:type_name -> hiro.EconomyDonation
	67,  // 87: hiro.EconomyDonationClaimRewards.donations:type_name -> hiro.EconomyDonationsList
	224, // 88: hiro.EconomyDonationClaimRewards.claimed_rewards:type_name -> hiro.EconomyDonationClaimRewards.ClaimedRewardsEntry
	225, // 89: hiro.EconomyDonationsByUserList.user_donations:type_name -> hiro.EconomyDonationsByUserList.UserDonationsEntry
	226, // 90: hiro.EconomyListStoreItemCost.currencies:type_name -> hiro.EconomyListStoreItemCost.CurrenciesEntry
	74,  // 91: hiro.EconomyListStoreItem.cost:type_name -> hiro.EconomyListStoreItemCost
	43,  // 92: hiro.EconomyListStoreItem.available_rewards:type_name -> hiro.AvailableRewards
	227, // 93: hiro.EconomyListStoreItem.additional_properties:type_name -> hiro.EconomyListStoreItem.AdditionalPropertiesEntry
	28,  // 94: hiro.EconomyListPlacement.reward:type_name -> hiro.Reward
	43,  // 95: hiro.EconomyListPlacement.available_rewards:type_name -> hiro.AvailableRewards
	228, // 96: hiro.EconomyListPlacement.additional_properties:type_name -> hiro.EconomyListPlacement.AdditionalPropertiesEntry
	75,  // 97: hiro.EconomyList.store_items:type_name -> hiro.EconomyListStoreItem
	76,  // 98: hiro.EconomyList.placements:type_name -> hiro.EconomyListPlacement
	229, // 99: hiro.EconomyList.donations:type_name -> hiro.EconomyList.DonationsEntry
	27,  // 100: hiro.EconomyList.active_reward_modifiers:type_name -> hiro.ActiveRewardModifier
	43,  // 101: hiro.InventoryItem.consume_available_rewards:type_name -> hiro.AvailableRewards
	230, // 102: hiro.InventoryItem.string_properties:type_name -> hiro.InventoryItem.StringPropertiesEntry
	231, // 103: hiro.InventoryItem.numeric_properties:type_name -> hiro.InventoryItem.NumericPropertiesEntry
	232, // 104: hiro.InventoryGrantRequest.items:type_name -> hiro.InventoryGrantRequest.ItemsEntry
	233, // 105: hiro.InventoryUpdateItemProperties.string_properties:type_name -> hiro.InventoryUpdateItemProperties.StringPropertiesEntry
	234, // 106: hiro.InventoryUpdateItemProperties.numeric_properties:type_name -> hiro.InventoryUpdateItemProperties.NumericPropertiesEntry
	235, // 107: hiro.InventoryUpdateItemsRequest.item_updates:type_name -> hiro.InventoryUpdateItemsRequest.ItemUpdatesEntry
	236, // 108: hiro.Inventory.items:type_name -> hiro.Inventory.ItemsEntry
	237, // 109: hiro.InventoryConsumeRequest.items:type_name -> hiro.InventoryConsumeRequest.ItemsEntry
	238, // 110: hiro.InventoryConsumeRequest.instances:type_name -> hiro.InventoryConsumeRequest.InstancesEntry
	83,  // 111: hiro.InventoryConsumeRewards.inventory:type_name -> hiro.Inventory
	239, // 112: hiro.InventoryConsumeRewards.rewards:type_name -> hiro.InventoryConsumeRewards.RewardsEntry
	240, // 113: hiro.InventoryConsumeRewards.instance_rewards:type_name -> hiro.InventoryConsumeRewards.InstanceRewardsEntry
	83,  // 114: hiro.InventoryUpdateAck.inventory:type_name -> hiro.Inventory
	241, // 115: hiro.InventoryList.items:type_name -> hiro.InventoryList.ItemsEntry
	242, // 116: hiro.AuctionBidAmount.currencies:type_name -> hiro.AuctionBidAmount.CurrenciesEntry
	88,  // 117: hiro.AuctionFee.fixed:type_name -> hiro.AuctionBidAmount
	243, // 118: hiro.AuctionTemplateConditionListingCost.currencies:type_name -> hiro.AuctionTemplateConditionListingCost.CurrenciesEntry
	244, // 119: hiro.AuctionTemplateConditionListingCost.items:type_name -> hiro.AuctionTemplateConditionListingCost.ItemsEntry
	245, // 120: hiro.AuctionTemplateConditionListingCost.energies:type_name -> hiro.AuctionTemplateConditionListingCost.EnergiesEntry
	88,  // 121: hiro.AuctionTemplateConditionBidIncrement.fixed:type_name -> hiro.AuctionBidAmount
	90,  // 122: hiro.AuctionTemplateCondition.listing_cost:type_name -> hiro.AuctionTemplateConditionListingCost
	88,  // 123: hiro.AuctionTemplateCondition.bid_start:type_name -> hiro.AuctionBidAmount
	91,  // 124: hiro.AuctionTemplateCondition.bid_increment:type_name -> hiro.AuctionTemplateConditionBidIncrement
	89,  // 125: hiro.AuctionTemplateCondition.fee:type_name -> hiro.AuctionFee
	246, // 126: hiro.AuctionTemplate.conditions:type_name -> hiro.AuctionTemplate.ConditionsEntry
	247, // 127: hiro.AuctionTemplates.templates:type_name -> hiro.AuctionTemplates.TemplatesEntry
	78,  // 128: hiro.AuctionReward.items:type_name -> hiro.InventoryItem
	88,  // 129: hiro.AuctionBid.bid:type_name -> hiro.AuctionBidAmount
	95,  // 130: hiro.Auction.reward:type_name -> hiro.AuctionReward
	89,  // 131: hiro.Auction.fee:type_name -> hiro.AuctionFee
	96,  // 132: hiro.Auction.bid:type_name -> hiro.AuctionBid
	88,  // 133: hiro.Auction.bid_next:type_name -> hiro.AuctionBidAmount
	96,  // 134: hiro.AuctionNotificationBid.bid:type_name -> hiro.AuctionBid
	88,  // 135: hiro.AuctionNotificationBid.bid_next:type_name -> hiro.AuctionBidAmount
	98,  // 136: hiro.StreamEnvelope.auction_bid:type_name -> hiro.AuctionNotificationBid
	97,  // 137: hiro.AuctionClaimBid.auction:type_name -> hiro.Auction
	95,  // 138: hiro.AuctionClaimBid.reward:type_name -> hiro.AuctionReward
	97,  // 139: hiro.AuctionClaimCreated.auction:type_name -> hiro.Auction
	88,  // 140: hiro.AuctionClaimCreated.reward:type_name -> hiro.AuctionBidAmount
	88,  // 141: hiro.AuctionClaimCreated.fee:type_name -> hiro.AuctionBidAmount
	78,  // 142: hiro.AuctionClaimCreated.returned_items:type_name -> hiro.InventoryItem
	97,  // 143: hiro.AuctionCancel.auction:type_name -> hiro.Auction
	95,  // 144: hiro.AuctionCancel.reward:type_name -> hiro.AuctionReward
	97,  // 145: hiro.AuctionList.auctions:type_name -> hiro.Auction
	88,  // 146: hiro.AuctionBidRequest.bid:type_name -> hiro.AuctionBidAmount
	5,   // 147: hiro.EconomyListRequest.store_type:type_name -> hiro.EconomyStoreType
	248, // 148: hiro.EconomyGrantRequest.currencies:type_name -> hiro.EconomyGrantRequest.CurrenciesEntry
	26,  // 149: hiro.EconomyGrantRequest.reward_modifiers:type_name -> hiro.RewardModifier
	249, // 150: hiro.EconomyGrantRequest.items:type_name -> hiro.EconomyGrantRequest.ItemsEntry
	5,   // 151: hiro.EconomyPurchaseIntentRequest.store_type:type_name -> hiro.EconomyStoreType
	5,   // 152: hiro.EconomyPurchaseRequest.store_type:type_name -> hiro.EconomyStoreType
	5,   // 153: hiro.EconomyPurchaseRestoreRequest.store_type:type_name -> hiro.EconomyStoreType
	250, // 154: hiro.EconomyPlacementStartRequest.metadata:type_name -> hiro.EconomyPlacementStartRequest.MetadataEntry
	28,  // 155: hiro.EconomyPlacementStatus.reward:type_name -> hiro.Reward
	251, // 156: hiro.EconomyPlacementStatus.metadata:type_name -> hiro.EconomyPlacementStatus.MetadataEntry
	252, // 157: hiro.EconomyUpdateAck.wallet:type_name -> hiro.EconomyUpdateAck.WalletEntry
	83,  // 158: hiro.EconomyUpdateAck.inventory:type_name -> hiro.Inventory
	28,  // 159: hiro.EconomyUpdateAck.reward:type_name -> hiro.Reward
	27,  // 160: hiro.EconomyUpdateAck.active_reward_modifiers:type_name -> hiro.ActiveRewardModifier
	253, // 161: hiro.EconomyPurchaseAck.wallet:type_name -> hiro.EconomyPurchaseAck.WalletEntry
	83,  // 162: hiro.EconomyPurchaseAck.inventory:type_name -> hiro.Inventory
	28,  // 163: hiro.EconomyPurchaseAck.reward:type_name -> hiro.Reward
	123, // 164: hiro.Energy.modifiers:type_name -> hiro.EnergyModifier
	43,  // 165: hiro.Energy.available_rewards:type_name -> hiro.AvailableRewards
	254, // 166: hiro.Energy.additional_properties:type_name -> hiro.Energy.AdditionalPropertiesEntry
	255, // 167: hiro.EnergyList.energies:type_name -> hiro.EnergyList.EnergiesEntry
	256, // 168: hiro.EnergySpendRequest.amounts:type_name -> hiro.EnergySpendRequest.AmountsEntry
	125, // 169: hiro.EnergySpendReward.energies:type_name -> hiro.EnergyList
	28,  // 170: hiro.EnergySpendReward.reward:type_name -> hiro.Reward
	257, // 171: hiro.EnergyGrantRequest.amounts:type_name -> hiro.EnergyGrantRequest.AmountsEntry
	129, // 172: hiro.LeaderboardConfigList.leaderboard_configs:type_name -> hiro.LeaderboardConfig
	7,   // 173: hiro.Tutorial.state:type_name -> hiro.TutorialState
	258, // 174: hiro.Tutorial.additional_properties:type_name -> hiro.Tutorial.AdditionalPropertiesEntry
	259, // 175: hiro.TutorialList.tutorials:type_name -> hiro.TutorialList.TutorialsEntry
	139, // 176: hiro.TeamList.teams:type_name -> hiro.Team
	260, // 177: hiro.UnlockableCost.items:type_name -> hiro.UnlockableCost.ItemsEntry
	261, // 178: hiro.UnlockableCost.currencies:type_name -> hiro.UnlockableCost.CurrenciesEntry
	145, // 179: hiro.Unlockable.start_cost:type_name -> hiro.UnlockableCost
	145, // 180: hiro.Unlockable.cost:type_name -> hiro.UnlockableCost
	28,  // 181: hiro.Unlockable.reward:type_name -> hiro.Reward
	43,  // 182: hiro.Unlockable.available_rewards:type_name -> hiro.AvailableRewards
	262, // 183: hiro.Unlockable.additional_properties:type_name -> hiro.Unlockable.AdditionalPropertiesEntry
	263, // 184: hiro.UnlockableSlotCost.items:type_name -> hiro.UnlockableSlotCost.ItemsEntry
	264, // 185: hiro.UnlockableSlotCost.currencies:type_name -> hiro.UnlockableSlotCost.CurrenciesEntry
	146, // 186: hiro.UnlockablesList.unlockables:type_name -> hiro.Unlockable
	146, // 187: hiro.UnlockablesList.overflow:type_name -> hiro.Unlockable
	147, // 188: hiro.UnlockablesList.slot_cost:type_name -> hiro.UnlockableSlotCost
	148, // 189: hiro.UnlockablesReward.unlockables:type_name -> hiro.UnlockablesList
	28,  // 190: hiro.UnlockablesReward.reward:type_name -> hiro.Reward
	43,  // 191: hiro.UnlockablesReward.available_rewards:type_name -> hiro.AvailableRewards
	28,  // 192: hiro.SubAchievement.reward:type_name -> hiro.Reward
	43,  // 193: hiro.SubAchievement.available_rewards:type_name -> hiro.AvailableRewards
	265, // 194: hiro.SubAchievement.additional_properties:type_name -> hiro.SubAchievement.AdditionalPropertiesEntry
	43,  // 195: hiro.Achievement.available_rewards:type_name -> hiro.AvailableRewards
	28,  // 196: hiro.Achievement.reward:type_name -> hiro.Reward
	43,  // 197: hiro.Achievement.available_total_reward:type_name -> hiro.AvailableRewards
	28,  // 198: hiro.Achievement.total_reward:type_name -> hiro.Reward
	266, // 199: hiro.Achievement.sub_achievements:type_name -> hiro.Achievement.SubAchievementsEntry
	267, // 200: hiro.Achievement.additional_properties:type_name -> hiro.Achievement.AdditionalPropertiesEntry
	268, // 201: hiro.AchievementList.achievements:type_name -> hiro.AchievementList.AchievementsEntry
	269, // 202: hiro.AchievementList.repeat_achievements:type_name -> hiro.AchievementList.RepeatAchievementsEntry
	270, // 203: hiro.AchievementsUpdateAck.achievements:type_name -> hiro.AchievementsUpdateAck.AchievementsEntry
	271, // 204: hiro.AchievementsUpdateAck.repeat_achievements:type_name -> hiro.AchievementsUpdateAck.RepeatAchievementsEntry
	272, // 205: hiro.AchievementsUpdateRequest.achievements:type_name -> hiro.AchievementsUpdateRequest.AchievementsEntry
	43,  // 206: hiro.StreakAvailableReward.reward:type_name -> hiro.AvailableRewards
	28,  // 207: hiro.StreakReward.reward:type_name -> hiro.Reward
	161, // 208: hiro.Streak.rewards:type_name -> hiro.StreakAvailableReward
	161, // 209: hiro.Streak.available_rewards:type_name -> hiro.StreakAvailableReward
	162, // 210: hiro.Streak.claimed_rewards:type_name -> hiro.StreakReward
	273, // 211: hiro.StreaksList.streaks:type_name -> hiro.StreaksList.StreaksEntry
	274, // 212: hiro.StreaksUpdateRequest.updates:type_name -> hiro.StreaksUpdateRequest.UpdatesEntry
	275, // 213: hiro.SyncInventoryItem.string_properties:type_name -> hiro.SyncInventoryItem.StringPropertiesEntry
	276, // 214: hiro.SyncInventoryItem.numeric_properties:type_name -> hiro.SyncInventoryItem.NumericPropertiesEntry
	277, // 215: hiro.SyncInventory.items:type_name -> hiro.SyncInventory.ItemsEntry
	278, // 216: hiro.SyncEconomy.currencies:type_name -> hiro.SyncEconomy.CurrenciesEntry
	27,  // 217: hiro.SyncEconomy.modifiers:type_name -> hiro.ActiveRewardModifier
	279, // 218: hiro.SyncAchievements.achievements:type_name -> hiro.SyncAchievements.AchievementsEntry
	280, // 219: hiro.SyncEnergy.energies:type_name -> hiro.SyncEnergy.EnergiesEntry
	123, // 220: hiro.SyncEnergy.modifiers:type_name -> hiro.EnergyModifier
	281, // 221: hiro.SyncEventLeaderboards.event_leaderboards:type_name -> hiro.SyncEventLeaderboards.EventLeaderboardsEntry
	282, // 222: hiro.SyncProgressionUpdate.counts:type_name -> hiro.SyncProgressionUpdate.CountsEntry
	8,   // 223: hiro.SyncProgressionUpdate.cost:type_name -> hiro.ProgressionCost
	283, // 224: hiro.SyncProgressions.progressions:type_name -> hiro.SyncProgressions.ProgressionsEntry
	284, // 225: hiro.SyncTutorials.updates:type_name -> hiro.SyncTutorials.UpdatesEntry
	285, // 226: hiro.SyncUnlockables.updates:type_name -> hiro.SyncUnlockables.UpdatesEntry
	162, // 227: hiro.SyncStreakUpdate.claimed_rewards:type_name -> hiro.StreakReward
	286, // 228: hiro.SyncStreaks.updates:type_name -> hiro.SyncStreaks.UpdatesEntry
	169, // 229: hiro.SyncRequest.inventory:type_name -> hiro.SyncInventory
	170, // 230: hiro.SyncRequest.economy:type_name -> hiro.SyncEconomy
	172, // 231: hiro.SyncRequest.achievements:type_name -> hiro.SyncAchievements
	174, // 232: hiro.SyncRequest.energy:type_name -> hiro.SyncEnergy
	176, // 233: hiro.SyncRequest.event_leaderboards:type_name -> hiro.SyncEventLeaderboards
	178, // 234: hiro.SyncRequest.progressions:type_name -> hiro.SyncProgressions
	19,  // 235: hiro.SyncRequest.stats:type_name -> hiro.StatUpdateRequest
	179, // 236: hiro.SyncRequest.tutorials:type_name -> hiro.SyncTutorials
	181, // 237: hiro.SyncRequest.unlockables:type_name -> hiro.SyncUnlockables
	183, // 238: hiro.SyncRequest.streaks:type_name -> hiro.SyncStreaks
	287, // 239: hiro.SyncResponse.wallet:type_name -> hiro.SyncResponse.WalletEntry
	83,  // 240: hiro.SyncResponse.inventory:type_name -> hiro.Inventory
	156, // 241: hiro.SyncResponse.achievements:type_name -> hiro.AchievementList
	125, // 242: hiro.SyncResponse.energy:type_name -> hiro.EnergyList
	61,  // 243: hiro.SyncResponse.event_leaderboards:type_name -> hiro.EventLeaderboard
	13,  // 244: hiro.SyncResponse.progressions:type_name -> hiro.ProgressionList
	21,  // 245: hiro.SyncResponse.stats:type_name -> hiro.StatList
	132, // 246: hiro.SyncResponse.tutorials:type_name -> hiro.TutorialList
	148, // 247: hiro.SyncResponse.unlockables:type_name -> hiro.UnlockablesList
	27,  // 248: hiro.SyncResponse.active_reward_modifiers:type_name -> hiro.ActiveRewardModifier
	164, // 249: hiro.SyncResponse.streaks:type_name -> hiro.StreaksList
	11,  // 250: hiro.ProgressionList.ProgressionsEntry.value:type_name -> hiro.Progression
	12,  // 251: hiro.ProgressionList.DeltasEntry.value:type_name -> hiro.ProgressionDelta
	11,  // 252: hiro.ProgressionGetRequest.ProgressionsEntry.value:type_name -> hiro.Progression
	20,  // 253: hiro.StatList.PublicEntry.value:type_name -> hiro.Stat
	20,  // 254: hiro.StatList.PrivateEntry.value:type_name -> hiro.Stat
	24,  // 255: hiro.Reward.ItemInstancesEntry.value:type_name -> hiro.RewardInventoryItem
	34,  // 256: hiro.AvailableRewardsStringProperty.OptionsEntry.value:type_name -> hiro.AvailableRewardsStringPropertyOption
	33,  // 257: hiro.AvailableRewardsItem.NumericPropertiesEntry.value:type_name -> hiro.RewardRangeDouble
	35,  // 258: hiro.AvailableRewardsItem.StringPropertiesEntry.value:type_name -> hiro.AvailableRewardsStringProperty
	36,  // 259: hiro.AvailableRewardsContents.ItemsEntry.value:type_name -> hiro.AvailableRewardsItem
	38,  // 260: hiro.AvailableRewardsContents.CurrenciesEntry.value:type_name -> hiro.AvailableRewardsCurrency
	39,  // 261: hiro.AvailableRewardsContents.EnergiesEntry.value:type_name -> hiro.AvailableRewardsEnergy
	44,  // 262: hiro.Incentive.ClaimsEntry.value:type_name -> hiro.IncentiveClaim
	59,  // 263: hiro.EventLeaderboard.RewardTiersEntry.value:type_name -> hiro.EventLeaderboardRewardTiers
	60,  // 264: hiro.EventLeaderboard.ChangeZonesEntry.value:type_name -> hiro.EventLeaderboardChangeZone
	29,  // 265: hiro.EconomyDonationClaimRewards.ClaimedRewardsEntry.value:type_name -> hiro.RewardList
	67,  // 266: hiro.EconomyDonationsByUserList.UserDonationsEntry.value:type_name -> hiro.EconomyDonationsList
	65,  // 267: hiro.EconomyList.DonationsEntry.value:type_name -> hiro.EconomyDonation
	81,  // 268: hiro.InventoryUpdateItemsRequest.ItemUpdatesEntry.value:type_name -> hiro.InventoryUpdateItemProperties
	78,  // 269: hiro.Inventory.ItemsEntry.value:type_name -> hiro.InventoryItem
	29,  // 270: hiro.InventoryConsumeRewards.RewardsEntry.value:type_name -> hiro.RewardList
	29,  // 271: hiro.InventoryConsumeRewards.InstanceRewardsEntry.value:type_name -> hiro.RewardList
	78,  // 272: hiro.InventoryList.ItemsEntry.value:type_name -> hiro.InventoryItem
	92,  // 273: hiro.AuctionTemplate.ConditionsEntry.value:type_name -> hiro.AuctionTemplateCondition
	93,  // 274: hiro.AuctionTemplates.TemplatesEntry.value:type_name -> hiro.AuctionTemplate
	124, // 275: hiro.EnergyList.EnergiesEntry.value:type_name -> hiro.Energy
	131, // 276: hiro.TutorialList.TutorialsEntry.value:type_name -> hiro.Tutorial
	154, // 277: hiro.Achievement.SubAchievementsEntry.value:type_name -> hiro.SubAchievement
	155, // 278: hiro.AchievementList.AchievementsEntry.value:type_name -> hiro.Achievement
	155, // 279: hiro.AchievementList.RepeatAchievementsEntry.value:type_name -> hiro.Achievement
	155, // 280: hiro.AchievementsUpdateAck.AchievementsEntry.value:type_name -> hiro.Achievement
	155, // 281: hiro.AchievementsUpdateAck.RepeatAchievementsEntry.value:type_name -> hiro.Achievement
	163, // 282: hiro.StreaksList.StreaksEntry.value:type_name -> hiro.Streak
	168, // 283: hiro.SyncInventory.ItemsEntry.value:type_name -> hiro.SyncInventoryItem
	171, // 284: hiro.SyncAchievements.AchievementsEntry.value:type_name -> hiro.SyncAchievementsUpdate
	173, // 285: hiro.SyncEnergy.EnergiesEntry.value:type_name -> hiro.SyncEnergyState
	175, // 286: hiro.SyncEventLeaderboards.EventLeaderboardsEntry.value:type_name -> hiro.SyncEventLeaderboardUpdate
	177, // 287: hiro.SyncProgressions.ProgressionsEntry.value:type_name -> hiro.SyncProgressionUpdate
	180, // 288: hiro.SyncUnlockables.UpdatesEntry.value:type_name -> hiro.SyncUnlockableUpdate
	182, // 289: hiro.SyncStreaks.UpdatesEntry.value:type_name -> hiro.SyncStreakUpdate
	290, // 290: hiro.input:extendee -> google.protobuf.EnumValueOptions
	290, // 291: hiro.output:extendee -> google.protobuf.EnumValueOptions
	292, // [292:292] is the sub-list for method output_type
	292, // [292:292] is the sub-list for method input_type
	292, // [292:292] is the sub-list for extension type_name
	290, // [290:292] is the sub-list for extension extendee
	0,   // [0:290] is the sub-list for field type_name
}

func init() { file_hiro_proto_init() }
func file_hiro_proto_init() {
	if File_hiro_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hiro_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressionCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressionPreconditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressionPreconditionsBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Progression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressionDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressionGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressionPurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressionUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressionResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*StatUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*StatUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*StatList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelMessageAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DevicePrefsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RewardInventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RewardEnergyModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RewardModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ActiveRewardModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RewardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*RewardRangeInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*RewardRangeInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*RewardRangeUInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*RewardRangeDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewardsStringPropertyOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewardsStringProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewardsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewardsItemSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewardsCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewardsEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewardsEnergyModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewardsRewardModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewardsContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*IncentiveClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*Incentive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*IncentiveList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*IncentiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*IncentiveSenderCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*IncentiveSenderDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*IncentiveSenderClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*IncentiveRecipientGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*IncentiveRecipientClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardRewardTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardRewardTiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardChangeZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardDebugFillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*EventLeaderboardDebugRandomScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonationContributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonationAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonationsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonationClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonationClaimRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonationGiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonationGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyDonationsByUserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyListStoreItemCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyListStoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyListPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryUpdateItemProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryUpdateItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*Inventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryConsumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryConsumeRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryUpdateAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionBidAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionTemplateConditionListingCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionTemplateConditionBidIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionTemplateCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*Auction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionNotificationBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*StreamEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionClaimBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionClaimCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionBidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionClaimBidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionClaimCreatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionListBidsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionListCreatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*AuctionsFollowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyPurchaseIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyPurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyPurchaseRestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyPlacementStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyPlacementStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyPlacementStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyUpdateAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*EconomyPurchaseAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*EnergyModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*Energy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*EnergyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*EnergySpendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*EnergySpendReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*EnergyGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*LeaderboardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*LeaderboardConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*Tutorial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*TutorialList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*TutorialAcceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*TutorialDeclineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*TutorialAbandonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*TutorialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*TutorialResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*RateAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*TeamCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*TeamListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*TeamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*TeamSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*TeamWriteChatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*UnlockableCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*Unlockable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*UnlockableSlotCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*UnlockablesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*UnlockablesReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*UnlockablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*UnlockablesQueueAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*UnlockablesQueueRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*UnlockablesQueueSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*SubAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*Achievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsUpdateAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*StreakAvailableReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*StreakReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*Streak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*StreaksList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*StreaksUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*StreaksClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[159].Exporter = func(v any, i int) any {
			switch v := v.(*StreaksResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[160].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[161].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[162].Exporter = func(v any, i int) any {
			switch v := v.(*SyncEconomy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[163].Exporter = func(v any, i int) any {
			switch v := v.(*SyncAchievementsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[164].Exporter = func(v any, i int) any {
			switch v := v.(*SyncAchievements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[165].Exporter = func(v any, i int) any {
			switch v := v.(*SyncEnergyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[166].Exporter = func(v any, i int) any {
			switch v := v.(*SyncEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[167].Exporter = func(v any, i int) any {
			switch v := v.(*SyncEventLeaderboardUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[168].Exporter = func(v any, i int) any {
			switch v := v.(*SyncEventLeaderboards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[169].Exporter = func(v any, i int) any {
			switch v := v.(*SyncProgressionUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[170].Exporter = func(v any, i int) any {
			switch v := v.(*SyncProgressions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[171].Exporter = func(v any, i int) any {
			switch v := v.(*SyncTutorials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[172].Exporter = func(v any, i int) any {
			switch v := v.(*SyncUnlockableUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[173].Exporter = func(v any, i int) any {
			switch v := v.(*SyncUnlockables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[174].Exporter = func(v any, i int) any {
			switch v := v.(*SyncStreakUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[175].Exporter = func(v any, i int) any {
			switch v := v.(*SyncStreaks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[176].Exporter = func(v any, i int) any {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[177].Exporter = func(v any, i int) any {
			switch v := v.(*SyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hiro_proto_msgTypes[91].OneofWrappers = []any{
		(*StreamEnvelope_AuctionBid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hiro_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   280,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_hiro_proto_goTypes,
		DependencyIndexes: file_hiro_proto_depIdxs,
		EnumInfos:         file_hiro_proto_enumTypes,
		MessageInfos:      file_hiro_proto_msgTypes,
		ExtensionInfos:    file_hiro_proto_extTypes,
	}.Build()
	File_hiro_proto = out.File
	file_hiro_proto_rawDesc = nil
	file_hiro_proto_goTypes = nil
	file_hiro_proto_depIdxs = nil
}
