// Copyright 2023 Heroic Labs & Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: hiro.proto

// The request and response objects for Hiro.

package hiro

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RpcId int32

const (
	RpcId_RPC_ID_UNSPECIFIED RpcId = 0
	// List all inventory items defined in the codex.
	RpcId_RPC_ID_INVENTORY_LIST RpcId = 1
	// List all inventory items owned by the player.
	RpcId_RPC_ID_INVENTORY_LIST_INVENTORY RpcId = 2
	// Consume one or more inventory items owned by the player.
	RpcId_RPC_ID_INVENTORY_CONSUME RpcId = 3
	// Grant one or more inventory items to the player.
	RpcId_RPC_ID_INVENTORY_GRANT RpcId = 4
	// Update the properties on one or more inventory items owned by the player.
	RpcId_RPC_ID_INVENTORY_UPDATE RpcId = 5
	// Claim one or more rewards which are partially or full donated by other players.
	RpcId_RPC_ID_ECONOMY_DONATION_CLAIM RpcId = 6
	// Donate some resource (currencies, items, etc.) to a user by donation ID.
	RpcId_RPC_ID_ECONOMY_DONATION_GIVE RpcId = 7
	// Get progress on one or more donations for a set of players by their IDs.
	RpcId_RPC_ID_ECONOMY_DONATION_GET RpcId = 8
	// Request a donation which other players can contribute into.
	RpcId_RPC_ID_ECONOMY_DONATION_REQUEST RpcId = 9
	// Get all store items defined in the Virtual Store.
	RpcId_RPC_ID_ECONOMY_STORE_GET RpcId = 10
	// Grant one or more currencies or reward modifiers to te player.
	RpcId_RPC_ID_ECONOMY_GRANT RpcId = 11
	// Send a marker of intent to purchase by the player.
	RpcId_RPC_ID_ECONOMY_PURCHASE_INTENT RpcId = 12
	// Purchase a store item by the player.
	RpcId_RPC_ID_ECONOMY_PURCHASE_ITEM RpcId = 13
	// Get the current status on an Ad placement which may have been rewarded.
	RpcId_RPC_ID_ECONOMY_PLACEMENT_STATUS RpcId = 14
	// Start a new Ad placement by placement ID.
	RpcId_RPC_ID_ECONOMY_PLACEMENT_START RpcId = 15
	// Claim one or more achievements which have completed their progress.
	RpcId_RPC_ID_ACHIEVEMENTS_CLAIM RpcId = 16
	// Get all achievements with progress accumulated by the player.
	RpcId_RPC_ID_ACHIEVEMENTS_GET RpcId = 17
	// Update one or more achievements with the same progress amount.
	RpcId_RPC_ID_ACHIEVEMENTS_UPDATE RpcId = 18
	// Get the energies and their current timers for the player.
	RpcId_RPC_ID_ENERGY_GET RpcId = 19
	// Spend one or more energies for the player.
	RpcId_RPC_ID_ENERGY_SPEND RpcId = 20
	// Get the tutorials and current progress step for the player.
	RpcId_RPC_ID_TUTORIALS_GET RpcId = 21
	// Accept an offer to step through a tutorial.
	RpcId_RPC_ID_TUTORIALS_ACCEPT RpcId = 22
	// Decline an offer to start a tutorial.
	RpcId_RPC_ID_TUTORIALS_DECLINE RpcId = 23
	// Abandon progress on a tutorial.
	RpcId_RPC_ID_TUTORIALS_ABANDON RpcId = 24
	// Update the current progress step in the tutorial by ID.
	RpcId_RPC_ID_TUTORIALS_UPDATE RpcId = 25
	// Create a team which other players can join.
	RpcId_RPC_ID_TEAMS_CREATE RpcId = 26
	// List one or more teams which the player can join.
	RpcId_RPC_ID_TEAMS_LIST RpcId = 27
	// Search for a team by name or optional short code.
	RpcId_RPC_ID_TEAMS_SEARCH RpcId = 28
	// Write a chat message to the Team's chat channel.
	RpcId_RPC_ID_TEAMS_WRITE_CHAT_MESSAGE RpcId = 29
	// Create a random unlockable to assign to a slot (or overflow) unless there are no slots.
	RpcId_RPC_ID_UNLOCKABLES_CREATE RpcId = 30
	// Get the unlockables which are currently in progress for the player.
	RpcId_RPC_ID_UNLOCKABLES_GET RpcId = 31
	// Start the unlock timer for an unlockable in the specified slot.
	RpcId_RPC_ID_UNLOCKABLES_UNLOCK_START RpcId = 32
	// Purchase an unlockable with soft currency based on the remainder cost calculated by the offset left to wait.
	RpcId_RPC_ID_UNLOCKABLES_PURCHASE_UNLOCK RpcId = 33
	// Purchase a new slot to be used to store unlockables.
	RpcId_RPC_ID_UNLOCKABLES_PURCHASE_SLOT RpcId = 34
	// Claim an unlockable whose start timer has completed or completion was fast tracked with a purchase.
	RpcId_RPC_ID_UNLOCKABLES_CLAIM RpcId = 35
	// Send feedback to the game's developers over email.
	RpcId_RPC_ID_BASE_RATE_APP RpcId = 36
	// Update or create the mobile push device tokens and preferences for the player.
	RpcId_RPC_ID_BASE_SET_DEVICE_PREFS RpcId = 37
	// Get the leaderboards defined for the game.
	RpcId_RPC_ID_LEADERBOARDS_CONFIG_GET RpcId = 38
	// Get a specified event leaderboard defined for the game.
	RpcId_RPC_ID_EVENT_LEADERBOARD_GET RpcId = 42
	// Update an event leaderboard record for a user.
	RpcId_RPC_ID_EVENT_LEADERBOARD_UPDATE RpcId = 43
	// Claim an event leaderboard reward for a user.
	RpcId_RPC_ID_EVENT_LEADERBOARD_CLAIM RpcId = 44
	// Get all stats.
	RpcId_RPC_ID_STATS_GET RpcId = 45
	// Update private stats.
	RpcId_RPC_ID_STATS_UPDATE RpcId = 46
	// Webhook RPC to handle Rewarded Video Ad placement success callbacks.
	RpcId_RPC_ID_ECONOMY_PLACEMENT_SUCCESS RpcId = 1001
	// Webhook RPC to handle Rewarded Video Ad placement failure callbacks.
	RpcId_RPC_ID_ECONOMY_PLACEMENT_FAIL RpcId = 1002
)

// Enum value maps for RpcId.
var (
	RpcId_name = map[int32]string{
		0:    "RPC_ID_UNSPECIFIED",
		1:    "RPC_ID_INVENTORY_LIST",
		2:    "RPC_ID_INVENTORY_LIST_INVENTORY",
		3:    "RPC_ID_INVENTORY_CONSUME",
		4:    "RPC_ID_INVENTORY_GRANT",
		5:    "RPC_ID_INVENTORY_UPDATE",
		6:    "RPC_ID_ECONOMY_DONATION_CLAIM",
		7:    "RPC_ID_ECONOMY_DONATION_GIVE",
		8:    "RPC_ID_ECONOMY_DONATION_GET",
		9:    "RPC_ID_ECONOMY_DONATION_REQUEST",
		10:   "RPC_ID_ECONOMY_STORE_GET",
		11:   "RPC_ID_ECONOMY_GRANT",
		12:   "RPC_ID_ECONOMY_PURCHASE_INTENT",
		13:   "RPC_ID_ECONOMY_PURCHASE_ITEM",
		14:   "RPC_ID_ECONOMY_PLACEMENT_STATUS",
		15:   "RPC_ID_ECONOMY_PLACEMENT_START",
		16:   "RPC_ID_ACHIEVEMENTS_CLAIM",
		17:   "RPC_ID_ACHIEVEMENTS_GET",
		18:   "RPC_ID_ACHIEVEMENTS_UPDATE",
		19:   "RPC_ID_ENERGY_GET",
		20:   "RPC_ID_ENERGY_SPEND",
		21:   "RPC_ID_TUTORIALS_GET",
		22:   "RPC_ID_TUTORIALS_ACCEPT",
		23:   "RPC_ID_TUTORIALS_DECLINE",
		24:   "RPC_ID_TUTORIALS_ABANDON",
		25:   "RPC_ID_TUTORIALS_UPDATE",
		26:   "RPC_ID_TEAMS_CREATE",
		27:   "RPC_ID_TEAMS_LIST",
		28:   "RPC_ID_TEAMS_SEARCH",
		29:   "RPC_ID_TEAMS_WRITE_CHAT_MESSAGE",
		30:   "RPC_ID_UNLOCKABLES_CREATE",
		31:   "RPC_ID_UNLOCKABLES_GET",
		32:   "RPC_ID_UNLOCKABLES_UNLOCK_START",
		33:   "RPC_ID_UNLOCKABLES_PURCHASE_UNLOCK",
		34:   "RPC_ID_UNLOCKABLES_PURCHASE_SLOT",
		35:   "RPC_ID_UNLOCKABLES_CLAIM",
		36:   "RPC_ID_BASE_RATE_APP",
		37:   "RPC_ID_BASE_SET_DEVICE_PREFS",
		38:   "RPC_ID_LEADERBOARDS_CONFIG_GET",
		42:   "RPC_ID_EVENT_LEADERBOARD_GET",
		43:   "RPC_ID_EVENT_LEADERBOARD_UPDATE",
		44:   "RPC_ID_EVENT_LEADERBOARD_CLAIM",
		45:   "RPC_ID_STATS_GET",
		46:   "RPC_ID_STATS_UPDATE",
		1001: "RPC_ID_ECONOMY_PLACEMENT_SUCCESS",
		1002: "RPC_ID_ECONOMY_PLACEMENT_FAIL",
	}
	RpcId_value = map[string]int32{
		"RPC_ID_UNSPECIFIED":                 0,
		"RPC_ID_INVENTORY_LIST":              1,
		"RPC_ID_INVENTORY_LIST_INVENTORY":    2,
		"RPC_ID_INVENTORY_CONSUME":           3,
		"RPC_ID_INVENTORY_GRANT":             4,
		"RPC_ID_INVENTORY_UPDATE":            5,
		"RPC_ID_ECONOMY_DONATION_CLAIM":      6,
		"RPC_ID_ECONOMY_DONATION_GIVE":       7,
		"RPC_ID_ECONOMY_DONATION_GET":        8,
		"RPC_ID_ECONOMY_DONATION_REQUEST":    9,
		"RPC_ID_ECONOMY_STORE_GET":           10,
		"RPC_ID_ECONOMY_GRANT":               11,
		"RPC_ID_ECONOMY_PURCHASE_INTENT":     12,
		"RPC_ID_ECONOMY_PURCHASE_ITEM":       13,
		"RPC_ID_ECONOMY_PLACEMENT_STATUS":    14,
		"RPC_ID_ECONOMY_PLACEMENT_START":     15,
		"RPC_ID_ACHIEVEMENTS_CLAIM":          16,
		"RPC_ID_ACHIEVEMENTS_GET":            17,
		"RPC_ID_ACHIEVEMENTS_UPDATE":         18,
		"RPC_ID_ENERGY_GET":                  19,
		"RPC_ID_ENERGY_SPEND":                20,
		"RPC_ID_TUTORIALS_GET":               21,
		"RPC_ID_TUTORIALS_ACCEPT":            22,
		"RPC_ID_TUTORIALS_DECLINE":           23,
		"RPC_ID_TUTORIALS_ABANDON":           24,
		"RPC_ID_TUTORIALS_UPDATE":            25,
		"RPC_ID_TEAMS_CREATE":                26,
		"RPC_ID_TEAMS_LIST":                  27,
		"RPC_ID_TEAMS_SEARCH":                28,
		"RPC_ID_TEAMS_WRITE_CHAT_MESSAGE":    29,
		"RPC_ID_UNLOCKABLES_CREATE":          30,
		"RPC_ID_UNLOCKABLES_GET":             31,
		"RPC_ID_UNLOCKABLES_UNLOCK_START":    32,
		"RPC_ID_UNLOCKABLES_PURCHASE_UNLOCK": 33,
		"RPC_ID_UNLOCKABLES_PURCHASE_SLOT":   34,
		"RPC_ID_UNLOCKABLES_CLAIM":           35,
		"RPC_ID_BASE_RATE_APP":               36,
		"RPC_ID_BASE_SET_DEVICE_PREFS":       37,
		"RPC_ID_LEADERBOARDS_CONFIG_GET":     38,
		"RPC_ID_EVENT_LEADERBOARD_GET":       42,
		"RPC_ID_EVENT_LEADERBOARD_UPDATE":    43,
		"RPC_ID_EVENT_LEADERBOARD_CLAIM":     44,
		"RPC_ID_STATS_GET":                   45,
		"RPC_ID_STATS_UPDATE":                46,
		"RPC_ID_ECONOMY_PLACEMENT_SUCCESS":   1001,
		"RPC_ID_ECONOMY_PLACEMENT_FAIL":      1002,
	}
)

func (x RpcId) Enum() *RpcId {
	p := new(RpcId)
	*p = x
	return p
}

func (x RpcId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcId) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[0].Descriptor()
}

func (RpcId) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[0]
}

func (x RpcId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcId.Descriptor instead.
func (RpcId) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{0}
}

// Indicate how a stats update should be handled.
type StatUpdateOperator int32

const (
	// Unspecified. Defaults to Set.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_UNSPECIFIED StatUpdateOperator = 0
	// Set the given value, overwriting any previous one.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_SET StatUpdateOperator = 1
	// Increment or decrement the existing value by the given amount. Equivalent to Set if no previous value existed.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_DELTA StatUpdateOperator = 2
	// Use the new value if it's lower than the existing one. Equivalent to Set if no previous value existed.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_MIN StatUpdateOperator = 3
	// Use the new value if it's higher than the existing one. Equivalent to Set if no previous value existed.
	StatUpdateOperator_STAT_UPDATE_OPERATOR_MAX StatUpdateOperator = 4
)

// Enum value maps for StatUpdateOperator.
var (
	StatUpdateOperator_name = map[int32]string{
		0: "STAT_UPDATE_OPERATOR_UNSPECIFIED",
		1: "STAT_UPDATE_OPERATOR_SET",
		2: "STAT_UPDATE_OPERATOR_DELTA",
		3: "STAT_UPDATE_OPERATOR_MIN",
		4: "STAT_UPDATE_OPERATOR_MAX",
	}
	StatUpdateOperator_value = map[string]int32{
		"STAT_UPDATE_OPERATOR_UNSPECIFIED": 0,
		"STAT_UPDATE_OPERATOR_SET":         1,
		"STAT_UPDATE_OPERATOR_DELTA":       2,
		"STAT_UPDATE_OPERATOR_MIN":         3,
		"STAT_UPDATE_OPERATOR_MAX":         4,
	}
)

func (x StatUpdateOperator) Enum() *StatUpdateOperator {
	p := new(StatUpdateOperator)
	*p = x
	return p
}

func (x StatUpdateOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatUpdateOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[1].Descriptor()
}

func (StatUpdateOperator) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[1]
}

func (x StatUpdateOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatUpdateOperator.Descriptor instead.
func (StatUpdateOperator) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{1}
}

// The store types supported by the Economy system.
type EconomyStoreType int32

const (
	// Unspecified. Defaults to Apple.
	EconomyStoreType_ECONOMY_STORE_TYPE_UNSPECIFIED EconomyStoreType = 0
	// Apple App Store.
	EconomyStoreType_ECONOMY_STORE_TYPE_APPLE_APPSTORE EconomyStoreType = 1
	// Google Play.
	EconomyStoreType_ECONOMY_STORE_TYPE_GOOGLE_PLAY EconomyStoreType = 2
)

// Enum value maps for EconomyStoreType.
var (
	EconomyStoreType_name = map[int32]string{
		0: "ECONOMY_STORE_TYPE_UNSPECIFIED",
		1: "ECONOMY_STORE_TYPE_APPLE_APPSTORE",
		2: "ECONOMY_STORE_TYPE_GOOGLE_PLAY",
	}
	EconomyStoreType_value = map[string]int32{
		"ECONOMY_STORE_TYPE_UNSPECIFIED":    0,
		"ECONOMY_STORE_TYPE_APPLE_APPSTORE": 1,
		"ECONOMY_STORE_TYPE_GOOGLE_PLAY":    2,
	}
)

func (x EconomyStoreType) Enum() *EconomyStoreType {
	p := new(EconomyStoreType)
	*p = x
	return p
}

func (x EconomyStoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EconomyStoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[2].Descriptor()
}

func (EconomyStoreType) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[2]
}

func (x EconomyStoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EconomyStoreType.Descriptor instead.
func (EconomyStoreType) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{2}
}

// The states of a Tutorial.
type TutorialState int32

const (
	// The Tutorial has not been accepted/declined by the user yet.
	TutorialState_TUTORIAL_STATE_NONE TutorialState = 0
	// The Tutorial was accepted.
	TutorialState_TUTORIAL_STATE_ACCEPTED TutorialState = 1
	// The Tutorial was declined.
	TutorialState_TUTORIAL_STATE_DECLINED TutorialState = 2
	// The Tutorial is in progress.
	TutorialState_TUTORIAL_STATE_IN_PROGRESS TutorialState = 3
	// The Tutorial has been completed.
	TutorialState_TUTORIAL_STATE_COMPLETED TutorialState = 4
	// The Tutorial has been abandoned.
	TutorialState_TUTORIAL_STATE_ABANDONED TutorialState = 5
)

// Enum value maps for TutorialState.
var (
	TutorialState_name = map[int32]string{
		0: "TUTORIAL_STATE_NONE",
		1: "TUTORIAL_STATE_ACCEPTED",
		2: "TUTORIAL_STATE_DECLINED",
		3: "TUTORIAL_STATE_IN_PROGRESS",
		4: "TUTORIAL_STATE_COMPLETED",
		5: "TUTORIAL_STATE_ABANDONED",
	}
	TutorialState_value = map[string]int32{
		"TUTORIAL_STATE_NONE":        0,
		"TUTORIAL_STATE_ACCEPTED":    1,
		"TUTORIAL_STATE_DECLINED":    2,
		"TUTORIAL_STATE_IN_PROGRESS": 3,
		"TUTORIAL_STATE_COMPLETED":   4,
		"TUTORIAL_STATE_ABANDONED":   5,
	}
)

func (x TutorialState) Enum() *TutorialState {
	p := new(TutorialState)
	*p = x
	return p
}

func (x TutorialState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TutorialState) Descriptor() protoreflect.EnumDescriptor {
	return file_hiro_proto_enumTypes[3].Descriptor()
}

func (TutorialState) Type() protoreflect.EnumType {
	return &file_hiro_proto_enumTypes[3]
}

func (x TutorialState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TutorialState.Descriptor instead.
func (TutorialState) EnumDescriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{3}
}

// Describes a single stat update.
type StatUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// Operator.
	Operator StatUpdateOperator `protobuf:"varint,3,opt,name=operator,proto3,enum=hiro.StatUpdateOperator" json:"operator,omitempty"`
}

func (x *StatUpdate) Reset() {
	*x = StatUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatUpdate) ProtoMessage() {}

func (x *StatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatUpdate.ProtoReflect.Descriptor instead.
func (*StatUpdate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{0}
}

func (x *StatUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatUpdate) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StatUpdate) GetOperator() StatUpdateOperator {
	if x != nil {
		return x.Operator
	}
	return StatUpdateOperator_STAT_UPDATE_OPERATOR_UNSPECIFIED
}

// Request an optionally batched stats update.
type StatUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public stat updates.
	Public []*StatUpdate `protobuf:"bytes,1,rep,name=public,proto3" json:"public,omitempty"`
	// Private stat updates.
	Private []*StatUpdate `protobuf:"bytes,2,rep,name=private,proto3" json:"private,omitempty"`
}

func (x *StatUpdateRequest) Reset() {
	*x = StatUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatUpdateRequest) ProtoMessage() {}

func (x *StatUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatUpdateRequest.ProtoReflect.Descriptor instead.
func (*StatUpdateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{1}
}

func (x *StatUpdateRequest) GetPublic() []*StatUpdate {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *StatUpdateRequest) GetPrivate() []*StatUpdate {
	if x != nil {
		return x.Private
	}
	return nil
}

// A list of stats all belonging to one user.
type StatList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public stat names and their associated data.
	Public map[string]*Stat `protobuf:"bytes,1,rep,name=public,proto3" json:"public,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Private stat names and their associated data.
	Private map[string]*Stat `protobuf:"bytes,2,rep,name=private,proto3" json:"private,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatList) Reset() {
	*x = StatList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatList) ProtoMessage() {}

func (x *StatList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatList.ProtoReflect.Descriptor instead.
func (*StatList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{2}
}

func (x *StatList) GetPublic() map[string]*Stat {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *StatList) GetPrivate() map[string]*Stat {
	if x != nil {
		return x.Private
	}
	return nil
}

// A single stat with associated information.
type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicator if this belongs to public or private stats.
	Public bool `protobuf:"varint,2,opt,name=public,proto3" json:"public,omitempty"`
	// Update time in UTC seconds.
	UpdateTimeSec int64 `protobuf:"varint,3,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// Current value.
	Value int64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// Number of values submitted.
	Count int64 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	// Total of all submitted values.
	Total int64 `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	// Smallest value submitted.
	Min int64 `protobuf:"varint,7,opt,name=min,proto3" json:"min,omitempty"`
	// Largest value submitted.
	Max int64 `protobuf:"varint,8,opt,name=max,proto3" json:"max,omitempty"`
	// First value submitted.
	First int64 `protobuf:"varint,9,opt,name=first,proto3" json:"first,omitempty"`
	// Latest value submitted.
	Last int64 `protobuf:"varint,10,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{3}
}

func (x *Stat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stat) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *Stat) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *Stat) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Stat) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Stat) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Stat) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Stat) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Stat) GetFirst() int64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *Stat) GetLast() int64 {
	if x != nil {
		return x.Last
	}
	return 0
}

// Details about a specific event leaderboard.
type EventLeaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the event leaderboard. May be an i18n code.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the event leaderboard. May be an i18n code.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The category to group the event leaderboard together with others.
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Score ordering.
	Ascending bool `protobuf:"varint,5,opt,name=ascending,proto3" json:"ascending,omitempty"`
	// Score submission operator.
	Operator string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	// The tier of this instance of the event leaderboard.
	Tier int32 `protobuf:"varint,7,opt,name=tier,proto3" json:"tier,omitempty"`
	// Time when the event starts.
	StartTimeSec int64 `protobuf:"varint,8,opt,name=start_time_sec,json=startTimeSec,proto3" json:"start_time_sec,omitempty"`
	// Time when the event ends.
	EndTimeSec int64 `protobuf:"varint,9,opt,name=end_time_sec,json=endTimeSec,proto3" json:"end_time_sec,omitempty"`
	// Time when the event expires.
	ExpiryTimeSec int64 `protobuf:"varint,10,opt,name=expiry_time_sec,json=expiryTimeSec,proto3" json:"expiry_time_sec,omitempty"`
	// The available reward and its probabilities.
	AvailableRewards *AvailableRewards `protobuf:"bytes,11,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// The possible reward tiers for this instance of the event leaderboard, based on its current tier.
	RewardTiers map[int32]*EventLeaderboardRewardTiers `protobuf:"bytes,12,rep,name=reward_tiers,json=rewardTiers,proto3" json:"reward_tiers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Claim time, if any.
	ClaimTimeSec int64 `protobuf:"varint,13,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
	// The outcome (rolled) reward for the event leaderboard.
	Reward *Reward `protobuf:"bytes,14,opt,name=reward,proto3" json:"reward,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,15,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Current participant count.
	Count int64 `protobuf:"varint,16,opt,name=count,proto3" json:"count,omitempty"`
	// Maximum participant count.
	MaxCount int64 `protobuf:"varint,17,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// Maximum number of score submissions per participant.
	MaxNumScore int64 `protobuf:"varint,18,opt,name=max_num_score,json=maxNumScore,proto3" json:"max_num_score,omitempty"`
	// Participants and their scores.
	Scores []*EventLeaderboardScore `protobuf:"bytes,19,rep,name=scores,proto3" json:"scores,omitempty"`
	// Indicates if the event is still active, and scores can be submitted.
	IsActive bool `protobuf:"varint,20,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Indicates if the event is over and its reward can be claimed.
	CanClaim bool `protobuf:"varint,21,opt,name=can_claim,json=canClaim,proto3" json:"can_claim,omitempty"`
}

func (x *EventLeaderboard) Reset() {
	*x = EventLeaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboard) ProtoMessage() {}

func (x *EventLeaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboard.ProtoReflect.Descriptor instead.
func (*EventLeaderboard) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{4}
}

func (x *EventLeaderboard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventLeaderboard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventLeaderboard) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventLeaderboard) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EventLeaderboard) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *EventLeaderboard) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *EventLeaderboard) GetTier() int32 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *EventLeaderboard) GetStartTimeSec() int64 {
	if x != nil {
		return x.StartTimeSec
	}
	return 0
}

func (x *EventLeaderboard) GetEndTimeSec() int64 {
	if x != nil {
		return x.EndTimeSec
	}
	return 0
}

func (x *EventLeaderboard) GetExpiryTimeSec() int64 {
	if x != nil {
		return x.ExpiryTimeSec
	}
	return 0
}

func (x *EventLeaderboard) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *EventLeaderboard) GetRewardTiers() map[int32]*EventLeaderboardRewardTiers {
	if x != nil {
		return x.RewardTiers
	}
	return nil
}

func (x *EventLeaderboard) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

func (x *EventLeaderboard) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *EventLeaderboard) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *EventLeaderboard) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventLeaderboard) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *EventLeaderboard) GetMaxNumScore() int64 {
	if x != nil {
		return x.MaxNumScore
	}
	return 0
}

func (x *EventLeaderboard) GetScores() []*EventLeaderboardScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *EventLeaderboard) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *EventLeaderboard) GetCanClaim() bool {
	if x != nil {
		return x.CanClaim
	}
	return false
}

// A event leaderboard's tier-specific set of rewards.
type EventLeaderboardRewardTiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Possible reward tiers.
	RewardTiers []*EventLeaderboardRewardTier `protobuf:"bytes,1,rep,name=reward_tiers,json=rewardTiers,proto3" json:"reward_tiers,omitempty"`
}

func (x *EventLeaderboardRewardTiers) Reset() {
	*x = EventLeaderboardRewardTiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardRewardTiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardRewardTiers) ProtoMessage() {}

func (x *EventLeaderboardRewardTiers) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardRewardTiers.ProtoReflect.Descriptor instead.
func (*EventLeaderboardRewardTiers) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{5}
}

func (x *EventLeaderboardRewardTiers) GetRewardTiers() []*EventLeaderboardRewardTier {
	if x != nil {
		return x.RewardTiers
	}
	return nil
}

// A reward range within a specific tier based on ranks.
type EventLeaderboardRewardTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum rank (inclusive).
	RankMax int32 `protobuf:"varint,1,opt,name=rank_max,json=rankMax,proto3" json:"rank_max,omitempty"`
	// The minimum rank (inclusive).
	RankMin int32 `protobuf:"varint,2,opt,name=rank_min,json=rankMin,proto3" json:"rank_min,omitempty"`
	// The available rewards for this range.
	AvailableRewards *AvailableRewards `protobuf:"bytes,3,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Change in tier for this rank range.
	TierChange int32 `protobuf:"varint,4,opt,name=tier_change,json=tierChange,proto3" json:"tier_change,omitempty"`
}

func (x *EventLeaderboardRewardTier) Reset() {
	*x = EventLeaderboardRewardTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardRewardTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardRewardTier) ProtoMessage() {}

func (x *EventLeaderboardRewardTier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardRewardTier.ProtoReflect.Descriptor instead.
func (*EventLeaderboardRewardTier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{6}
}

func (x *EventLeaderboardRewardTier) GetRankMax() int32 {
	if x != nil {
		return x.RankMax
	}
	return 0
}

func (x *EventLeaderboardRewardTier) GetRankMin() int32 {
	if x != nil {
		return x.RankMin
	}
	return 0
}

func (x *EventLeaderboardRewardTier) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *EventLeaderboardRewardTier) GetTierChange() int32 {
	if x != nil {
		return x.TierChange
	}
	return 0
}

// A single participant entry to an event leaderboard.
type EventLeaderboardScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Username.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Time when the user joined the event leaderboard.
	CreateTimeSec int64 `protobuf:"varint,3,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// Time when the user last submitted a score.
	UpdateTimeSec int64 `protobuf:"varint,4,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// Rank within the event leaderboard.
	Rank int64 `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	// Score.
	Score int64 `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	// Subscore.
	Subscore int64 `protobuf:"varint,7,opt,name=subscore,proto3" json:"subscore,omitempty"`
	// Number of score submissions.
	NumScores int64 `protobuf:"varint,8,opt,name=num_scores,json=numScores,proto3" json:"num_scores,omitempty"`
}

func (x *EventLeaderboardScore) Reset() {
	*x = EventLeaderboardScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardScore) ProtoMessage() {}

func (x *EventLeaderboardScore) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardScore.ProtoReflect.Descriptor instead.
func (*EventLeaderboardScore) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{7}
}

func (x *EventLeaderboardScore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventLeaderboardScore) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EventLeaderboardScore) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *EventLeaderboardScore) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *EventLeaderboardScore) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *EventLeaderboardScore) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EventLeaderboardScore) GetSubscore() int64 {
	if x != nil {
		return x.Subscore
	}
	return 0
}

func (x *EventLeaderboardScore) GetNumScores() int64 {
	if x != nil {
		return x.NumScores
	}
	return 0
}

// Find and retrieve an event leaderboard by ID, automatically joining the event if necessary.
type EventLeaderboardGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID to get, and join if necessary/possible.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventLeaderboardGet) Reset() {
	*x = EventLeaderboardGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardGet) ProtoMessage() {}

func (x *EventLeaderboardGet) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardGet.ProtoReflect.Descriptor instead.
func (*EventLeaderboardGet) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{8}
}

func (x *EventLeaderboardGet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Submit a score to an event leaderboard.
type EventLeaderboardUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Score.
	Score int64 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	// Subscore.
	Subscore int64 `protobuf:"varint,3,opt,name=subscore,proto3" json:"subscore,omitempty"`
}

func (x *EventLeaderboardUpdate) Reset() {
	*x = EventLeaderboardUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardUpdate) ProtoMessage() {}

func (x *EventLeaderboardUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardUpdate.ProtoReflect.Descriptor instead.
func (*EventLeaderboardUpdate) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{9}
}

func (x *EventLeaderboardUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventLeaderboardUpdate) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EventLeaderboardUpdate) GetSubscore() int64 {
	if x != nil {
		return x.Subscore
	}
	return 0
}

// Claim the available reward for an event leaderboard by ID.
type EventLeaderboardClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event leaderboard ID to claim.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventLeaderboardClaim) Reset() {
	*x = EventLeaderboardClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLeaderboardClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLeaderboardClaim) ProtoMessage() {}

func (x *EventLeaderboardClaim) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLeaderboardClaim.ProtoReflect.Descriptor instead.
func (*EventLeaderboardClaim) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{10}
}

func (x *EventLeaderboardClaim) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// An achievement which is a numeric task which can be unlocked and has an optional reward.
type Achievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category to group the achievement together with others.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// The UNIX timestamp for when the achievement reward was claimed, or zero if unclaimed.
	ClaimTimeSec int64 `protobuf:"varint,2,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
	// The UNIX timestamp for when the achievement total reward was claimed, or zero if unclaimed.
	TotalClaimTimeSec int64 `protobuf:"varint,3,opt,name=total_claim_time_sec,json=totalClaimTimeSec,proto3" json:"total_claim_time_sec,omitempty"`
	// The count of the achievement.
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// The UNIX timestamp for the current server time.
	CurrentTimeSec int64 `protobuf:"varint,5,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
	// A description of the achievement. May be an i18n code.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The UNIX timestamp when this achievement will expire. This may be before its next reset. A zero means it does not expire.
	ExpireTimeSec int64 `protobuf:"varint,7,opt,name=expire_time_sec,json=expireTimeSec,proto3" json:"expire_time_sec,omitempty"`
	// The ID of the achievement.
	Id string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	// The maximum count of the achievement.
	MaxCount int64 `protobuf:"varint,9,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// The name of the achievement. May be an i18n code.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The IDs which are a precondition on the progress to be made on this achievement.
	PreconditionIds []string `protobuf:"bytes,11,rep,name=precondition_ids,json=preconditionIds,proto3" json:"precondition_ids,omitempty"`
	// The UNIX timestamp when this achievement will reset.
	ResetTimeSec int64 `protobuf:"varint,12,opt,name=reset_time_sec,json=resetTimeSec,proto3" json:"reset_time_sec,omitempty"`
	// The available reward and its probabilities.
	AvailableRewards *AvailableRewards `protobuf:"bytes,13,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// The outcome (rolled) reward for the achievement.
	Reward *Reward `protobuf:"bytes,14,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available reward and its probabilities for the total completion of the achievement, if any.
	AvailableTotalReward *AvailableRewards `protobuf:"bytes,15,opt,name=available_total_reward,json=availableTotalReward,proto3" json:"available_total_reward,omitempty"`
	// The outcome (rolled) reward for the total completion of the achievement, if any.
	TotalReward *Reward `protobuf:"bytes,16,opt,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`
	// The sub-achievements for this achievement, if any.
	SubAchievements map[string]*SubAchievement `protobuf:"bytes,17,rep,name=sub_achievements,json=subAchievements,proto3" json:"sub_achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,18,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Achievement) Reset() {
	*x = Achievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement) ProtoMessage() {}

func (x *Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement.ProtoReflect.Descriptor instead.
func (*Achievement) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{11}
}

func (x *Achievement) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Achievement) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

func (x *Achievement) GetTotalClaimTimeSec() int64 {
	if x != nil {
		return x.TotalClaimTimeSec
	}
	return 0
}

func (x *Achievement) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Achievement) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

func (x *Achievement) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Achievement) GetExpireTimeSec() int64 {
	if x != nil {
		return x.ExpireTimeSec
	}
	return 0
}

func (x *Achievement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Achievement) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *Achievement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Achievement) GetPreconditionIds() []string {
	if x != nil {
		return x.PreconditionIds
	}
	return nil
}

func (x *Achievement) GetResetTimeSec() int64 {
	if x != nil {
		return x.ResetTimeSec
	}
	return 0
}

func (x *Achievement) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *Achievement) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *Achievement) GetAvailableTotalReward() *AvailableRewards {
	if x != nil {
		return x.AvailableTotalReward
	}
	return nil
}

func (x *Achievement) GetTotalReward() *Reward {
	if x != nil {
		return x.TotalReward
	}
	return nil
}

func (x *Achievement) GetSubAchievements() map[string]*SubAchievement {
	if x != nil {
		return x.SubAchievements
	}
	return nil
}

func (x *Achievement) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// A sub-achievement is an achievement which belongs as part of a parent achievement.
type SubAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category to group the sub-achievement together with others.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// The UNIX timestamp for when the sub-achievement reward was claimed, or zero if unclaimed.
	ClaimTimeSec int64 `protobuf:"varint,2,opt,name=claim_time_sec,json=claimTimeSec,proto3" json:"claim_time_sec,omitempty"`
	// The count of the sub-achievement.
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// The UNIX timestamp for the current server time.
	CurrentTimeSec int64 `protobuf:"varint,4,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
	// A description of the sub-achievement. May be an i18n code.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The UNIX timestamp when this sub-achievement will expire. This may be before its next reset. A zero means it does not expire.
	ExpireTimeSec int64 `protobuf:"varint,6,opt,name=expire_time_sec,json=expireTimeSec,proto3" json:"expire_time_sec,omitempty"`
	// The ID of the sub-achievement.
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// The maximum count of the sub-achievement.
	MaxCount int64 `protobuf:"varint,8,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// The name of the sub-achievement. May be an i18n code.
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// The IDs which are a precondition on the progress to be made on this sub-achievement.
	PreconditionIds []string `protobuf:"bytes,10,rep,name=precondition_ids,json=preconditionIds,proto3" json:"precondition_ids,omitempty"`
	// The UNIX timestamp when this sub-achievement will reset.
	ResetTimeSec int64 `protobuf:"varint,11,opt,name=reset_time_sec,json=resetTimeSec,proto3" json:"reset_time_sec,omitempty"`
	// The outcome (rolled) reward for the achievement, if any.
	Reward *Reward `protobuf:"bytes,12,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available reward and its probabilities.
	AvailableRewards *AvailableRewards `protobuf:"bytes,13,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,14,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubAchievement) Reset() {
	*x = SubAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubAchievement) ProtoMessage() {}

func (x *SubAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubAchievement.ProtoReflect.Descriptor instead.
func (*SubAchievement) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{12}
}

func (x *SubAchievement) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *SubAchievement) GetClaimTimeSec() int64 {
	if x != nil {
		return x.ClaimTimeSec
	}
	return 0
}

func (x *SubAchievement) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SubAchievement) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

func (x *SubAchievement) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubAchievement) GetExpireTimeSec() int64 {
	if x != nil {
		return x.ExpireTimeSec
	}
	return 0
}

func (x *SubAchievement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubAchievement) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *SubAchievement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubAchievement) GetPreconditionIds() []string {
	if x != nil {
		return x.PreconditionIds
	}
	return nil
}

func (x *SubAchievement) GetResetTimeSec() int64 {
	if x != nil {
		return x.ResetTimeSec
	}
	return 0
}

func (x *SubAchievement) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *SubAchievement) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *SubAchievement) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// The achievements returned by the server.
type AchievementList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The one off achievements which can be progressed or are unlocked by the user alongside all on the server.
	Achievements map[string]*Achievement `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The repeat achievements which can be progressed or are unlocked by the user alongside all on the server.
	RepeatAchievements map[string]*Achievement `protobuf:"bytes,2,rep,name=repeat_achievements,json=repeatAchievements,proto3" json:"repeat_achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AchievementList) Reset() {
	*x = AchievementList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementList) ProtoMessage() {}

func (x *AchievementList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementList.ProtoReflect.Descriptor instead.
func (*AchievementList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{13}
}

func (x *AchievementList) GetAchievements() map[string]*Achievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *AchievementList) GetRepeatAchievements() map[string]*Achievement {
	if x != nil {
		return x.RepeatAchievements
	}
	return nil
}

// Claim rewards with one or more achievement on the server.
type AchievementsClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of achievement IDs to claim.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// Whether or not to claim the total reward as well, if available.
	ClaimTotalReward bool `protobuf:"varint,2,opt,name=claim_total_reward,json=claimTotalReward,proto3" json:"claim_total_reward,omitempty"`
}

func (x *AchievementsClaimRequest) Reset() {
	*x = AchievementsClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsClaimRequest) ProtoMessage() {}

func (x *AchievementsClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsClaimRequest.ProtoReflect.Descriptor instead.
func (*AchievementsClaimRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{14}
}

func (x *AchievementsClaimRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *AchievementsClaimRequest) GetClaimTotalReward() bool {
	if x != nil {
		return x.ClaimTotalReward
	}
	return false
}

// Get all achievements for the user alongside all on the server.
type AchievementsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AchievementsGetRequest) Reset() {
	*x = AchievementsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsGetRequest) ProtoMessage() {}

func (x *AchievementsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsGetRequest.ProtoReflect.Descriptor instead.
func (*AchievementsGetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{15}
}

// A response when an achievements update is acknowledged by the server.
type AchievementsUpdateAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The one off achievements which can be progressed or are unlocked by the user.
	Achievements map[string]*Achievement `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The repeat achievements which can be progressed or are unlocked by the user.
	RepeatAchievements map[string]*Achievement `protobuf:"bytes,2,rep,name=repeat_achievements,json=repeatAchievements,proto3" json:"repeat_achievements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AchievementsUpdateAck) Reset() {
	*x = AchievementsUpdateAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsUpdateAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsUpdateAck) ProtoMessage() {}

func (x *AchievementsUpdateAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsUpdateAck.ProtoReflect.Descriptor instead.
func (*AchievementsUpdateAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{16}
}

func (x *AchievementsUpdateAck) GetAchievements() map[string]*Achievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *AchievementsUpdateAck) GetRepeatAchievements() map[string]*Achievement {
	if x != nil {
		return x.RepeatAchievements
	}
	return nil
}

// Update progress on one or more achievements on the server.
type AchievementsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of achievement IDs to progress.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// The amount of progress to increment on the achievements.
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AchievementsUpdateRequest) Reset() {
	*x = AchievementsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsUpdateRequest) ProtoMessage() {}

func (x *AchievementsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsUpdateRequest.ProtoReflect.Descriptor instead.
func (*AchievementsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{17}
}

func (x *AchievementsUpdateRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *AchievementsUpdateRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// A receipt reply from a channel message send operation.
type ChannelMessageAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel the message was sent to.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The unique ID assigned to the message.
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The code representing a message type or category.
	Code int32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	// Username of the message sender.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was created.
	CreateTime int64 `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was last updated.
	UpdateTime int64 `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// True if the message was persisted to the channel's history, false otherwise.
	Persistent bool `protobuf:"varint,7,opt,name=persistent,proto3" json:"persistent,omitempty"`
	// The name of the chat room, or an empty string if this message was not sent through a chat room.
	RoomName string `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	// The ID of the group, or an empty string if this message was not sent through a group channel.
	GroupId string `protobuf:"bytes,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
	UserIdOne string `protobuf:"bytes,10,opt,name=user_id_one,json=userIdOne,proto3" json:"user_id_one,omitempty"`
	// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
	UserIdTwo string `protobuf:"bytes,11,opt,name=user_id_two,json=userIdTwo,proto3" json:"user_id_two,omitempty"`
}

func (x *ChannelMessageAck) Reset() {
	*x = ChannelMessageAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageAck) ProtoMessage() {}

func (x *ChannelMessageAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageAck.ProtoReflect.Descriptor instead.
func (*ChannelMessageAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{18}
}

func (x *ChannelMessageAck) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelMessageAck) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChannelMessageAck) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ChannelMessageAck) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChannelMessageAck) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ChannelMessageAck) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ChannelMessageAck) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

func (x *ChannelMessageAck) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *ChannelMessageAck) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ChannelMessageAck) GetUserIdOne() string {
	if x != nil {
		return x.UserIdOne
	}
	return ""
}

func (x *ChannelMessageAck) GetUserIdTwo() string {
	if x != nil {
		return x.UserIdTwo
	}
	return ""
}

// Update or create the mobile push device tokens and preferences.
type DevicePrefsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device ID to set.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The push token from the Android device. This or 'push_token_ios' must be set.
	PushTokenAndroid string `protobuf:"bytes,2,opt,name=push_token_android,json=pushTokenAndroid,proto3" json:"push_token_android,omitempty"`
	// The push token from the iOS device. This or 'push_token_android' must be set.
	PushTokenIos string `protobuf:"bytes,3,opt,name=push_token_ios,json=pushTokenIos,proto3" json:"push_token_ios,omitempty"`
	// Additional device preferences for push events. Must be owned by the user.
	Preferences map[string]bool `protobuf:"bytes,4,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DevicePrefsRequest) Reset() {
	*x = DevicePrefsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePrefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePrefsRequest) ProtoMessage() {}

func (x *DevicePrefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePrefsRequest.ProtoReflect.Descriptor instead.
func (*DevicePrefsRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{19}
}

func (x *DevicePrefsRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DevicePrefsRequest) GetPushTokenAndroid() string {
	if x != nil {
		return x.PushTokenAndroid
	}
	return ""
}

func (x *DevicePrefsRequest) GetPushTokenIos() string {
	if x != nil {
		return x.PushTokenIos
	}
	return ""
}

func (x *DevicePrefsRequest) GetPreferences() map[string]bool {
	if x != nil {
		return x.Preferences
	}
	return nil
}

// The inventory in the economy or owned by user.
type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items in the player's inventory.
	Items map[string]*InventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{20}
}

func (x *Inventory) GetItems() map[string]*InventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request to consume some amount of items.
type InventoryConsumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Item amounts to consume, if any.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Whether or not to allow overconsumption.
	Overconsume bool `protobuf:"varint,2,opt,name=overconsume,proto3" json:"overconsume,omitempty"`
}

func (x *InventoryConsumeRequest) Reset() {
	*x = InventoryConsumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryConsumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryConsumeRequest) ProtoMessage() {}

func (x *InventoryConsumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryConsumeRequest.ProtoReflect.Descriptor instead.
func (*InventoryConsumeRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{21}
}

func (x *InventoryConsumeRequest) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *InventoryConsumeRequest) GetOverconsume() bool {
	if x != nil {
		return x.Overconsume
	}
	return false
}

// Updated inventory and rewards granted from consumption.
type InventoryConsumeRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated inventory data, if changed.
	Inventory *Inventory `protobuf:"bytes,1,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Consume rewards by item ID, if any.
	Rewards map[string]*RewardList `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InventoryConsumeRewards) Reset() {
	*x = InventoryConsumeRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryConsumeRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryConsumeRewards) ProtoMessage() {}

func (x *InventoryConsumeRewards) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryConsumeRewards.ProtoReflect.Descriptor instead.
func (*InventoryConsumeRewards) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{22}
}

func (x *InventoryConsumeRewards) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *InventoryConsumeRewards) GetRewards() map[string]*RewardList {
	if x != nil {
		return x.Rewards
	}
	return nil
}

// A donation for a user.
type EconomyDonation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user that owns this donation.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The count of how much of the donation has already been claimed.
	ClaimCount int64 `protobuf:"varint,2,opt,name=claim_count,json=claimCount,proto3" json:"claim_count,omitempty"`
	// The count of how much has been contributed by users.
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// The UNIX timestamp for the current time.
	CurrentTimeSec int64 `protobuf:"varint,4,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
	// The description for the donation, if any. May be an i18n code.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The UNIX timestamp when the donation expires.
	ExpireTimeSec int64 `protobuf:"varint,6,opt,name=expire_time_sec,json=expireTimeSec,proto3" json:"expire_time_sec,omitempty"`
	// The ID of the donation.
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// The maximum "units" which can be collected.
	MaxCount int64 `protobuf:"varint,8,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// The name for the donation, if any. May be an i18n code.
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// The configuration for rewards granted to the recipient of the donation.
	RecipientAvailableRewards *AvailableRewards `protobuf:"bytes,10,opt,name=recipient_available_rewards,json=recipientAvailableRewards,proto3" json:"recipient_available_rewards,omitempty"`
	// The maximum number of donations per contributor.
	UserContributionMaxCount int64 `protobuf:"varint,11,opt,name=user_contribution_max_count,json=userContributionMaxCount,proto3" json:"user_contribution_max_count,omitempty"`
	// The contributors to this donation, if any.
	Contributors []*EconomyDonationContributor `protobuf:"bytes,12,rep,name=contributors,proto3" json:"contributors,omitempty"`
	// The configuration for rewards granted to the contributor of the donation.
	ContributorAvailableRewards *AvailableRewards `protobuf:"bytes,13,opt,name=contributor_available_rewards,json=contributorAvailableRewards,proto3" json:"contributor_available_rewards,omitempty"`
	// All rewards claimed by the recipient of this donation.
	RecipientRewards []*Reward `protobuf:"bytes,14,rep,name=recipient_rewards,json=recipientRewards,proto3" json:"recipient_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,15,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyDonation) Reset() {
	*x = EconomyDonation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonation) ProtoMessage() {}

func (x *EconomyDonation) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonation.ProtoReflect.Descriptor instead.
func (*EconomyDonation) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{23}
}

func (x *EconomyDonation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EconomyDonation) GetClaimCount() int64 {
	if x != nil {
		return x.ClaimCount
	}
	return 0
}

func (x *EconomyDonation) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EconomyDonation) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

func (x *EconomyDonation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EconomyDonation) GetExpireTimeSec() int64 {
	if x != nil {
		return x.ExpireTimeSec
	}
	return 0
}

func (x *EconomyDonation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EconomyDonation) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *EconomyDonation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EconomyDonation) GetRecipientAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.RecipientAvailableRewards
	}
	return nil
}

func (x *EconomyDonation) GetUserContributionMaxCount() int64 {
	if x != nil {
		return x.UserContributionMaxCount
	}
	return 0
}

func (x *EconomyDonation) GetContributors() []*EconomyDonationContributor {
	if x != nil {
		return x.Contributors
	}
	return nil
}

func (x *EconomyDonation) GetContributorAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.ContributorAvailableRewards
	}
	return nil
}

func (x *EconomyDonation) GetRecipientRewards() []*Reward {
	if x != nil {
		return x.RecipientRewards
	}
	return nil
}

func (x *EconomyDonation) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// A contributor to this donation.
type EconomyDonationContributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID that contributed.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The amount they've donated.
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EconomyDonationContributor) Reset() {
	*x = EconomyDonationContributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationContributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationContributor) ProtoMessage() {}

func (x *EconomyDonationContributor) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationContributor.ProtoReflect.Descriptor instead.
func (*EconomyDonationContributor) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{24}
}

func (x *EconomyDonationContributor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EconomyDonationContributor) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// An acknowledgement of the idempotent creation of a donation for a user.
type EconomyDonationAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the donation is newly created.
	Created bool `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	// The donation requested which may already be active or newly created.
	Donation *EconomyDonation `protobuf:"bytes,2,opt,name=donation,proto3" json:"donation,omitempty"`
}

func (x *EconomyDonationAck) Reset() {
	*x = EconomyDonationAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationAck) ProtoMessage() {}

func (x *EconomyDonationAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationAck.ProtoReflect.Descriptor instead.
func (*EconomyDonationAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{25}
}

func (x *EconomyDonationAck) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

func (x *EconomyDonationAck) GetDonation() *EconomyDonation {
	if x != nil {
		return x.Donation
	}
	return nil
}

// Request to claim one or more donations.
type EconomyDonationClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The donation IDs to claim.
	DonationIds []string `protobuf:"bytes,1,rep,name=donation_ids,json=donationIds,proto3" json:"donation_ids,omitempty"`
}

func (x *EconomyDonationClaimRequest) Reset() {
	*x = EconomyDonationClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationClaimRequest) ProtoMessage() {}

func (x *EconomyDonationClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationClaimRequest.ProtoReflect.Descriptor instead.
func (*EconomyDonationClaimRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{26}
}

func (x *EconomyDonationClaimRequest) GetDonationIds() []string {
	if x != nil {
		return x.DonationIds
	}
	return nil
}

// Response to claiming one or more donations.
type EconomyDonationClaimRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All active donations for the user.
	Donations *EconomyDonationsList `protobuf:"bytes,1,opt,name=donations,proto3" json:"donations,omitempty"`
	// The rewards from this particular claim.
	ClaimedRewards map[string]*RewardList `protobuf:"bytes,2,rep,name=claimed_rewards,json=claimedRewards,proto3" json:"claimed_rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyDonationClaimRewards) Reset() {
	*x = EconomyDonationClaimRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationClaimRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationClaimRewards) ProtoMessage() {}

func (x *EconomyDonationClaimRewards) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationClaimRewards.ProtoReflect.Descriptor instead.
func (*EconomyDonationClaimRewards) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{27}
}

func (x *EconomyDonationClaimRewards) GetDonations() *EconomyDonationsList {
	if x != nil {
		return x.Donations
	}
	return nil
}

func (x *EconomyDonationClaimRewards) GetClaimedRewards() map[string]*RewardList {
	if x != nil {
		return x.ClaimedRewards
	}
	return nil
}

// Request to give a donation to a user.
type EconomyDonationGiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID who receives the donation.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The donation ID to give into.
	DonationId string `protobuf:"bytes,2,opt,name=donation_id,json=donationId,proto3" json:"donation_id,omitempty"`
}

func (x *EconomyDonationGiveRequest) Reset() {
	*x = EconomyDonationGiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationGiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationGiveRequest) ProtoMessage() {}

func (x *EconomyDonationGiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationGiveRequest.ProtoReflect.Descriptor instead.
func (*EconomyDonationGiveRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{28}
}

func (x *EconomyDonationGiveRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EconomyDonationGiveRequest) GetDonationId() string {
	if x != nil {
		return x.DonationId
	}
	return ""
}

// Request to get donations for one or more users.
type EconomyDonationGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user IDs to get donations for.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *EconomyDonationGetRequest) Reset() {
	*x = EconomyDonationGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationGetRequest) ProtoMessage() {}

func (x *EconomyDonationGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationGetRequest.ProtoReflect.Descriptor instead.
func (*EconomyDonationGetRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{29}
}

func (x *EconomyDonationGetRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Request a new donation.
type EconomyDonationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The donation ID to request, defined on the server.
	DonationId string `protobuf:"bytes,1,opt,name=donation_id,json=donationId,proto3" json:"donation_id,omitempty"`
}

func (x *EconomyDonationRequest) Reset() {
	*x = EconomyDonationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationRequest) ProtoMessage() {}

func (x *EconomyDonationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationRequest.ProtoReflect.Descriptor instead.
func (*EconomyDonationRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{30}
}

func (x *EconomyDonationRequest) GetDonationId() string {
	if x != nil {
		return x.DonationId
	}
	return ""
}

// A map of active donations keyed by user ID.
type EconomyDonationsByUserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The active donations grouped by user ID.
	UserDonations map[string]*EconomyDonationsList `protobuf:"bytes,1,rep,name=user_donations,json=userDonations,proto3" json:"user_donations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyDonationsByUserList) Reset() {
	*x = EconomyDonationsByUserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationsByUserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationsByUserList) ProtoMessage() {}

func (x *EconomyDonationsByUserList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationsByUserList.ProtoReflect.Descriptor instead.
func (*EconomyDonationsByUserList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{31}
}

func (x *EconomyDonationsByUserList) GetUserDonations() map[string]*EconomyDonationsList {
	if x != nil {
		return x.UserDonations
	}
	return nil
}

// A list of active donations returned for some set of users.
type EconomyDonationsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The active donations for a set of users.
	Donations []*EconomyDonation `protobuf:"bytes,1,rep,name=donations,proto3" json:"donations,omitempty"`
}

func (x *EconomyDonationsList) Reset() {
	*x = EconomyDonationsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyDonationsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyDonationsList) ProtoMessage() {}

func (x *EconomyDonationsList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyDonationsList.ProtoReflect.Descriptor instead.
func (*EconomyDonationsList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{32}
}

func (x *EconomyDonationsList) GetDonations() []*EconomyDonation {
	if x != nil {
		return x.Donations
	}
	return nil
}

// The response data with the available store items.
type EconomyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of store items.
	StoreItems []*EconomyListStoreItem `protobuf:"bytes,1,rep,name=store_items,json=storeItems,proto3" json:"store_items,omitempty"`
	// The list of placements.
	Placements []*EconomyListPlacement `protobuf:"bytes,2,rep,name=placements,proto3" json:"placements,omitempty"`
	// The set of active donations for the current user.
	Donations map[string]*EconomyDonation `protobuf:"bytes,3,rep,name=donations,proto3" json:"donations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyList) Reset() {
	*x = EconomyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyList) ProtoMessage() {}

func (x *EconomyList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyList.ProtoReflect.Descriptor instead.
func (*EconomyList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{33}
}

func (x *EconomyList) GetStoreItems() []*EconomyListStoreItem {
	if x != nil {
		return x.StoreItems
	}
	return nil
}

func (x *EconomyList) GetPlacements() []*EconomyListPlacement {
	if x != nil {
		return x.Placements
	}
	return nil
}

func (x *EconomyList) GetDonations() map[string]*EconomyDonation {
	if x != nil {
		return x.Donations
	}
	return nil
}

// Represents an individual available store items.
type EconomyListStoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category to group the item together with others.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// The cost of the item.
	Cost *EconomyListStoreItemCost `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// A description of the item. May be an i18n code.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The ID of the item.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the item. May be an i18n code.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The available rewards in this store item.
	AvailableRewards *AvailableRewards `protobuf:"bytes,6,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,7,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyListStoreItem) Reset() {
	*x = EconomyListStoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyListStoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyListStoreItem) ProtoMessage() {}

func (x *EconomyListStoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyListStoreItem.ProtoReflect.Descriptor instead.
func (*EconomyListStoreItem) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{34}
}

func (x *EconomyListStoreItem) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EconomyListStoreItem) GetCost() *EconomyListStoreItemCost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *EconomyListStoreItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EconomyListStoreItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EconomyListStoreItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EconomyListStoreItem) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *EconomyListStoreItem) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// The cost(s) associated with a store item.
type EconomyListStoreItemCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The virtual currencies, if any.
	Currencies map[string]int64 `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The required purchase SKU, if any.
	Sku string `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku,omitempty"`
}

func (x *EconomyListStoreItemCost) Reset() {
	*x = EconomyListStoreItemCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyListStoreItemCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyListStoreItemCost) ProtoMessage() {}

func (x *EconomyListStoreItemCost) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyListStoreItemCost.ProtoReflect.Descriptor instead.
func (*EconomyListStoreItemCost) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{35}
}

func (x *EconomyListStoreItemCost) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *EconomyListStoreItemCost) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

// Represents an available ad placement.
type EconomyListPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the placement.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The reward obtained from this placement.
	Reward *Reward `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available rewards obtained from this placement.
	AvailableRewards *AvailableRewards `protobuf:"bytes,3,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,4,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EconomyListPlacement) Reset() {
	*x = EconomyListPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyListPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyListPlacement) ProtoMessage() {}

func (x *EconomyListPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyListPlacement.ProtoReflect.Descriptor instead.
func (*EconomyListPlacement) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{36}
}

func (x *EconomyListPlacement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EconomyListPlacement) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *EconomyListPlacement) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *EconomyListPlacement) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// A item owned by the current user.
type InventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the item.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the item. May be an i18n code.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the item. May be an i18n code.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The category to group the item together with others.
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// The sets the item is grouped into.
	ItemSets []string `protobuf:"bytes,5,rep,name=item_sets,json=itemSets,proto3" json:"item_sets,omitempty"`
	// The current count of the item.
	Count int64 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// The maximum count which can be owned for this item.
	MaxCount int64 `protobuf:"varint,7,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// Whether or not the item is stackable.
	Stackable bool `protobuf:"varint,8,opt,name=stackable,proto3" json:"stackable,omitempty"`
	// Whether or not the item is consumable.
	Consumable bool `protobuf:"varint,9,opt,name=consumable,proto3" json:"consumable,omitempty"`
	// The configuration for the reward to grant for consumption.
	ConsumeAvailableRewards *AvailableRewards `protobuf:"bytes,10,opt,name=consume_available_rewards,json=consumeAvailableRewards,proto3" json:"consume_available_rewards,omitempty"`
	// The properties with string values.
	StringProperties map[string]string `protobuf:"bytes,11,rep,name=string_properties,json=stringProperties,proto3" json:"string_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The properties with numeric values.
	NumericProperties map[string]float64 `protobuf:"bytes,12,rep,name=numeric_properties,json=numericProperties,proto3" json:"numeric_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// A UNIX timestamp when the user acquired this item.
	OwnedTimeSec int64 `protobuf:"varint,13,opt,name=owned_time_sec,json=ownedTimeSec,proto3" json:"owned_time_sec,omitempty"`
	// A UNIX timestamp when the item was updated.
	UpdateTimeSec int64 `protobuf:"varint,14,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
}

func (x *InventoryItem) Reset() {
	*x = InventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryItem) ProtoMessage() {}

func (x *InventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryItem.ProtoReflect.Descriptor instead.
func (*InventoryItem) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{37}
}

func (x *InventoryItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InventoryItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InventoryItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InventoryItem) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *InventoryItem) GetItemSets() []string {
	if x != nil {
		return x.ItemSets
	}
	return nil
}

func (x *InventoryItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InventoryItem) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *InventoryItem) GetStackable() bool {
	if x != nil {
		return x.Stackable
	}
	return false
}

func (x *InventoryItem) GetConsumable() bool {
	if x != nil {
		return x.Consumable
	}
	return false
}

func (x *InventoryItem) GetConsumeAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.ConsumeAvailableRewards
	}
	return nil
}

func (x *InventoryItem) GetStringProperties() map[string]string {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

func (x *InventoryItem) GetNumericProperties() map[string]float64 {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

func (x *InventoryItem) GetOwnedTimeSec() int64 {
	if x != nil {
		return x.OwnedTimeSec
	}
	return 0
}

func (x *InventoryItem) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

// Request all inventory items in the economy.
type InventoryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category for the items to filter for, or empty for all.
	ItemCategory string `protobuf:"bytes,1,opt,name=item_category,json=itemCategory,proto3" json:"item_category,omitempty"`
}

func (x *InventoryListRequest) Reset() {
	*x = InventoryListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryListRequest) ProtoMessage() {}

func (x *InventoryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryListRequest.ProtoReflect.Descriptor instead.
func (*InventoryListRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{38}
}

func (x *InventoryListRequest) GetItemCategory() string {
	if x != nil {
		return x.ItemCategory
	}
	return ""
}

// Represents a request to grant items to the user.
type InventoryGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items to grant.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *InventoryGrantRequest) Reset() {
	*x = InventoryGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryGrantRequest) ProtoMessage() {}

func (x *InventoryGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryGrantRequest.ProtoReflect.Descriptor instead.
func (*InventoryGrantRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{39}
}

func (x *InventoryGrantRequest) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

// Represents a request to update properties of instanced items.
type InventoryUpdateItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The item updates to action, keyed by item instance ID.
	ItemUpdates map[string]*InventoryUpdateItemProperties `protobuf:"bytes,1,rep,name=item_updates,json=itemUpdates,proto3" json:"item_updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InventoryUpdateItemsRequest) Reset() {
	*x = InventoryUpdateItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryUpdateItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryUpdateItemsRequest) ProtoMessage() {}

func (x *InventoryUpdateItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryUpdateItemsRequest.ProtoReflect.Descriptor instead.
func (*InventoryUpdateItemsRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{40}
}

func (x *InventoryUpdateItemsRequest) GetItemUpdates() map[string]*InventoryUpdateItemProperties {
	if x != nil {
		return x.ItemUpdates
	}
	return nil
}

// The typed properties to update in an instanced inventory item.
type InventoryUpdateItemProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The properties with string values.
	StringProperties map[string]string `protobuf:"bytes,1,rep,name=string_properties,json=stringProperties,proto3" json:"string_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The properties with numeric values.
	NumericProperties map[string]float64 `protobuf:"bytes,2,rep,name=numeric_properties,json=numericProperties,proto3" json:"numeric_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *InventoryUpdateItemProperties) Reset() {
	*x = InventoryUpdateItemProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryUpdateItemProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryUpdateItemProperties) ProtoMessage() {}

func (x *InventoryUpdateItemProperties) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryUpdateItemProperties.ProtoReflect.Descriptor instead.
func (*InventoryUpdateItemProperties) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{41}
}

func (x *InventoryUpdateItemProperties) GetStringProperties() map[string]string {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

func (x *InventoryUpdateItemProperties) GetNumericProperties() map[string]float64 {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

// Response from granting or purchasing items. This contains updated inventory data, if changed.
type InventoryUpdateAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Update inventory data, if changed.
	Inventory *Inventory `protobuf:"bytes,1,opt,name=inventory,proto3" json:"inventory,omitempty"`
}

func (x *InventoryUpdateAck) Reset() {
	*x = InventoryUpdateAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryUpdateAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryUpdateAck) ProtoMessage() {}

func (x *InventoryUpdateAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryUpdateAck.ProtoReflect.Descriptor instead.
func (*InventoryUpdateAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{42}
}

func (x *InventoryUpdateAck) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

// Response for retrieving Inventory system data definitions.
type InventoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The inventory items from definitions and the user.
	Items map[string]*InventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InventoryList) Reset() {
	*x = InventoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryList) ProtoMessage() {}

func (x *InventoryList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryList.ProtoReflect.Descriptor instead.
func (*InventoryList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{43}
}

func (x *InventoryList) GetItems() map[string]*InventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Represents a request to retrieve available store items.
type EconomyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The game client's store type.
	StoreType EconomyStoreType `protobuf:"varint,1,opt,name=store_type,json=storeType,proto3,enum=hiro.EconomyStoreType" json:"store_type,omitempty"`
}

func (x *EconomyListRequest) Reset() {
	*x = EconomyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyListRequest) ProtoMessage() {}

func (x *EconomyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyListRequest.ProtoReflect.Descriptor instead.
func (*EconomyListRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{44}
}

func (x *EconomyListRequest) GetStoreType() EconomyStoreType {
	if x != nil {
		return x.StoreType
	}
	return EconomyStoreType_ECONOMY_STORE_TYPE_UNSPECIFIED
}

// Represents a request to grant rewards to the user.
type EconomyGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The currencies to grant.
	Currencies map[string]int64 `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The reward modifiers to grant.
	RewardModifiers []*RewardModifier `protobuf:"bytes,2,rep,name=reward_modifiers,json=rewardModifiers,proto3" json:"reward_modifiers,omitempty"`
}

func (x *EconomyGrantRequest) Reset() {
	*x = EconomyGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyGrantRequest) ProtoMessage() {}

func (x *EconomyGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyGrantRequest.ProtoReflect.Descriptor instead.
func (*EconomyGrantRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{45}
}

func (x *EconomyGrantRequest) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *EconomyGrantRequest) GetRewardModifiers() []*RewardModifier {
	if x != nil {
		return x.RewardModifiers
	}
	return nil
}

// Rewards granted to the player.
type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items granted.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The currencies granted.
	Currencies map[string]int64 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The energy granted.
	Energies map[string]int32 `protobuf:"bytes,3,rep,name=energies,proto3" json:"energies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The energy modifier granted.
	EnergyModifiers []*RewardEnergyModifier `protobuf:"bytes,4,rep,name=energy_modifiers,json=energyModifiers,proto3" json:"energy_modifiers,omitempty"`
	// The reward modifiers granted.
	RewardModifiers []*RewardModifier `protobuf:"bytes,5,rep,name=reward_modifiers,json=rewardModifiers,proto3" json:"reward_modifiers,omitempty"`
	// When the reward was granted, in UNIX time.
	GrantTimeSec int64 `protobuf:"varint,6,opt,name=grant_time_sec,json=grantTimeSec,proto3" json:"grant_time_sec,omitempty"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{46}
}

func (x *Reward) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Reward) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *Reward) GetEnergies() map[string]int32 {
	if x != nil {
		return x.Energies
	}
	return nil
}

func (x *Reward) GetEnergyModifiers() []*RewardEnergyModifier {
	if x != nil {
		return x.EnergyModifiers
	}
	return nil
}

func (x *Reward) GetRewardModifiers() []*RewardModifier {
	if x != nil {
		return x.RewardModifiers
	}
	return nil
}

func (x *Reward) GetGrantTimeSec() int64 {
	if x != nil {
		return x.GrantTimeSec
	}
	return 0
}

// A list of rewards granted to the player.
type RewardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rewards granted.
	Rewards []*Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *RewardList) Reset() {
	*x = RewardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardList) ProtoMessage() {}

func (x *RewardList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardList.ProtoReflect.Descriptor instead.
func (*RewardList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{47}
}

func (x *RewardList) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

// Energy modifier granted.
type RewardEnergyModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of they modifier granted.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The energy modifier operator.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// The value to apply. Its behavior depends on the operator.
	Value int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// The duration of the energy modifier in seconds.
	DurationSec uint64 `protobuf:"varint,4,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
	// The weight of the energy modifier, if weighted. Otherwise, -1.
	Weight int64 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *RewardEnergyModifier) Reset() {
	*x = RewardEnergyModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardEnergyModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardEnergyModifier) ProtoMessage() {}

func (x *RewardEnergyModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardEnergyModifier.ProtoReflect.Descriptor instead.
func (*RewardEnergyModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{48}
}

func (x *RewardEnergyModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RewardEnergyModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *RewardEnergyModifier) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RewardEnergyModifier) GetDurationSec() uint64 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

func (x *RewardEnergyModifier) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// A reward modifier temporally adjusts the way all rewards are handled in the economy.
type RewardModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the reward content to modify.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of reward content to modify.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The operator to apply.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	// The value to apply. Its behavior depends on the operator.
	Value int64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// The duration of the item modifier in seconds.
	DurationSec uint64 `protobuf:"varint,5,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
}

func (x *RewardModifier) Reset() {
	*x = RewardModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardModifier) ProtoMessage() {}

func (x *RewardModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardModifier.ProtoReflect.Descriptor instead.
func (*RewardModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{49}
}

func (x *RewardModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RewardModifier) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RewardModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *RewardModifier) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RewardModifier) GetDurationSec() uint64 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

// The available rewards and their probabilistic weights.
type AvailableRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The guaranteed contents to grant.
	Guaranteed *AvailableRewardsContents `protobuf:"bytes,1,opt,name=guaranteed,proto3" json:"guaranteed,omitempty"`
	// The weighted contents to grant.
	Weighted []*AvailableRewardsContents `protobuf:"bytes,2,rep,name=weighted,proto3" json:"weighted,omitempty"`
	// The number of weighted reward contents to select from among the possibilities.
	MaxRolls int64 `protobuf:"varint,3,opt,name=max_rolls,json=maxRolls,proto3" json:"max_rolls,omitempty"`
	// The total weight that all weighted reward contents are calculated against. Auto calculated if set to 0 but can be
	// set to a higher value to introduce a chance of a "none" reward.
	TotalWeight int64 `protobuf:"varint,4,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
}

func (x *AvailableRewards) Reset() {
	*x = AvailableRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewards) ProtoMessage() {}

func (x *AvailableRewards) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewards.ProtoReflect.Descriptor instead.
func (*AvailableRewards) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{50}
}

func (x *AvailableRewards) GetGuaranteed() *AvailableRewardsContents {
	if x != nil {
		return x.Guaranteed
	}
	return nil
}

func (x *AvailableRewards) GetWeighted() []*AvailableRewardsContents {
	if x != nil {
		return x.Weighted
	}
	return nil
}

func (x *AvailableRewards) GetMaxRolls() int64 {
	if x != nil {
		return x.MaxRolls
	}
	return 0
}

func (x *AvailableRewards) GetTotalWeight() int64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

// The reward contents for available rewards.
type AvailableRewardsContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All possible items from this particular reward.
	Items map[string]*AvailableRewardsItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All possible item sets from this particular reward.
	ItemSets []*AvailableRewardsItemSet `protobuf:"bytes,2,rep,name=item_sets,json=itemSets,proto3" json:"item_sets,omitempty"`
	// All possible currencies from this particular reward.
	Currencies map[string]*AvailableRewardsCurrency `protobuf:"bytes,3,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All possible energies from this particular reward.
	Energies map[string]*AvailableRewardsEnergy `protobuf:"bytes,4,rep,name=energies,proto3" json:"energies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All possible energy reward modifiers from this particular reward.
	EnergyModifiers []*AvailableRewardsEnergyModifier `protobuf:"bytes,5,rep,name=energy_modifiers,json=energyModifiers,proto3" json:"energy_modifiers,omitempty"`
	// All reward modifiers from this particular reward.
	RewardModifiers []*AvailableRewardsRewardModifier `protobuf:"bytes,6,rep,name=reward_modifiers,json=rewardModifiers,proto3" json:"reward_modifiers,omitempty"`
	// The weight of the reward contents.
	Weight int64 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *AvailableRewardsContents) Reset() {
	*x = AvailableRewardsContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsContents) ProtoMessage() {}

func (x *AvailableRewardsContents) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsContents.ProtoReflect.Descriptor instead.
func (*AvailableRewardsContents) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{51}
}

func (x *AvailableRewardsContents) GetItems() map[string]*AvailableRewardsItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AvailableRewardsContents) GetItemSets() []*AvailableRewardsItemSet {
	if x != nil {
		return x.ItemSets
	}
	return nil
}

func (x *AvailableRewardsContents) GetCurrencies() map[string]*AvailableRewardsCurrency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *AvailableRewardsContents) GetEnergies() map[string]*AvailableRewardsEnergy {
	if x != nil {
		return x.Energies
	}
	return nil
}

func (x *AvailableRewardsContents) GetEnergyModifiers() []*AvailableRewardsEnergyModifier {
	if x != nil {
		return x.EnergyModifiers
	}
	return nil
}

func (x *AvailableRewardsContents) GetRewardModifiers() []*AvailableRewardsRewardModifier {
	if x != nil {
		return x.RewardModifiers
	}
	return nil
}

func (x *AvailableRewardsContents) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// A possible item reward.
type AvailableRewardsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The possible count of the reward.
	Count *RewardRangeInt64 `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AvailableRewardsItem) Reset() {
	*x = AvailableRewardsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsItem) ProtoMessage() {}

func (x *AvailableRewardsItem) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsItem.ProtoReflect.Descriptor instead.
func (*AvailableRewardsItem) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{52}
}

func (x *AvailableRewardsItem) GetCount() *RewardRangeInt64 {
	if x != nil {
		return x.Count
	}
	return nil
}

// A possible item reward.
type AvailableRewardsItemSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of items to draw from the set.
	Count *RewardRangeInt64 `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// The number of repeat items that may be drawn from the set. Also includes the user's inventory.
	MaxRepeats int64 `protobuf:"varint,2,opt,name=max_repeats,json=maxRepeats,proto3" json:"max_repeats,omitempty"`
	// Drawn items must exist in the intersection of these sets.
	Set []string `protobuf:"bytes,3,rep,name=set,proto3" json:"set,omitempty"`
}

func (x *AvailableRewardsItemSet) Reset() {
	*x = AvailableRewardsItemSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsItemSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsItemSet) ProtoMessage() {}

func (x *AvailableRewardsItemSet) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsItemSet.ProtoReflect.Descriptor instead.
func (*AvailableRewardsItemSet) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{53}
}

func (x *AvailableRewardsItemSet) GetCount() *RewardRangeInt64 {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *AvailableRewardsItemSet) GetMaxRepeats() int64 {
	if x != nil {
		return x.MaxRepeats
	}
	return 0
}

func (x *AvailableRewardsItemSet) GetSet() []string {
	if x != nil {
		return x.Set
	}
	return nil
}

// A possible currency reward.
type AvailableRewardsCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The possible count of the currency.
	Count *RewardRangeInt64 `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AvailableRewardsCurrency) Reset() {
	*x = AvailableRewardsCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsCurrency) ProtoMessage() {}

func (x *AvailableRewardsCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsCurrency.ProtoReflect.Descriptor instead.
func (*AvailableRewardsCurrency) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{54}
}

func (x *AvailableRewardsCurrency) GetCount() *RewardRangeInt64 {
	if x != nil {
		return x.Count
	}
	return nil
}

// A possible energy reward.
type AvailableRewardsEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The possible count of the energy.
	Count *RewardRangeInt32 `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AvailableRewardsEnergy) Reset() {
	*x = AvailableRewardsEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsEnergy) ProtoMessage() {}

func (x *AvailableRewardsEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsEnergy.ProtoReflect.Descriptor instead.
func (*AvailableRewardsEnergy) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{55}
}

func (x *AvailableRewardsEnergy) GetCount() *RewardRangeInt32 {
	if x != nil {
		return x.Count
	}
	return nil
}

// A possible energy reward.
type AvailableRewardsEnergyModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the energy to modify.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The operator of the energy modifier.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// The value of the energy modifier.
	Value *RewardRangeInt64 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The possible duration of the modifier.
	DurationSec *RewardRangeInt64 `protobuf:"bytes,4,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
}

func (x *AvailableRewardsEnergyModifier) Reset() {
	*x = AvailableRewardsEnergyModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsEnergyModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsEnergyModifier) ProtoMessage() {}

func (x *AvailableRewardsEnergyModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsEnergyModifier.ProtoReflect.Descriptor instead.
func (*AvailableRewardsEnergyModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{56}
}

func (x *AvailableRewardsEnergyModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AvailableRewardsEnergyModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AvailableRewardsEnergyModifier) GetValue() *RewardRangeInt64 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AvailableRewardsEnergyModifier) GetDurationSec() *RewardRangeInt64 {
	if x != nil {
		return x.DurationSec
	}
	return nil
}

// A possible modifier reward.
type AvailableRewardsRewardModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the reward item, currency, energy, or energy modifier to modify.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of reward content to modify.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The operator of the modifier.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	// The value of the modifier.
	Value *RewardRangeInt64 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// The possible duration of the modifier.
	DurationSec *RewardRangeInt64 `protobuf:"bytes,5,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
}

func (x *AvailableRewardsRewardModifier) Reset() {
	*x = AvailableRewardsRewardModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableRewardsRewardModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableRewardsRewardModifier) ProtoMessage() {}

func (x *AvailableRewardsRewardModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableRewardsRewardModifier.ProtoReflect.Descriptor instead.
func (*AvailableRewardsRewardModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{57}
}

func (x *AvailableRewardsRewardModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AvailableRewardsRewardModifier) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AvailableRewardsRewardModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AvailableRewardsRewardModifier) GetValue() *RewardRangeInt64 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AvailableRewardsRewardModifier) GetDurationSec() *RewardRangeInt64 {
	if x != nil {
		return x.DurationSec
	}
	return nil
}

// A range of possible values.
type RewardRangeInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum bound of the range.
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum bound of the range.
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// A number that the result must be a multiple of.
	Multiple int32 `protobuf:"varint,3,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (x *RewardRangeInt32) Reset() {
	*x = RewardRangeInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardRangeInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRangeInt32) ProtoMessage() {}

func (x *RewardRangeInt32) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardRangeInt32.ProtoReflect.Descriptor instead.
func (*RewardRangeInt32) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{58}
}

func (x *RewardRangeInt32) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RewardRangeInt32) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *RewardRangeInt32) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

// A range of possible values.
type RewardRangeInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum bound of the range.
	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum bound of the range.
	Max int64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// A number that the result must be a multiple of.
	Multiple int64 `protobuf:"varint,3,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (x *RewardRangeInt64) Reset() {
	*x = RewardRangeInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardRangeInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRangeInt64) ProtoMessage() {}

func (x *RewardRangeInt64) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardRangeInt64.ProtoReflect.Descriptor instead.
func (*RewardRangeInt64) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{59}
}

func (x *RewardRangeInt64) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RewardRangeInt64) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *RewardRangeInt64) GetMultiple() int64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

// Request to create a store item purchase intent.
type EconomyPurchaseIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An item's ID.
	ItemId string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// The store type.
	StoreType EconomyStoreType `protobuf:"varint,2,opt,name=store_type,json=storeType,proto3,enum=hiro.EconomyStoreType" json:"store_type,omitempty"`
	// The SKU code, if any.
	Sku string `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku,omitempty"`
}

func (x *EconomyPurchaseIntentRequest) Reset() {
	*x = EconomyPurchaseIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPurchaseIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPurchaseIntentRequest) ProtoMessage() {}

func (x *EconomyPurchaseIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPurchaseIntentRequest.ProtoReflect.Descriptor instead.
func (*EconomyPurchaseIntentRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{60}
}

func (x *EconomyPurchaseIntentRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *EconomyPurchaseIntentRequest) GetStoreType() EconomyStoreType {
	if x != nil {
		return x.StoreType
	}
	return EconomyStoreType_ECONOMY_STORE_TYPE_UNSPECIFIED
}

func (x *EconomyPurchaseIntentRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

// Request to purchase a particular store item.
type EconomyPurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An item's ID.
	ItemId string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// The store type.
	StoreType EconomyStoreType `protobuf:"varint,2,opt,name=store_type,json=storeType,proto3,enum=hiro.EconomyStoreType" json:"store_type,omitempty"`
	// The IAP receipt purchased.
	Receipt string `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *EconomyPurchaseRequest) Reset() {
	*x = EconomyPurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPurchaseRequest) ProtoMessage() {}

func (x *EconomyPurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPurchaseRequest.ProtoReflect.Descriptor instead.
func (*EconomyPurchaseRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{61}
}

func (x *EconomyPurchaseRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *EconomyPurchaseRequest) GetStoreType() EconomyStoreType {
	if x != nil {
		return x.StoreType
	}
	return EconomyStoreType_ECONOMY_STORE_TYPE_UNSPECIFIED
}

func (x *EconomyPurchaseRequest) GetReceipt() string {
	if x != nil {
		return x.Receipt
	}
	return ""
}

// Request to retrieve status af a specific placement instance by reward ID.
type EconomyPlacementStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reward ID to check.
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// The placement ID to check, will be used if reward ID is not supplied.
	PlacementId string `protobuf:"bytes,2,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
	// The check attempt counter, optional.
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EconomyPlacementStatusRequest) Reset() {
	*x = EconomyPlacementStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPlacementStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPlacementStatusRequest) ProtoMessage() {}

func (x *EconomyPlacementStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPlacementStatusRequest.ProtoReflect.Descriptor instead.
func (*EconomyPlacementStatusRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{62}
}

func (x *EconomyPlacementStatusRequest) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

func (x *EconomyPlacementStatusRequest) GetPlacementId() string {
	if x != nil {
		return x.PlacementId
	}
	return ""
}

func (x *EconomyPlacementStatusRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Request to start a placement reward.
type EconomyPlacementStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier to start a reward for.
	PlacementId string `protobuf:"bytes,1,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
}

func (x *EconomyPlacementStartRequest) Reset() {
	*x = EconomyPlacementStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPlacementStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPlacementStartRequest) ProtoMessage() {}

func (x *EconomyPlacementStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPlacementStartRequest.ProtoReflect.Descriptor instead.
func (*EconomyPlacementStartRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{63}
}

func (x *EconomyPlacementStartRequest) GetPlacementId() string {
	if x != nil {
		return x.PlacementId
	}
	return ""
}

// The current status of a placement reward.
type EconomyPlacementStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reward ID.
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// The placement ID.
	PlacementId string `protobuf:"bytes,2,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
	// The UNIX timestamp when the placement was created.
	CreateTimeSec int64 `protobuf:"varint,3,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// The UNIX timestamp when the placement was completed.
	CompleteTimeSec int64 `protobuf:"varint,4,opt,name=complete_time_sec,json=completeTimeSec,proto3" json:"complete_time_sec,omitempty"`
	// If completed, was it successful.
	Success bool `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	// The reward for completing the placement, if it was autocompleted as part of the status request.
	Reward *Reward `protobuf:"bytes,6,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *EconomyPlacementStatus) Reset() {
	*x = EconomyPlacementStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPlacementStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPlacementStatus) ProtoMessage() {}

func (x *EconomyPlacementStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPlacementStatus.ProtoReflect.Descriptor instead.
func (*EconomyPlacementStatus) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{64}
}

func (x *EconomyPlacementStatus) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

func (x *EconomyPlacementStatus) GetPlacementId() string {
	if x != nil {
		return x.PlacementId
	}
	return ""
}

func (x *EconomyPlacementStatus) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *EconomyPlacementStatus) GetCompleteTimeSec() int64 {
	if x != nil {
		return x.CompleteTimeSec
	}
	return 0
}

func (x *EconomyPlacementStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EconomyPlacementStatus) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

// Response from granting currencies and/or items.
// Contains updated wallet and inventory data, if changed.
// Contains reward granted, if any.
type EconomyUpdateAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated wallet data, if changed.
	Wallet map[string]int64 `protobuf:"bytes,1,rep,name=wallet,proto3" json:"wallet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Update inventory data, if changed.
	Inventory *Inventory `protobuf:"bytes,2,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Reward, if any.
	Reward *Reward `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *EconomyUpdateAck) Reset() {
	*x = EconomyUpdateAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyUpdateAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyUpdateAck) ProtoMessage() {}

func (x *EconomyUpdateAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyUpdateAck.ProtoReflect.Descriptor instead.
func (*EconomyUpdateAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{65}
}

func (x *EconomyUpdateAck) GetWallet() map[string]int64 {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *EconomyUpdateAck) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *EconomyUpdateAck) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

// Response from purchasing currencies and/or items.
// Contains updated wallet and inventory data, if changed.
// Contains reward granted, if any.
// Contains indication of whether or not the purchase was a sandbox purchase.
type EconomyPurchaseAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated wallet data, if changed.
	Wallet map[string]int64 `protobuf:"bytes,1,rep,name=wallet,proto3" json:"wallet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Update inventory data, if changed.
	Inventory *Inventory `protobuf:"bytes,2,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Reward, if any.
	Reward *Reward `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
	// Was the purchase a sandbox purchase?
	IsSandboxPurchase bool `protobuf:"varint,4,opt,name=is_sandbox_purchase,json=isSandboxPurchase,proto3" json:"is_sandbox_purchase,omitempty"`
}

func (x *EconomyPurchaseAck) Reset() {
	*x = EconomyPurchaseAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EconomyPurchaseAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyPurchaseAck) ProtoMessage() {}

func (x *EconomyPurchaseAck) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyPurchaseAck.ProtoReflect.Descriptor instead.
func (*EconomyPurchaseAck) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{66}
}

func (x *EconomyPurchaseAck) GetWallet() map[string]int64 {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *EconomyPurchaseAck) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *EconomyPurchaseAck) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *EconomyPurchaseAck) GetIsSandboxPurchase() bool {
	if x != nil {
		return x.IsSandboxPurchase
	}
	return false
}

// Information about a single energy type.
type Energy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique energy identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The current amount.
	Current int32 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	// The maximum amount.
	Max int32 `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	// Next refill amount, if not at max already.
	Refill int32 `protobuf:"varint,4,opt,name=refill,proto3" json:"refill,omitempty"`
	// Number of seconds per refill, if not at max already.
	RefillSec int64 `protobuf:"varint,5,opt,name=refill_sec,json=refillSec,proto3" json:"refill_sec,omitempty"`
	// The UNIX timestamp when the count will increase, if it is not at max already.
	NextRefillTimeSec int64 `protobuf:"varint,6,opt,name=next_refill_time_sec,json=nextRefillTimeSec,proto3" json:"next_refill_time_sec,omitempty"`
	// The UNIX timestamp when the count will reach max, if it is not at max already.
	MaxRefillTimeSec int64 `protobuf:"varint,7,opt,name=max_refill_time_sec,json=maxRefillTimeSec,proto3" json:"max_refill_time_sec,omitempty"`
	// The UNIX timestamp when the count started filling, if it is not at max already.
	StartRefillTimeSec int64 `protobuf:"varint,8,opt,name=start_refill_time_sec,json=startRefillTimeSec,proto3" json:"start_refill_time_sec,omitempty"`
	// The modifiers, if any.
	Modifiers []*EnergyModifier `protobuf:"bytes,9,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
	// The available rewards, if any.
	AvailableRewards *AvailableRewards `protobuf:"bytes,10,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,11,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The current UNIX timestamp in seconds.
	CurrentTimeSec int64 `protobuf:"varint,12,opt,name=current_time_sec,json=currentTimeSec,proto3" json:"current_time_sec,omitempty"`
}

func (x *Energy) Reset() {
	*x = Energy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Energy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Energy) ProtoMessage() {}

func (x *Energy) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Energy.ProtoReflect.Descriptor instead.
func (*Energy) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{67}
}

func (x *Energy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Energy) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Energy) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Energy) GetRefill() int32 {
	if x != nil {
		return x.Refill
	}
	return 0
}

func (x *Energy) GetRefillSec() int64 {
	if x != nil {
		return x.RefillSec
	}
	return 0
}

func (x *Energy) GetNextRefillTimeSec() int64 {
	if x != nil {
		return x.NextRefillTimeSec
	}
	return 0
}

func (x *Energy) GetMaxRefillTimeSec() int64 {
	if x != nil {
		return x.MaxRefillTimeSec
	}
	return 0
}

func (x *Energy) GetStartRefillTimeSec() int64 {
	if x != nil {
		return x.StartRefillTimeSec
	}
	return 0
}

func (x *Energy) GetModifiers() []*EnergyModifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *Energy) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *Energy) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Energy) GetCurrentTimeSec() int64 {
	if x != nil {
		return x.CurrentTimeSec
	}
	return 0
}

// One or more energy values for a user.
type EnergyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Energy types keyed on the energy identifier.
	Energies map[string]*Energy `protobuf:"bytes,1,rep,name=energies,proto3" json:"energies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EnergyList) Reset() {
	*x = EnergyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyList) ProtoMessage() {}

func (x *EnergyList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyList.ProtoReflect.Descriptor instead.
func (*EnergyList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{68}
}

func (x *EnergyList) GetEnergies() map[string]*Energy {
	if x != nil {
		return x.Energies
	}
	return nil
}

// A modifier that may change energy behaviour.
type EnergyModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The modifier operator.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// The modifier value, if applicable.
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// The UNIX timestamp when the modifier became active.
	StartTimeSec int64 `protobuf:"varint,3,opt,name=start_time_sec,json=startTimeSec,proto3" json:"start_time_sec,omitempty"`
	// The UNIX timestamp when the modifier ends.
	EndTimeSec int64 `protobuf:"varint,4,opt,name=end_time_sec,json=endTimeSec,proto3" json:"end_time_sec,omitempty"`
}

func (x *EnergyModifier) Reset() {
	*x = EnergyModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyModifier) ProtoMessage() {}

func (x *EnergyModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyModifier.ProtoReflect.Descriptor instead.
func (*EnergyModifier) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{69}
}

func (x *EnergyModifier) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *EnergyModifier) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EnergyModifier) GetStartTimeSec() int64 {
	if x != nil {
		return x.StartTimeSec
	}
	return 0
}

func (x *EnergyModifier) GetEndTimeSec() int64 {
	if x != nil {
		return x.EndTimeSec
	}
	return 0
}

// Request to spend one or more energy amounts.
type EnergySpendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Energy amounts to spend.
	Amounts map[string]int32 `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EnergySpendRequest) Reset() {
	*x = EnergySpendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergySpendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergySpendRequest) ProtoMessage() {}

func (x *EnergySpendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergySpendRequest.ProtoReflect.Descriptor instead.
func (*EnergySpendRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{70}
}

func (x *EnergySpendRequest) GetAmounts() map[string]int32 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

// Request to spend one or more energy amounts.
type EnergySpendReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated list of energy.
	Energies *EnergyList `protobuf:"bytes,1,opt,name=energies,proto3" json:"energies,omitempty"`
	// The cumulative reward of spending the energies.
	Reward *Reward `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *EnergySpendReward) Reset() {
	*x = EnergySpendReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergySpendReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergySpendReward) ProtoMessage() {}

func (x *EnergySpendReward) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergySpendReward.ProtoReflect.Descriptor instead.
func (*EnergySpendReward) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{71}
}

func (x *EnergySpendReward) GetEnergies() *EnergyList {
	if x != nil {
		return x.Energies
	}
	return nil
}

func (x *EnergySpendReward) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

// A list of leaderboard configurations.
type LeaderboardConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of leaderboard configurations.
	LeaderboardConfigs []*LeaderboardConfig `protobuf:"bytes,1,rep,name=leaderboard_configs,json=leaderboardConfigs,proto3" json:"leaderboard_configs,omitempty"`
}

func (x *LeaderboardConfigList) Reset() {
	*x = LeaderboardConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardConfigList) ProtoMessage() {}

func (x *LeaderboardConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardConfigList.ProtoReflect.Descriptor instead.
func (*LeaderboardConfigList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{72}
}

func (x *LeaderboardConfigList) GetLeaderboardConfigs() []*LeaderboardConfig {
	if x != nil {
		return x.LeaderboardConfigs
	}
	return nil
}

// A leaderboard configuration.
type LeaderboardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The leaderboard id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The leaderboard sort order.
	SortOrder string `protobuf:"bytes,2,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	// The leaderboard operator.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	// The leaderboard reset schedule.
	ResetSchedule string `protobuf:"bytes,4,opt,name=reset_schedule,json=resetSchedule,proto3" json:"reset_schedule,omitempty"`
	// Whether the leaderboard is authoritative or not.
	Authoritative bool `protobuf:"varint,5,opt,name=authoritative,proto3" json:"authoritative,omitempty"`
	// List of regional leaderboards of the leaderboard, if any.
	Regions []string `protobuf:"bytes,6,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *LeaderboardConfig) Reset() {
	*x = LeaderboardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardConfig) ProtoMessage() {}

func (x *LeaderboardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardConfig.ProtoReflect.Descriptor instead.
func (*LeaderboardConfig) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{73}
}

func (x *LeaderboardConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LeaderboardConfig) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

func (x *LeaderboardConfig) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *LeaderboardConfig) GetResetSchedule() string {
	if x != nil {
		return x.ResetSchedule
	}
	return ""
}

func (x *LeaderboardConfig) GetAuthoritative() bool {
	if x != nil {
		return x.Authoritative
	}
	return false
}

func (x *LeaderboardConfig) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

// The full tutorial statuses for a given user.
type TutorialList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All available tutorials.
	Tutorials map[string]*Tutorial `protobuf:"bytes,1,rep,name=tutorials,proto3" json:"tutorials,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TutorialList) Reset() {
	*x = TutorialList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialList) ProtoMessage() {}

func (x *TutorialList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialList.ProtoReflect.Descriptor instead.
func (*TutorialList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{74}
}

func (x *TutorialList) GetTutorials() map[string]*Tutorial {
	if x != nil {
		return x.Tutorials
	}
	return nil
}

// An individual set of tutorial steps.
type Tutorial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique tutorial identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The current step in the tutorial.
	Current int32 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	// The maximum step in the tutorial based on configuration.
	Max int32 `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	// The accepted state of the tutorial.
	State TutorialState `protobuf:"varint,4,opt,name=state,proto3,enum=hiro.TutorialState" json:"state,omitempty"`
	// The UNIX timestamp when the tutorial was last updated.
	UpdateTimeSec int64 `protobuf:"varint,5,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// The UNIX timestamp when the tutorial was completed, if it is completed.
	CompleteTimeSec int64 `protobuf:"varint,6,opt,name=complete_time_sec,json=completeTimeSec,proto3" json:"complete_time_sec,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,7,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Tutorial) Reset() {
	*x = Tutorial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tutorial) ProtoMessage() {}

func (x *Tutorial) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tutorial.ProtoReflect.Descriptor instead.
func (*Tutorial) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{75}
}

func (x *Tutorial) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tutorial) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Tutorial) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Tutorial) GetState() TutorialState {
	if x != nil {
		return x.State
	}
	return TutorialState_TUTORIAL_STATE_NONE
}

func (x *Tutorial) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *Tutorial) GetCompleteTimeSec() int64 {
	if x != nil {
		return x.CompleteTimeSec
	}
	return 0
}

func (x *Tutorial) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// A request to accept a tutorial.
type TutorialAcceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tutorial to accept.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TutorialAcceptRequest) Reset() {
	*x = TutorialAcceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialAcceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialAcceptRequest) ProtoMessage() {}

func (x *TutorialAcceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialAcceptRequest.ProtoReflect.Descriptor instead.
func (*TutorialAcceptRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{76}
}

func (x *TutorialAcceptRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A request to decline a tutorial.
type TutorialDeclineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tutorial to decline.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TutorialDeclineRequest) Reset() {
	*x = TutorialDeclineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialDeclineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialDeclineRequest) ProtoMessage() {}

func (x *TutorialDeclineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialDeclineRequest.ProtoReflect.Descriptor instead.
func (*TutorialDeclineRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{77}
}

func (x *TutorialDeclineRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A request to abandon a tutorial.
type TutorialAbandonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tutorial to abandon.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TutorialAbandonRequest) Reset() {
	*x = TutorialAbandonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialAbandonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialAbandonRequest) ProtoMessage() {}

func (x *TutorialAbandonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialAbandonRequest.ProtoReflect.Descriptor instead.
func (*TutorialAbandonRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{78}
}

func (x *TutorialAbandonRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A request to update a tutorial.
type TutorialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tutorial to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The latest step that should be marked completed. All previous steps will also be marked as completed.
	Step int32 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *TutorialUpdateRequest) Reset() {
	*x = TutorialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialUpdateRequest) ProtoMessage() {}

func (x *TutorialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialUpdateRequest.ProtoReflect.Descriptor instead.
func (*TutorialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{79}
}

func (x *TutorialUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TutorialUpdateRequest) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

// The input message when the user rates the app.
type RateAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The score given by the user. Above zero values indicate a positive review.
	Score uint32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	// The message about the reason for their score. May be blank.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RateAppRequest) Reset() {
	*x = RateAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateAppRequest) ProtoMessage() {}

func (x *RateAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateAppRequest.ProtoReflect.Descriptor instead.
func (*RateAppRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{80}
}

func (x *RateAppRequest) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RateAppRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A Team represents a group of users who play together.
type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of a team.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the user who created the team.
	CreatorId string `protobuf:"bytes,2,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// The unique name of the team.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A description for the team.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	LangTag string `protobuf:"bytes,5,opt,name=lang_tag,json=langTag,proto3" json:"lang_tag,omitempty"`
	// Additional information stored as a JSON object.
	Metadata string `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// A URL for an avatar image.
	AvatarUrl string `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// Anyone can join open groups, otherwise only admins can accept members.
	Open bool `protobuf:"varint,8,opt,name=open,proto3" json:"open,omitempty"`
	// The current count of all members in the group.
	EdgeCount int32 `protobuf:"varint,9,opt,name=edge_count,json=edgeCount,proto3" json:"edge_count,omitempty"`
	// The maximum number of members allowed.
	MaxCount int32 `protobuf:"varint,10,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// The UNIX timestamp when the group was created.
	CreateTimeSec int64 `protobuf:"varint,11,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// The UNIX timestamp when the group was last updated.
	UpdateTimeSec int64 `protobuf:"varint,12,opt,name=update_time_sec,json=updateTimeSec,proto3" json:"update_time_sec,omitempty"`
	// The icon artwork reference ID for the team, if any.
	Icon string `protobuf:"bytes,13,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{81}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Team) GetLangTag() string {
	if x != nil {
		return x.LangTag
	}
	return ""
}

func (x *Team) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Team) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Team) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Team) GetEdgeCount() int32 {
	if x != nil {
		return x.EdgeCount
	}
	return 0
}

func (x *Team) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *Team) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *Team) GetUpdateTimeSec() int64 {
	if x != nil {
		return x.UpdateTimeSec
	}
	return 0
}

func (x *Team) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// A request to create a team.
type TeamCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the team to be created.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the team to be created.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// True if the team is open to join by any user.
	Open bool `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"`
	// The icon artwork reference ID for the team, if any.
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	LangTag string `protobuf:"bytes,5,opt,name=lang_tag,json=langTag,proto3" json:"lang_tag,omitempty"`
	// The starting metadata passed in as part of creating the team.
	SetupMetadata string `protobuf:"bytes,6,opt,name=setup_metadata,json=setupMetadata,proto3" json:"setup_metadata,omitempty"`
}

func (x *TeamCreateRequest) Reset() {
	*x = TeamCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamCreateRequest) ProtoMessage() {}

func (x *TeamCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamCreateRequest.ProtoReflect.Descriptor instead.
func (*TeamCreateRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{82}
}

func (x *TeamCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TeamCreateRequest) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *TeamCreateRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TeamCreateRequest) GetLangTag() string {
	if x != nil {
		return x.LangTag
	}
	return ""
}

func (x *TeamCreateRequest) GetSetupMetadata() string {
	if x != nil {
		return x.SetupMetadata
	}
	return ""
}

// A request to list teams which a user can join.
type TeamListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional cursor used to get the next page.
	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// The optional location filter.
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// An optional limit on how many results are returned. Defaults to 10.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TeamListRequest) Reset() {
	*x = TeamListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamListRequest) ProtoMessage() {}

func (x *TeamListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamListRequest.ProtoReflect.Descriptor instead.
func (*TeamListRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{83}
}

func (x *TeamListRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *TeamListRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TeamListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// A list of teams.
type TeamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current page of teams returned in the list.
	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	// A cursor used to get the next page.
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *TeamList) Reset() {
	*x = TeamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamList) ProtoMessage() {}

func (x *TeamList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamList.ProtoReflect.Descriptor instead.
func (*TeamList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{84}
}

func (x *TeamList) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *TeamList) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// A request to search for teams which the user wants to join.
type TeamSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The search term(s) passed in by the user.
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// An optional limit on how many results are returned. Defaults to 10.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TeamSearchRequest) Reset() {
	*x = TeamSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSearchRequest) ProtoMessage() {}

func (x *TeamSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSearchRequest.ProtoReflect.Descriptor instead.
func (*TeamSearchRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{85}
}

func (x *TeamSearchRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TeamSearchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// A request to write a chat message to the channel for a team the user is part of.
type TeamWriteChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the team.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The content of the chat message. Usually an escaped JSON object.
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *TeamWriteChatMessageRequest) Reset() {
	*x = TeamWriteChatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamWriteChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamWriteChatMessageRequest) ProtoMessage() {}

func (x *TeamWriteChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamWriteChatMessageRequest.ProtoReflect.Descriptor instead.
func (*TeamWriteChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{86}
}

func (x *TeamWriteChatMessageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamWriteChatMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// A single unlockable object.
type Unlockable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unlockable definition ID, eg. "bronze-chest".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The instance ID.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The category the unlockable is part of.
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	// The cost to begin unlocking this particular unlockable.
	StartCost *UnlockableCost `protobuf:"bytes,4,opt,name=start_cost,json=startCost,proto3" json:"start_cost,omitempty"`
	// The cost to fully unlock this unlockable, accounting for any time already spent.
	Cost *UnlockableCost `protobuf:"bytes,5,opt,name=cost,proto3" json:"cost,omitempty"`
	// The description, if any. May be an i18n code.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The name. May be an i18n code.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// The reward already granted when the unlockable has been claimed.
	Reward *Reward `protobuf:"bytes,8,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available rewards for when the unlockable is claimed.
	AvailableRewards *AvailableRewards `protobuf:"bytes,9,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
	// Total time this unlockable will take to unlock once activated.
	WaitTimeSec int32 `protobuf:"varint,10,opt,name=wait_time_sec,json=waitTimeSec,proto3" json:"wait_time_sec,omitempty"`
	// The UNIX timestamp when this unlockable was granted to the user.
	CreateTimeSec int64 `protobuf:"varint,11,opt,name=create_time_sec,json=createTimeSec,proto3" json:"create_time_sec,omitempty"`
	// The UNIX timestamp when this unlockable began unlocking, or 0 if it is not active.
	UnlockStartTimeSec int64 `protobuf:"varint,12,opt,name=unlock_start_time_sec,json=unlockStartTimeSec,proto3" json:"unlock_start_time_sec,omitempty"`
	// The UNIX timestamp when this unlockable will complete unlocking and become claimable, or 0 if it is not active.
	UnlockCompleteTimeSec int64 `protobuf:"varint,13,opt,name=unlock_complete_time_sec,json=unlockCompleteTimeSec,proto3" json:"unlock_complete_time_sec,omitempty"`
	// If the unlock process has completed (either by time elapsed or purchase) and the unlockable reward can be claimed.
	CanClaim bool `protobuf:"varint,14,opt,name=can_claim,json=canClaim,proto3" json:"can_claim,omitempty"`
	// Additional metadata properties.
	AdditionalProperties map[string]string `protobuf:"bytes,15,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Unlockable) Reset() {
	*x = Unlockable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unlockable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unlockable) ProtoMessage() {}

func (x *Unlockable) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unlockable.ProtoReflect.Descriptor instead.
func (*Unlockable) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{87}
}

func (x *Unlockable) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Unlockable) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Unlockable) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Unlockable) GetStartCost() *UnlockableCost {
	if x != nil {
		return x.StartCost
	}
	return nil
}

func (x *Unlockable) GetCost() *UnlockableCost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Unlockable) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Unlockable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Unlockable) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *Unlockable) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

func (x *Unlockable) GetWaitTimeSec() int32 {
	if x != nil {
		return x.WaitTimeSec
	}
	return 0
}

func (x *Unlockable) GetCreateTimeSec() int64 {
	if x != nil {
		return x.CreateTimeSec
	}
	return 0
}

func (x *Unlockable) GetUnlockStartTimeSec() int64 {
	if x != nil {
		return x.UnlockStartTimeSec
	}
	return 0
}

func (x *Unlockable) GetUnlockCompleteTimeSec() int64 {
	if x != nil {
		return x.UnlockCompleteTimeSec
	}
	return 0
}

func (x *Unlockable) GetCanClaim() bool {
	if x != nil {
		return x.CanClaim
	}
	return false
}

func (x *Unlockable) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// A list of unlockables currently owned by a user.
type UnlockablesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of unlockables owned by a user.
	Unlockables []*Unlockable `protobuf:"bytes,1,rep,name=unlockables,proto3" json:"unlockables,omitempty"`
	// The unlockable overflow slot.
	Overflow *Unlockable `protobuf:"bytes,2,opt,name=overflow,proto3" json:"overflow,omitempty"`
	// The total number of non-overflow slots.
	Slots int32 `protobuf:"varint,3,opt,name=slots,proto3" json:"slots,omitempty"`
	// The current number of active slots.
	ActiveSlots int32 `protobuf:"varint,4,opt,name=active_slots,json=activeSlots,proto3" json:"active_slots,omitempty"`
	// The max number of active slots the user can ever obtain.
	MaxActiveSlots int32 `protobuf:"varint,5,opt,name=max_active_slots,json=maxActiveSlots,proto3" json:"max_active_slots,omitempty"`
	// The cost to purchase the next active slot, if another is available for purchase.
	SlotCost *UnlockableSlotCost `protobuf:"bytes,6,opt,name=slot_cost,json=slotCost,proto3" json:"slot_cost,omitempty"`
	// The newly granted unlockable, if any.
	InstanceId string `protobuf:"bytes,7,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *UnlockablesList) Reset() {
	*x = UnlockablesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockablesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockablesList) ProtoMessage() {}

func (x *UnlockablesList) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockablesList.ProtoReflect.Descriptor instead.
func (*UnlockablesList) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{88}
}

func (x *UnlockablesList) GetUnlockables() []*Unlockable {
	if x != nil {
		return x.Unlockables
	}
	return nil
}

func (x *UnlockablesList) GetOverflow() *Unlockable {
	if x != nil {
		return x.Overflow
	}
	return nil
}

func (x *UnlockablesList) GetSlots() int32 {
	if x != nil {
		return x.Slots
	}
	return 0
}

func (x *UnlockablesList) GetActiveSlots() int32 {
	if x != nil {
		return x.ActiveSlots
	}
	return 0
}

func (x *UnlockablesList) GetMaxActiveSlots() int32 {
	if x != nil {
		return x.MaxActiveSlots
	}
	return 0
}

func (x *UnlockablesList) GetSlotCost() *UnlockableSlotCost {
	if x != nil {
		return x.SlotCost
	}
	return nil
}

func (x *UnlockablesList) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// The unlockable cost, may relate to starting an unlock, or fully completing it.
type UnlockableCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items which will be deducted.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The currencies which will be deducted.
	Currencies map[string]int64 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UnlockableCost) Reset() {
	*x = UnlockableCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockableCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockableCost) ProtoMessage() {}

func (x *UnlockableCost) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockableCost.ProtoReflect.Descriptor instead.
func (*UnlockableCost) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{89}
}

func (x *UnlockableCost) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UnlockableCost) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

// The cost to purchase an additional unlockable active slot.
type UnlockableSlotCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items which will be deducted.
	Items map[string]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The currencies which will be deducted.
	Currencies map[string]int64 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UnlockableSlotCost) Reset() {
	*x = UnlockableSlotCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockableSlotCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockableSlotCost) ProtoMessage() {}

func (x *UnlockableSlotCost) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockableSlotCost.ProtoReflect.Descriptor instead.
func (*UnlockableSlotCost) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{90}
}

func (x *UnlockableSlotCost) GetItems() map[string]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UnlockableSlotCost) GetCurrencies() map[string]int64 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

// A reward that was granted upon unlock, and a new state of all unlockables.
type UnlockablesReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated state of remaining unlockables.
	Unlockables *UnlockablesList `protobuf:"bytes,1,opt,name=unlockables,proto3" json:"unlockables,omitempty"`
	// The reward granted from the unlockable.
	Reward *Reward `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
	// The available rewards active for the unlockable.
	AvailableRewards *AvailableRewards `protobuf:"bytes,3,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
}

func (x *UnlockablesReward) Reset() {
	*x = UnlockablesReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockablesReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockablesReward) ProtoMessage() {}

func (x *UnlockablesReward) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockablesReward.ProtoReflect.Descriptor instead.
func (*UnlockablesReward) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{91}
}

func (x *UnlockablesReward) GetUnlockables() *UnlockablesList {
	if x != nil {
		return x.Unlockables
	}
	return nil
}

func (x *UnlockablesReward) GetReward() *Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *UnlockablesReward) GetAvailableRewards() *AvailableRewards {
	if x != nil {
		return x.AvailableRewards
	}
	return nil
}

// Request body for interacting with a specific unlockable.
type UnlockablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unlockable instance ID.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *UnlockablesRequest) Reset() {
	*x = UnlockablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hiro_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockablesRequest) ProtoMessage() {}

func (x *UnlockablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hiro_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockablesRequest.ProtoReflect.Descriptor instead.
func (*UnlockablesRequest) Descriptor() ([]byte, []int) {
	return file_hiro_proto_rawDescGZIP(), []int{92}
}

func (x *UnlockablesRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

var file_hiro_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         1000,
		Name:          "hiro.input",
		Tag:           "bytes,1000,opt,name=input",
		Filename:      "hiro.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         1001,
		Name:          "hiro.output",
		Tag:           "bytes,1001,opt,name=output",
		Filename:      "hiro.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// The input proto message to the Nakama RPC.
	//
	// optional string input = 1000;
	E_Input = &file_hiro_proto_extTypes[0]
	// The output proto message of the Nakama RPC.
	//
	// optional string output = 1001;
	E_Output = &file_hiro_proto_extTypes[1]
)

var File_hiro_proto protoreflect.FileDescriptor

var file_hiro_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x68, 0x69,
	0x72, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x69, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x84, 0x02,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x35,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x45, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x0c,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x61, 0x73,
	0x74, 0x22, 0xe8, 0x07, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x65, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x1a, 0x61, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x1b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x69, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x73,
	0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61,
	0x6e, 0x6b, 0x4d, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x15,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a,
	0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xde, 0x07, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x16,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x73,
	0x75, 0x62, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73,
	0x75, 0x62, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x60,
	0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x1a, 0x58, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x53, 0x75, 0x62, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x87, 0x05, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x63, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x02,
	0x0a, 0x0f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e,
	0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x52,
	0x0a, 0x11, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x18,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xfe, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x51, 0x0a, 0x0c,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x2e,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x64, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x52, 0x0a, 0x11, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x19, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x74, 0x77, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x77, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6f, 0x73,
	0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x3e, 0x0a,
	0x10, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x01,
	0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4d, 0x0a,
	0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a,
	0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x76, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f,
	0x76, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x44, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x4c, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb9, 0x06, 0x0a, 0x0f, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x1b,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x19, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x1d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x64, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4b, 0x0a, 0x1a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x12,
	0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08,
	0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x40, 0x0a, 0x1b, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x22, 0x8c, 0x02, 0x0a, 0x1b, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x53, 0x0a, 0x13, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x56, 0x0a, 0x1a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x1a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5c, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x14, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x0b, 0x45, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x53, 0x0a, 0x0e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x03, 0x0a, 0x14, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x69, 0x0a, 0x15, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb,
	0x01, 0x0a, 0x18, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x1a, 0x3d, 0x0a,
	0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x02, 0x0a,
	0x14, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x69, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xdf, 0x05, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x1a, 0x43, 0x0a, 0x15, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x44, 0x0a, 0x16, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x63, 0x0a, 0x10,
	0x49, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xfd, 0x02, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x12, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x43, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4d,
	0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a,
	0x12, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x04,
	0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x10, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x1a, 0x38, 0x0a, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x34, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x89, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x08, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x08, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xfb, 0x05, 0x0a, 0x18, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x4f,
	0x0a, 0x10, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x4f, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x54, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d,
	0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a,
	0x0d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x14, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7a,
	0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x48, 0x0a, 0x18, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x16, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb5, 0x01, 0x0a,
	0x1e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x22, 0x52, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x45, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x22, 0x82, 0x01, 0x0a, 0x16,
	0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x22, 0x75, 0x0a, 0x1d, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x1c, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x16, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x10, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x3a,
	0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x1a,
	0x39, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x63,
	0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd7, 0x04, 0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a,
	0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x2d,
	0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x32, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x0a, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x72,
	0x6f, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x69, 0x65, 0x73, 0x1a, 0x49, 0x0a, 0x0d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x8a, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x22, 0x91, 0x01, 0x0a,
	0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x67, 0x0a, 0x11, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x61, 0x0a, 0x15, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xc5, 0x01, 0x0a,
	0x11, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0x4c, 0x0a, 0x0e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x69, 0x72, 0x6f,
	0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x02, 0x0a, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x5d, 0x0a, 0x15,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x15, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a,
	0x16, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x3b, 0x0a, 0x15, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x40,
	0x0a, 0x0e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xf5, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x64,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x61,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x5b, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x44, 0x0a,
	0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0x3f, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x47, 0x0a, 0x1b, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd8, 0x05,
	0x0a, 0x0a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x5f,
	0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x02, 0x0a, 0x0f, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x08,
	0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x69,
	0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x38,
	0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a,
	0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x72, 0x6f, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x35, 0x0a, 0x12, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x2a, 0xb5, 0x18, 0x0a, 0x05, 0x52, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x15, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x01, 0x1a, 0x27, 0xc2, 0x3e, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e,
	0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x10, 0x02, 0x1a, 0x27, 0xc2, 0x3e, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0d, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x18,
	0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0x34, 0xc2, 0x3e, 0x17, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x49, 0x0a, 0x16, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x2d, 0xc2, 0x3e,
	0x15, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x12, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x17, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x1a, 0x33, 0xc2, 0x3e, 0x1b, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x12, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x5f, 0x0a,
	0x1d, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f,
	0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x06,
	0x1a, 0x3c, 0xc2, 0x3e, 0x1b, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xca, 0x3e, 0x1b, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x52,
	0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59,
	0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0x07,
	0x1a, 0x30, 0xc2, 0x3e, 0x1a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca,
	0x3e, 0x10, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x6b, 0x12, 0x5a, 0x0a, 0x1b, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f,
	0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45,
	0x54, 0x10, 0x08, 0x1a, 0x39, 0xc2, 0x3e, 0x19, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xca, 0x3e, 0x1a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53,
	0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59,
	0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x09, 0x1a, 0x2e, 0xc2, 0x3e, 0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e,
	0x12, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x18, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43,
	0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x10,
	0x0a, 0x1a, 0x23, 0xc2, 0x3e, 0x12, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0b, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x0b,
	0x1a, 0x29, 0xc2, 0x3e, 0x13, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x10, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x1e, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50, 0x55,
	0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x1a,
	0x22, 0xc2, 0x3e, 0x1c, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xca, 0x3e, 0x00, 0x12, 0x50, 0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43,
	0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0x0d, 0x1a, 0x2e, 0xc2, 0x3e, 0x16, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xca, 0x3e, 0x12, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x5e, 0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0e, 0x1a, 0x39, 0xc2, 0x3e, 0x1d, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x16, 0x45,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x1e, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0f, 0x1a, 0x38, 0xc2, 0x3e, 0x1c, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x16, 0x45, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43,
	0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x10, 0x10, 0x1a, 0x33, 0xc2, 0x3e, 0x18, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca,
	0x3e, 0x15, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x17, 0x52, 0x50, 0x43, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x47,
	0x45, 0x54, 0x10, 0x11, 0x1a, 0x15, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0f, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x1a, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x12, 0x1a, 0x34, 0xc2, 0x3e, 0x19,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x15, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x6b, 0x12, 0x27, 0x0a, 0x11, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x45, 0x52,
	0x47, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x13, 0x1a, 0x10, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0a,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x13, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x10, 0x14, 0x1a, 0x29, 0xc2, 0x3e, 0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x11, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2c,
	0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41,
	0x4c, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x15, 0x1a, 0x12, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0c,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x17,
	0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x53,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x16, 0x1a, 0x23, 0xc2, 0x3e, 0x15, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xca, 0x3e, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x42,
	0x0a, 0x18, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41,
	0x4c, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x17, 0x1a, 0x24, 0xc2, 0x3e,
	0x16, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x42, 0x0a, 0x18, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x54,
	0x4f, 0x52, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x10, 0x18,
	0x1a, 0x24, 0xc2, 0x3e, 0x16, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x08, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x17, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x19, 0x1a, 0x27, 0xc2, 0x3e, 0x15, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x0c,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x13,
	0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x1a, 0x1a, 0x1b, 0xc2, 0x3e, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x04, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x34, 0x0a, 0x11, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1b, 0x1a, 0x1d, 0xc2, 0x3e, 0x0f, 0x54, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x08,
	0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10,
	0x1c, 0x1a, 0x1f, 0xc2, 0x3e, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x57, 0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x1d, 0x1a, 0x32, 0xc2, 0x3e, 0x1b, 0x54, 0x65, 0x61, 0x6d,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x19, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45,
	0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x1e, 0x1a, 0x15, 0xc2, 0x3e, 0x00, 0xca,
	0x3e, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x16, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x1f, 0x1a, 0x15, 0xc2,
	0x3e, 0x00, 0xca, 0x3e, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x20, 0x1a, 0x27, 0xc2, 0x3e, 0x12, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xca, 0x3e, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x22, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c,
	0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x21, 0x1a, 0x15, 0xc2, 0x3e, 0x00, 0xca,
	0x3e, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x20, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x22, 0x1a, 0x15, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x0f, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x18, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x41,
	0x42, 0x4c, 0x45, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x23, 0x1a, 0x29, 0xc2, 0x3e,
	0x12, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xca, 0x3e, 0x11, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x49,
	0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x10,
	0x24, 0x1a, 0x14, 0xc2, 0x3e, 0x0e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x00, 0x12, 0x3a, 0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49,
	0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x53, 0x10, 0x25, 0x1a, 0x18, 0xc2, 0x3e, 0x12, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xca, 0x3e, 0x00, 0x12, 0x3f, 0x0a, 0x1e, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x26, 0x1a, 0x1b, 0xc2, 0x3e, 0x00, 0xca, 0x3e, 0x15, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x1c, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x5f, 0x47, 0x45, 0x54, 0x10, 0x2a, 0x1a, 0x29, 0xc2, 0x3e, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0xca, 0x3e,
	0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x51, 0x0a, 0x1f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x2b, 0x1a, 0x2c, 0xc2, 0x3e, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0xca, 0x3e, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x2c, 0x1a, 0x2b, 0xc2, 0x3e, 0x15, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0xca, 0x3e, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x10, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x2d, 0x1a, 0x0e, 0xc2, 0x3e, 0x00,
	0xca, 0x3e, 0x08, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x13, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x2e, 0x1a, 0x1f, 0xc2, 0x3e, 0x11, 0x53, 0x74, 0x61, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0x3e, 0x08, 0x53, 0x74, 0x61,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x20, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xe9, 0x07, 0x12, 0x22, 0x0a, 0x1d,
	0x52, 0x50, 0x43, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xea, 0x07,
	0x2a, 0xb4, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x81, 0x01, 0x0a, 0x10, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x43, 0x4f, 0x4e, 0x4f,
	0x4d, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x2a, 0xbe, 0x01, 0x0a, 0x0d,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x3a, 0x3b, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x3d, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62,
	0x73, 0x2f, 0x68, 0x69, 0x72, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hiro_proto_rawDescOnce sync.Once
	file_hiro_proto_rawDescData = file_hiro_proto_rawDesc
)

func file_hiro_proto_rawDescGZIP() []byte {
	file_hiro_proto_rawDescOnce.Do(func() {
		file_hiro_proto_rawDescData = protoimpl.X.CompressGZIP(file_hiro_proto_rawDescData)
	})
	return file_hiro_proto_rawDescData
}

var file_hiro_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_hiro_proto_msgTypes = make([]protoimpl.MessageInfo, 141)
var file_hiro_proto_goTypes = []interface{}{
	(RpcId)(0),                             // 0: hiro.RpcId
	(StatUpdateOperator)(0),                // 1: hiro.StatUpdateOperator
	(EconomyStoreType)(0),                  // 2: hiro.EconomyStoreType
	(TutorialState)(0),                     // 3: hiro.TutorialState
	(*StatUpdate)(nil),                     // 4: hiro.StatUpdate
	(*StatUpdateRequest)(nil),              // 5: hiro.StatUpdateRequest
	(*StatList)(nil),                       // 6: hiro.StatList
	(*Stat)(nil),                           // 7: hiro.Stat
	(*EventLeaderboard)(nil),               // 8: hiro.EventLeaderboard
	(*EventLeaderboardRewardTiers)(nil),    // 9: hiro.EventLeaderboardRewardTiers
	(*EventLeaderboardRewardTier)(nil),     // 10: hiro.EventLeaderboardRewardTier
	(*EventLeaderboardScore)(nil),          // 11: hiro.EventLeaderboardScore
	(*EventLeaderboardGet)(nil),            // 12: hiro.EventLeaderboardGet
	(*EventLeaderboardUpdate)(nil),         // 13: hiro.EventLeaderboardUpdate
	(*EventLeaderboardClaim)(nil),          // 14: hiro.EventLeaderboardClaim
	(*Achievement)(nil),                    // 15: hiro.Achievement
	(*SubAchievement)(nil),                 // 16: hiro.SubAchievement
	(*AchievementList)(nil),                // 17: hiro.AchievementList
	(*AchievementsClaimRequest)(nil),       // 18: hiro.AchievementsClaimRequest
	(*AchievementsGetRequest)(nil),         // 19: hiro.AchievementsGetRequest
	(*AchievementsUpdateAck)(nil),          // 20: hiro.AchievementsUpdateAck
	(*AchievementsUpdateRequest)(nil),      // 21: hiro.AchievementsUpdateRequest
	(*ChannelMessageAck)(nil),              // 22: hiro.ChannelMessageAck
	(*DevicePrefsRequest)(nil),             // 23: hiro.DevicePrefsRequest
	(*Inventory)(nil),                      // 24: hiro.Inventory
	(*InventoryConsumeRequest)(nil),        // 25: hiro.InventoryConsumeRequest
	(*InventoryConsumeRewards)(nil),        // 26: hiro.InventoryConsumeRewards
	(*EconomyDonation)(nil),                // 27: hiro.EconomyDonation
	(*EconomyDonationContributor)(nil),     // 28: hiro.EconomyDonationContributor
	(*EconomyDonationAck)(nil),             // 29: hiro.EconomyDonationAck
	(*EconomyDonationClaimRequest)(nil),    // 30: hiro.EconomyDonationClaimRequest
	(*EconomyDonationClaimRewards)(nil),    // 31: hiro.EconomyDonationClaimRewards
	(*EconomyDonationGiveRequest)(nil),     // 32: hiro.EconomyDonationGiveRequest
	(*EconomyDonationGetRequest)(nil),      // 33: hiro.EconomyDonationGetRequest
	(*EconomyDonationRequest)(nil),         // 34: hiro.EconomyDonationRequest
	(*EconomyDonationsByUserList)(nil),     // 35: hiro.EconomyDonationsByUserList
	(*EconomyDonationsList)(nil),           // 36: hiro.EconomyDonationsList
	(*EconomyList)(nil),                    // 37: hiro.EconomyList
	(*EconomyListStoreItem)(nil),           // 38: hiro.EconomyListStoreItem
	(*EconomyListStoreItemCost)(nil),       // 39: hiro.EconomyListStoreItemCost
	(*EconomyListPlacement)(nil),           // 40: hiro.EconomyListPlacement
	(*InventoryItem)(nil),                  // 41: hiro.InventoryItem
	(*InventoryListRequest)(nil),           // 42: hiro.InventoryListRequest
	(*InventoryGrantRequest)(nil),          // 43: hiro.InventoryGrantRequest
	(*InventoryUpdateItemsRequest)(nil),    // 44: hiro.InventoryUpdateItemsRequest
	(*InventoryUpdateItemProperties)(nil),  // 45: hiro.InventoryUpdateItemProperties
	(*InventoryUpdateAck)(nil),             // 46: hiro.InventoryUpdateAck
	(*InventoryList)(nil),                  // 47: hiro.InventoryList
	(*EconomyListRequest)(nil),             // 48: hiro.EconomyListRequest
	(*EconomyGrantRequest)(nil),            // 49: hiro.EconomyGrantRequest
	(*Reward)(nil),                         // 50: hiro.Reward
	(*RewardList)(nil),                     // 51: hiro.RewardList
	(*RewardEnergyModifier)(nil),           // 52: hiro.RewardEnergyModifier
	(*RewardModifier)(nil),                 // 53: hiro.RewardModifier
	(*AvailableRewards)(nil),               // 54: hiro.AvailableRewards
	(*AvailableRewardsContents)(nil),       // 55: hiro.AvailableRewardsContents
	(*AvailableRewardsItem)(nil),           // 56: hiro.AvailableRewardsItem
	(*AvailableRewardsItemSet)(nil),        // 57: hiro.AvailableRewardsItemSet
	(*AvailableRewardsCurrency)(nil),       // 58: hiro.AvailableRewardsCurrency
	(*AvailableRewardsEnergy)(nil),         // 59: hiro.AvailableRewardsEnergy
	(*AvailableRewardsEnergyModifier)(nil), // 60: hiro.AvailableRewardsEnergyModifier
	(*AvailableRewardsRewardModifier)(nil), // 61: hiro.AvailableRewardsRewardModifier
	(*RewardRangeInt32)(nil),               // 62: hiro.RewardRangeInt32
	(*RewardRangeInt64)(nil),               // 63: hiro.RewardRangeInt64
	(*EconomyPurchaseIntentRequest)(nil),   // 64: hiro.EconomyPurchaseIntentRequest
	(*EconomyPurchaseRequest)(nil),         // 65: hiro.EconomyPurchaseRequest
	(*EconomyPlacementStatusRequest)(nil),  // 66: hiro.EconomyPlacementStatusRequest
	(*EconomyPlacementStartRequest)(nil),   // 67: hiro.EconomyPlacementStartRequest
	(*EconomyPlacementStatus)(nil),         // 68: hiro.EconomyPlacementStatus
	(*EconomyUpdateAck)(nil),               // 69: hiro.EconomyUpdateAck
	(*EconomyPurchaseAck)(nil),             // 70: hiro.EconomyPurchaseAck
	(*Energy)(nil),                         // 71: hiro.Energy
	(*EnergyList)(nil),                     // 72: hiro.EnergyList
	(*EnergyModifier)(nil),                 // 73: hiro.EnergyModifier
	(*EnergySpendRequest)(nil),             // 74: hiro.EnergySpendRequest
	(*EnergySpendReward)(nil),              // 75: hiro.EnergySpendReward
	(*LeaderboardConfigList)(nil),          // 76: hiro.LeaderboardConfigList
	(*LeaderboardConfig)(nil),              // 77: hiro.LeaderboardConfig
	(*TutorialList)(nil),                   // 78: hiro.TutorialList
	(*Tutorial)(nil),                       // 79: hiro.Tutorial
	(*TutorialAcceptRequest)(nil),          // 80: hiro.TutorialAcceptRequest
	(*TutorialDeclineRequest)(nil),         // 81: hiro.TutorialDeclineRequest
	(*TutorialAbandonRequest)(nil),         // 82: hiro.TutorialAbandonRequest
	(*TutorialUpdateRequest)(nil),          // 83: hiro.TutorialUpdateRequest
	(*RateAppRequest)(nil),                 // 84: hiro.RateAppRequest
	(*Team)(nil),                           // 85: hiro.Team
	(*TeamCreateRequest)(nil),              // 86: hiro.TeamCreateRequest
	(*TeamListRequest)(nil),                // 87: hiro.TeamListRequest
	(*TeamList)(nil),                       // 88: hiro.TeamList
	(*TeamSearchRequest)(nil),              // 89: hiro.TeamSearchRequest
	(*TeamWriteChatMessageRequest)(nil),    // 90: hiro.TeamWriteChatMessageRequest
	(*Unlockable)(nil),                     // 91: hiro.Unlockable
	(*UnlockablesList)(nil),                // 92: hiro.UnlockablesList
	(*UnlockableCost)(nil),                 // 93: hiro.UnlockableCost
	(*UnlockableSlotCost)(nil),             // 94: hiro.UnlockableSlotCost
	(*UnlockablesReward)(nil),              // 95: hiro.UnlockablesReward
	(*UnlockablesRequest)(nil),             // 96: hiro.UnlockablesRequest
	nil,                                    // 97: hiro.StatList.PublicEntry
	nil,                                    // 98: hiro.StatList.PrivateEntry
	nil,                                    // 99: hiro.EventLeaderboard.RewardTiersEntry
	nil,                                    // 100: hiro.EventLeaderboard.AdditionalPropertiesEntry
	nil,                                    // 101: hiro.Achievement.SubAchievementsEntry
	nil,                                    // 102: hiro.Achievement.AdditionalPropertiesEntry
	nil,                                    // 103: hiro.SubAchievement.AdditionalPropertiesEntry
	nil,                                    // 104: hiro.AchievementList.AchievementsEntry
	nil,                                    // 105: hiro.AchievementList.RepeatAchievementsEntry
	nil,                                    // 106: hiro.AchievementsUpdateAck.AchievementsEntry
	nil,                                    // 107: hiro.AchievementsUpdateAck.RepeatAchievementsEntry
	nil,                                    // 108: hiro.DevicePrefsRequest.PreferencesEntry
	nil,                                    // 109: hiro.Inventory.ItemsEntry
	nil,                                    // 110: hiro.InventoryConsumeRequest.ItemsEntry
	nil,                                    // 111: hiro.InventoryConsumeRewards.RewardsEntry
	nil,                                    // 112: hiro.EconomyDonation.AdditionalPropertiesEntry
	nil,                                    // 113: hiro.EconomyDonationClaimRewards.ClaimedRewardsEntry
	nil,                                    // 114: hiro.EconomyDonationsByUserList.UserDonationsEntry
	nil,                                    // 115: hiro.EconomyList.DonationsEntry
	nil,                                    // 116: hiro.EconomyListStoreItem.AdditionalPropertiesEntry
	nil,                                    // 117: hiro.EconomyListStoreItemCost.CurrenciesEntry
	nil,                                    // 118: hiro.EconomyListPlacement.AdditionalPropertiesEntry
	nil,                                    // 119: hiro.InventoryItem.StringPropertiesEntry
	nil,                                    // 120: hiro.InventoryItem.NumericPropertiesEntry
	nil,                                    // 121: hiro.InventoryGrantRequest.ItemsEntry
	nil,                                    // 122: hiro.InventoryUpdateItemsRequest.ItemUpdatesEntry
	nil,                                    // 123: hiro.InventoryUpdateItemProperties.StringPropertiesEntry
	nil,                                    // 124: hiro.InventoryUpdateItemProperties.NumericPropertiesEntry
	nil,                                    // 125: hiro.InventoryList.ItemsEntry
	nil,                                    // 126: hiro.EconomyGrantRequest.CurrenciesEntry
	nil,                                    // 127: hiro.Reward.ItemsEntry
	nil,                                    // 128: hiro.Reward.CurrenciesEntry
	nil,                                    // 129: hiro.Reward.EnergiesEntry
	nil,                                    // 130: hiro.AvailableRewardsContents.ItemsEntry
	nil,                                    // 131: hiro.AvailableRewardsContents.CurrenciesEntry
	nil,                                    // 132: hiro.AvailableRewardsContents.EnergiesEntry
	nil,                                    // 133: hiro.EconomyUpdateAck.WalletEntry
	nil,                                    // 134: hiro.EconomyPurchaseAck.WalletEntry
	nil,                                    // 135: hiro.Energy.AdditionalPropertiesEntry
	nil,                                    // 136: hiro.EnergyList.EnergiesEntry
	nil,                                    // 137: hiro.EnergySpendRequest.AmountsEntry
	nil,                                    // 138: hiro.TutorialList.TutorialsEntry
	nil,                                    // 139: hiro.Tutorial.AdditionalPropertiesEntry
	nil,                                    // 140: hiro.Unlockable.AdditionalPropertiesEntry
	nil,                                    // 141: hiro.UnlockableCost.ItemsEntry
	nil,                                    // 142: hiro.UnlockableCost.CurrenciesEntry
	nil,                                    // 143: hiro.UnlockableSlotCost.ItemsEntry
	nil,                                    // 144: hiro.UnlockableSlotCost.CurrenciesEntry
	(*descriptorpb.EnumValueOptions)(nil),  // 145: google.protobuf.EnumValueOptions
}
var file_hiro_proto_depIdxs = []int32{
	1,   // 0: hiro.StatUpdate.operator:type_name -> hiro.StatUpdateOperator
	4,   // 1: hiro.StatUpdateRequest.public:type_name -> hiro.StatUpdate
	4,   // 2: hiro.StatUpdateRequest.private:type_name -> hiro.StatUpdate
	97,  // 3: hiro.StatList.public:type_name -> hiro.StatList.PublicEntry
	98,  // 4: hiro.StatList.private:type_name -> hiro.StatList.PrivateEntry
	54,  // 5: hiro.EventLeaderboard.available_rewards:type_name -> hiro.AvailableRewards
	99,  // 6: hiro.EventLeaderboard.reward_tiers:type_name -> hiro.EventLeaderboard.RewardTiersEntry
	50,  // 7: hiro.EventLeaderboard.reward:type_name -> hiro.Reward
	100, // 8: hiro.EventLeaderboard.additional_properties:type_name -> hiro.EventLeaderboard.AdditionalPropertiesEntry
	11,  // 9: hiro.EventLeaderboard.scores:type_name -> hiro.EventLeaderboardScore
	10,  // 10: hiro.EventLeaderboardRewardTiers.reward_tiers:type_name -> hiro.EventLeaderboardRewardTier
	54,  // 11: hiro.EventLeaderboardRewardTier.available_rewards:type_name -> hiro.AvailableRewards
	54,  // 12: hiro.Achievement.available_rewards:type_name -> hiro.AvailableRewards
	50,  // 13: hiro.Achievement.reward:type_name -> hiro.Reward
	54,  // 14: hiro.Achievement.available_total_reward:type_name -> hiro.AvailableRewards
	50,  // 15: hiro.Achievement.total_reward:type_name -> hiro.Reward
	101, // 16: hiro.Achievement.sub_achievements:type_name -> hiro.Achievement.SubAchievementsEntry
	102, // 17: hiro.Achievement.additional_properties:type_name -> hiro.Achievement.AdditionalPropertiesEntry
	50,  // 18: hiro.SubAchievement.reward:type_name -> hiro.Reward
	54,  // 19: hiro.SubAchievement.available_rewards:type_name -> hiro.AvailableRewards
	103, // 20: hiro.SubAchievement.additional_properties:type_name -> hiro.SubAchievement.AdditionalPropertiesEntry
	104, // 21: hiro.AchievementList.achievements:type_name -> hiro.AchievementList.AchievementsEntry
	105, // 22: hiro.AchievementList.repeat_achievements:type_name -> hiro.AchievementList.RepeatAchievementsEntry
	106, // 23: hiro.AchievementsUpdateAck.achievements:type_name -> hiro.AchievementsUpdateAck.AchievementsEntry
	107, // 24: hiro.AchievementsUpdateAck.repeat_achievements:type_name -> hiro.AchievementsUpdateAck.RepeatAchievementsEntry
	108, // 25: hiro.DevicePrefsRequest.preferences:type_name -> hiro.DevicePrefsRequest.PreferencesEntry
	109, // 26: hiro.Inventory.items:type_name -> hiro.Inventory.ItemsEntry
	110, // 27: hiro.InventoryConsumeRequest.items:type_name -> hiro.InventoryConsumeRequest.ItemsEntry
	24,  // 28: hiro.InventoryConsumeRewards.inventory:type_name -> hiro.Inventory
	111, // 29: hiro.InventoryConsumeRewards.rewards:type_name -> hiro.InventoryConsumeRewards.RewardsEntry
	54,  // 30: hiro.EconomyDonation.recipient_available_rewards:type_name -> hiro.AvailableRewards
	28,  // 31: hiro.EconomyDonation.contributors:type_name -> hiro.EconomyDonationContributor
	54,  // 32: hiro.EconomyDonation.contributor_available_rewards:type_name -> hiro.AvailableRewards
	50,  // 33: hiro.EconomyDonation.recipient_rewards:type_name -> hiro.Reward
	112, // 34: hiro.EconomyDonation.additional_properties:type_name -> hiro.EconomyDonation.AdditionalPropertiesEntry
	27,  // 35: hiro.EconomyDonationAck.donation:type_name -> hiro.EconomyDonation
	36,  // 36: hiro.EconomyDonationClaimRewards.donations:type_name -> hiro.EconomyDonationsList
	113, // 37: hiro.EconomyDonationClaimRewards.claimed_rewards:type_name -> hiro.EconomyDonationClaimRewards.ClaimedRewardsEntry
	114, // 38: hiro.EconomyDonationsByUserList.user_donations:type_name -> hiro.EconomyDonationsByUserList.UserDonationsEntry
	27,  // 39: hiro.EconomyDonationsList.donations:type_name -> hiro.EconomyDonation
	38,  // 40: hiro.EconomyList.store_items:type_name -> hiro.EconomyListStoreItem
	40,  // 41: hiro.EconomyList.placements:type_name -> hiro.EconomyListPlacement
	115, // 42: hiro.EconomyList.donations:type_name -> hiro.EconomyList.DonationsEntry
	39,  // 43: hiro.EconomyListStoreItem.cost:type_name -> hiro.EconomyListStoreItemCost
	54,  // 44: hiro.EconomyListStoreItem.available_rewards:type_name -> hiro.AvailableRewards
	116, // 45: hiro.EconomyListStoreItem.additional_properties:type_name -> hiro.EconomyListStoreItem.AdditionalPropertiesEntry
	117, // 46: hiro.EconomyListStoreItemCost.currencies:type_name -> hiro.EconomyListStoreItemCost.CurrenciesEntry
	50,  // 47: hiro.EconomyListPlacement.reward:type_name -> hiro.Reward
	54,  // 48: hiro.EconomyListPlacement.available_rewards:type_name -> hiro.AvailableRewards
	118, // 49: hiro.EconomyListPlacement.additional_properties:type_name -> hiro.EconomyListPlacement.AdditionalPropertiesEntry
	54,  // 50: hiro.InventoryItem.consume_available_rewards:type_name -> hiro.AvailableRewards
	119, // 51: hiro.InventoryItem.string_properties:type_name -> hiro.InventoryItem.StringPropertiesEntry
	120, // 52: hiro.InventoryItem.numeric_properties:type_name -> hiro.InventoryItem.NumericPropertiesEntry
	121, // 53: hiro.InventoryGrantRequest.items:type_name -> hiro.InventoryGrantRequest.ItemsEntry
	122, // 54: hiro.InventoryUpdateItemsRequest.item_updates:type_name -> hiro.InventoryUpdateItemsRequest.ItemUpdatesEntry
	123, // 55: hiro.InventoryUpdateItemProperties.string_properties:type_name -> hiro.InventoryUpdateItemProperties.StringPropertiesEntry
	124, // 56: hiro.InventoryUpdateItemProperties.numeric_properties:type_name -> hiro.InventoryUpdateItemProperties.NumericPropertiesEntry
	24,  // 57: hiro.InventoryUpdateAck.inventory:type_name -> hiro.Inventory
	125, // 58: hiro.InventoryList.items:type_name -> hiro.InventoryList.ItemsEntry
	2,   // 59: hiro.EconomyListRequest.store_type:type_name -> hiro.EconomyStoreType
	126, // 60: hiro.EconomyGrantRequest.currencies:type_name -> hiro.EconomyGrantRequest.CurrenciesEntry
	53,  // 61: hiro.EconomyGrantRequest.reward_modifiers:type_name -> hiro.RewardModifier
	127, // 62: hiro.Reward.items:type_name -> hiro.Reward.ItemsEntry
	128, // 63: hiro.Reward.currencies:type_name -> hiro.Reward.CurrenciesEntry
	129, // 64: hiro.Reward.energies:type_name -> hiro.Reward.EnergiesEntry
	52,  // 65: hiro.Reward.energy_modifiers:type_name -> hiro.RewardEnergyModifier
	53,  // 66: hiro.Reward.reward_modifiers:type_name -> hiro.RewardModifier
	50,  // 67: hiro.RewardList.rewards:type_name -> hiro.Reward
	55,  // 68: hiro.AvailableRewards.guaranteed:type_name -> hiro.AvailableRewardsContents
	55,  // 69: hiro.AvailableRewards.weighted:type_name -> hiro.AvailableRewardsContents
	130, // 70: hiro.AvailableRewardsContents.items:type_name -> hiro.AvailableRewardsContents.ItemsEntry
	57,  // 71: hiro.AvailableRewardsContents.item_sets:type_name -> hiro.AvailableRewardsItemSet
	131, // 72: hiro.AvailableRewardsContents.currencies:type_name -> hiro.AvailableRewardsContents.CurrenciesEntry
	132, // 73: hiro.AvailableRewardsContents.energies:type_name -> hiro.AvailableRewardsContents.EnergiesEntry
	60,  // 74: hiro.AvailableRewardsContents.energy_modifiers:type_name -> hiro.AvailableRewardsEnergyModifier
	61,  // 75: hiro.AvailableRewardsContents.reward_modifiers:type_name -> hiro.AvailableRewardsRewardModifier
	63,  // 76: hiro.AvailableRewardsItem.count:type_name -> hiro.RewardRangeInt64
	63,  // 77: hiro.AvailableRewardsItemSet.count:type_name -> hiro.RewardRangeInt64
	63,  // 78: hiro.AvailableRewardsCurrency.count:type_name -> hiro.RewardRangeInt64
	62,  // 79: hiro.AvailableRewardsEnergy.count:type_name -> hiro.RewardRangeInt32
	63,  // 80: hiro.AvailableRewardsEnergyModifier.value:type_name -> hiro.RewardRangeInt64
	63,  // 81: hiro.AvailableRewardsEnergyModifier.duration_sec:type_name -> hiro.RewardRangeInt64
	63,  // 82: hiro.AvailableRewardsRewardModifier.value:type_name -> hiro.RewardRangeInt64
	63,  // 83: hiro.AvailableRewardsRewardModifier.duration_sec:type_name -> hiro.RewardRangeInt64
	2,   // 84: hiro.EconomyPurchaseIntentRequest.store_type:type_name -> hiro.EconomyStoreType
	2,   // 85: hiro.EconomyPurchaseRequest.store_type:type_name -> hiro.EconomyStoreType
	50,  // 86: hiro.EconomyPlacementStatus.reward:type_name -> hiro.Reward
	133, // 87: hiro.EconomyUpdateAck.wallet:type_name -> hiro.EconomyUpdateAck.WalletEntry
	24,  // 88: hiro.EconomyUpdateAck.inventory:type_name -> hiro.Inventory
	50,  // 89: hiro.EconomyUpdateAck.reward:type_name -> hiro.Reward
	134, // 90: hiro.EconomyPurchaseAck.wallet:type_name -> hiro.EconomyPurchaseAck.WalletEntry
	24,  // 91: hiro.EconomyPurchaseAck.inventory:type_name -> hiro.Inventory
	50,  // 92: hiro.EconomyPurchaseAck.reward:type_name -> hiro.Reward
	73,  // 93: hiro.Energy.modifiers:type_name -> hiro.EnergyModifier
	54,  // 94: hiro.Energy.available_rewards:type_name -> hiro.AvailableRewards
	135, // 95: hiro.Energy.additional_properties:type_name -> hiro.Energy.AdditionalPropertiesEntry
	136, // 96: hiro.EnergyList.energies:type_name -> hiro.EnergyList.EnergiesEntry
	137, // 97: hiro.EnergySpendRequest.amounts:type_name -> hiro.EnergySpendRequest.AmountsEntry
	72,  // 98: hiro.EnergySpendReward.energies:type_name -> hiro.EnergyList
	50,  // 99: hiro.EnergySpendReward.reward:type_name -> hiro.Reward
	77,  // 100: hiro.LeaderboardConfigList.leaderboard_configs:type_name -> hiro.LeaderboardConfig
	138, // 101: hiro.TutorialList.tutorials:type_name -> hiro.TutorialList.TutorialsEntry
	3,   // 102: hiro.Tutorial.state:type_name -> hiro.TutorialState
	139, // 103: hiro.Tutorial.additional_properties:type_name -> hiro.Tutorial.AdditionalPropertiesEntry
	85,  // 104: hiro.TeamList.teams:type_name -> hiro.Team
	93,  // 105: hiro.Unlockable.start_cost:type_name -> hiro.UnlockableCost
	93,  // 106: hiro.Unlockable.cost:type_name -> hiro.UnlockableCost
	50,  // 107: hiro.Unlockable.reward:type_name -> hiro.Reward
	54,  // 108: hiro.Unlockable.available_rewards:type_name -> hiro.AvailableRewards
	140, // 109: hiro.Unlockable.additional_properties:type_name -> hiro.Unlockable.AdditionalPropertiesEntry
	91,  // 110: hiro.UnlockablesList.unlockables:type_name -> hiro.Unlockable
	91,  // 111: hiro.UnlockablesList.overflow:type_name -> hiro.Unlockable
	94,  // 112: hiro.UnlockablesList.slot_cost:type_name -> hiro.UnlockableSlotCost
	141, // 113: hiro.UnlockableCost.items:type_name -> hiro.UnlockableCost.ItemsEntry
	142, // 114: hiro.UnlockableCost.currencies:type_name -> hiro.UnlockableCost.CurrenciesEntry
	143, // 115: hiro.UnlockableSlotCost.items:type_name -> hiro.UnlockableSlotCost.ItemsEntry
	144, // 116: hiro.UnlockableSlotCost.currencies:type_name -> hiro.UnlockableSlotCost.CurrenciesEntry
	92,  // 117: hiro.UnlockablesReward.unlockables:type_name -> hiro.UnlockablesList
	50,  // 118: hiro.UnlockablesReward.reward:type_name -> hiro.Reward
	54,  // 119: hiro.UnlockablesReward.available_rewards:type_name -> hiro.AvailableRewards
	7,   // 120: hiro.StatList.PublicEntry.value:type_name -> hiro.Stat
	7,   // 121: hiro.StatList.PrivateEntry.value:type_name -> hiro.Stat
	9,   // 122: hiro.EventLeaderboard.RewardTiersEntry.value:type_name -> hiro.EventLeaderboardRewardTiers
	16,  // 123: hiro.Achievement.SubAchievementsEntry.value:type_name -> hiro.SubAchievement
	15,  // 124: hiro.AchievementList.AchievementsEntry.value:type_name -> hiro.Achievement
	15,  // 125: hiro.AchievementList.RepeatAchievementsEntry.value:type_name -> hiro.Achievement
	15,  // 126: hiro.AchievementsUpdateAck.AchievementsEntry.value:type_name -> hiro.Achievement
	15,  // 127: hiro.AchievementsUpdateAck.RepeatAchievementsEntry.value:type_name -> hiro.Achievement
	41,  // 128: hiro.Inventory.ItemsEntry.value:type_name -> hiro.InventoryItem
	51,  // 129: hiro.InventoryConsumeRewards.RewardsEntry.value:type_name -> hiro.RewardList
	51,  // 130: hiro.EconomyDonationClaimRewards.ClaimedRewardsEntry.value:type_name -> hiro.RewardList
	36,  // 131: hiro.EconomyDonationsByUserList.UserDonationsEntry.value:type_name -> hiro.EconomyDonationsList
	27,  // 132: hiro.EconomyList.DonationsEntry.value:type_name -> hiro.EconomyDonation
	45,  // 133: hiro.InventoryUpdateItemsRequest.ItemUpdatesEntry.value:type_name -> hiro.InventoryUpdateItemProperties
	41,  // 134: hiro.InventoryList.ItemsEntry.value:type_name -> hiro.InventoryItem
	56,  // 135: hiro.AvailableRewardsContents.ItemsEntry.value:type_name -> hiro.AvailableRewardsItem
	58,  // 136: hiro.AvailableRewardsContents.CurrenciesEntry.value:type_name -> hiro.AvailableRewardsCurrency
	59,  // 137: hiro.AvailableRewardsContents.EnergiesEntry.value:type_name -> hiro.AvailableRewardsEnergy
	71,  // 138: hiro.EnergyList.EnergiesEntry.value:type_name -> hiro.Energy
	79,  // 139: hiro.TutorialList.TutorialsEntry.value:type_name -> hiro.Tutorial
	145, // 140: hiro.input:extendee -> google.protobuf.EnumValueOptions
	145, // 141: hiro.output:extendee -> google.protobuf.EnumValueOptions
	142, // [142:142] is the sub-list for method output_type
	142, // [142:142] is the sub-list for method input_type
	142, // [142:142] is the sub-list for extension type_name
	140, // [140:142] is the sub-list for extension extendee
	0,   // [0:140] is the sub-list for field type_name
}

func init() { file_hiro_proto_init() }
func file_hiro_proto_init() {
	if File_hiro_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hiro_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLeaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLeaderboardRewardTiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLeaderboardRewardTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLeaderboardScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLeaderboardGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLeaderboardUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLeaderboardClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Achievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementsClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementsUpdateAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessageAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePrefsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryConsumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryConsumeRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonationContributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonationAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonationClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonationClaimRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonationGiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonationGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonationsByUserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyDonationsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyListStoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyListStoreItemCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyListPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryUpdateItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryUpdateItemProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryUpdateAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardEnergyModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableRewardsContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableRewardsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableRewardsItemSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableRewardsCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableRewardsEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableRewardsEnergyModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableRewardsRewardModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardRangeInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardRangeInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyPurchaseIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyPurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyPlacementStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyPlacementStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyPlacementStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyUpdateAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EconomyPurchaseAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Energy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergyModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergySpendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergySpendReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tutorial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialAcceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialDeclineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialAbandonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamWriteChatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unlockable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockablesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockableCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockableSlotCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockablesReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hiro_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hiro_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   141,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_hiro_proto_goTypes,
		DependencyIndexes: file_hiro_proto_depIdxs,
		EnumInfos:         file_hiro_proto_enumTypes,
		MessageInfos:      file_hiro_proto_msgTypes,
		ExtensionInfos:    file_hiro_proto_extTypes,
	}.Build()
	File_hiro_proto = out.File
	file_hiro_proto_rawDesc = nil
	file_hiro_proto_goTypes = nil
	file_hiro_proto_depIdxs = nil
}
